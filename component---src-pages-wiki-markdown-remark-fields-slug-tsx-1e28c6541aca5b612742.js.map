{"version":3,"file":"component---src-pages-wiki-markdown-remark-fields-slug-tsx-1e28c6541aca5b612742.js","mappings":"yGAAA,KACEA,OAAQ,mB,0GCEV,MAAMC,EAAYC,EAAAA,QAAOC,IAAG,qEAAVD,CAAU,yOA2Bb,SAASE,EAAI,GAEzB,IADD,SAAEC,GAAgC,EAElC,OACEC,EAAAA,cAACL,EAAS,CAACM,wBAAyB,CAAEC,OAAQH,IAElD,CCjCA,MAAMJ,EAAYC,EAAAA,QAAOC,IAAG,4EAAVD,CAAU,uIAgBb,SAASO,EAAY,GAEjC,IADD,SAAEJ,GAAgC,EAElC,OACEC,EAAAA,cAACL,EAAS,CAACM,wBAAyB,CAAEC,OAAQH,IAElD,C,cCnBA,MAAMJ,EAAYC,EAAAA,QAAOC,IAAG,sEAAVD,CAAU,yIAKhBQ,EAAAA,EAAOV,QAKbW,EAAOT,EAAAA,QAAOC,IAAG,iEAAVD,CAAU,qFAOXQ,EAAAA,EAAOV,QAKbY,EAAOV,EAAAA,QAAOC,IAAG,iEAAVD,CAAU,mFAIXQ,EAAAA,EAAOV,QAOJ,SAASa,EAAK,GAY1B,IAXD,MACEC,EAAK,gBACLC,EAAe,gBACfC,EAAe,aACfC,GAMD,EAED,OACEX,EAAAA,cAACL,EAAS,KACRK,EAAAA,cAACK,EAAI,KACHL,EAAAA,cAACF,EAAG,CAACC,SAAUU,IACfT,EAAAA,cAAAA,OAAAA,KAAOU,IAETV,EAAAA,cAACM,EAAI,KACHN,EAAAA,cAAAA,KAAAA,KAAKQ,GACLR,EAAAA,cAACF,EAAG,CAACC,SAAUU,IACdT,EAAAA,cAACG,EAAW,CAACJ,SAAUY,KAIhC,CCjEO,SAASC,EAAmBC,GACjC,OAAOA,EAAKC,QAAQ,qBAAsB,GAC5C,CCKA,MAAMC,EAAmB,CACvBC,SAAU,QACVC,YAAa,SAGA,SAASC,EAAiB,GAEvC,YADA,KAAEC,GAA0C,EAE5C,MAAM,SACJC,EAAQ,gBACRX,EAAe,KACfI,GACqB,QAAtB,EAAGM,EAAKE,sBAAc,QAAI,CAAC,EACtBC,EAAQT,IAAQU,EAAAA,EAAAA,GAAiBV,GAEjCH,GADeG,GCpBR,SAA8BW,GAC3C,MAAMC,EAAQ,wBACRC,EAAQ,GACd,IAAIC,EACJ,KAAQA,EAAQF,EAAMG,KAAKJ,IAAY,CACrC,MAAMK,EAAOF,EAAM,GACfE,EAAKC,SAAS,QAChBJ,EAAMK,KAAKF,EAAKG,UAAUH,EAAKI,YAAY,KAAO,EAAGJ,EAAKK,OAAS,GAEvE,CACA,OAAOR,CACT,CDS+BS,CAAqBtB,IAAS,IACtBuB,KAAIP,GACvC7B,EAAAA,cAAAA,IAAAA,CAAGqC,IAAKR,EAAMS,KAAI,MAAQT,EAAQU,MAAOxB,GAAmBc,KAG9D,OACE7B,EAAAA,cAACO,EAAI,CACHC,OAAOY,SAAa,QAAL,EAARA,EAAW,UAAE,WAAL,EAARoB,EAAeC,aAASC,EAC/BjC,gBAAiBA,GAAmB,GACpCC,gBAAiBA,EACjBC,aAAcC,EAAmBU,GAAS,KAGhD,C","sources":["webpack://cat-logic/./src/constants/device.ts","webpack://cat-logic/./src/components/molecules/Toc.tsx","webpack://cat-logic/./src/components/molecules/WikiContent.tsx","webpack://cat-logic/./src/components/templates/Wiki.tsx","webpack://cat-logic/./src/utils/html-string.ts","webpack://cat-logic/./src/pages/wiki/{markdownRemark.fields__slug}.tsx","webpack://cat-logic/./src/utils/internal-links.ts"],"sourcesContent":["export default {\n  larger: \"min-width: 700px\",\n}\n","import * as React from \"react\"\nimport styled from \"styled-components\"\n\nconst Container = styled.div`\n  box-sizing: border-box;\n  background-color: #f5f5f5;\n  padding: 1rem 1rem 1rem 0;\n\n  ul {\n    list-style: none;\n    padding-left: 1rem;\n    margin: 0;\n    font-size: .8rem;\n    font-weight: bold;\n\n    ul {\n      font-size: .6rem;\n      font-weight: normal;\n    }\n\n    p {\n      margin: 0;\n    }\n  }\n\n  a {\n    text-decoration: none;\n  }\n`\n\nexport default function Toc(\n  { contents }: { contents: string },\n) {\n  return (\n    <Container dangerouslySetInnerHTML={{ __html: contents }} />\n  )\n}\n","import * as React from \"react\"\nimport styled from \"styled-components\"\n\nconst Container = styled.div`\n  overflow: auto;\n\n  a {\n    text-decoration: none;\n  }\n\n  pre {\n    font-size: 85%;\n    background-color: #f5f5f5;\n    border-radius: .5rem;\n    padding: 1rem;\n    overflow: auto;\n  }\n`\n\nexport default function WikiContent(\n  { contents }: { contents: string },\n) {\n  return (\n    <Container dangerouslySetInnerHTML={{ __html: contents }} />\n  )\n}\n","import * as React from \"react\"\nimport styled from \"styled-components\"\nimport Toc from \"../../components/molecules/Toc\"\nimport WikiContent from \"../../components/molecules/WikiContent\"\nimport device from \"../../constants/device\"\n\nconst Container = styled.div`\n  display: grid;\n  grid-template-columns: 1fr;\n  width: fit-content;\n\n  @media (${device.larger}) {\n    grid-template-columns: minmax(300px, 1fr) minmax(400px, 1000px);\n  }\n`\n\nconst Side = styled.div`\n  display: none;\n\n  & > div:nth-child(2) {\n    padding-top: 1rem;\n  }\n\n  @media (${device.larger}) {\n    display: block;\n  }\n`\n\nconst Main = styled.div`\n  padding: 0 1rem;\n  overflow: auto;\n\n  @media (${device.larger}) {\n    & > div:nth-child(2) {\n      display: none;\n    }\n  }\n`\n\nexport default function Wiki(\n  {\n    title,\n    tableOfContents,\n    relatedLinksToc,\n    wikiContents,\n  }: {\n    title?: string\n    tableOfContents: string\n    relatedLinksToc: JSX.Element[]\n    wikiContents: string\n  },\n) {\n  return (\n    <Container>\n      <Side>\n        <Toc contents={tableOfContents} />\n        <span>{relatedLinksToc}</span>\n      </Side>\n      <Main>\n        <h1>{title}</h1>\n        <Toc contents={tableOfContents} />\n        {<WikiContent contents={wikiContents} />}\n      </Main>\n    </Container>\n  )\n}\n","export function removeFirstHeading(html: string): string {\n  return html.replace(/<h1.*?>(.*?)<\\/h1>/, '')\n}\n","import * as React from \"react\"\nimport { graphql, PageProps } from \"gatsby\"\nimport replaceWikiLinks from \"../../utils/wiki\"\nimport extractInternalLinks from \"../../utils/internal-links\"\nimport Wiki from \"../../components/templates/Wiki\"\nimport { removeFirstHeading } from \"../../utils/html-string\"\n\nconst relatedLinkStyle = {\n  fontSize: \"0.5em\",\n  marginRight: \"0.5em\",\n}\n\nexport default function BlogPostTemplate(\n  { data }: PageProps<Queries.WikiDetailQuery>,\n) {\n  const {\n    headings,\n    tableOfContents,\n    html\n  } = data.markdownRemark ?? {}\n  const rhtml = html && replaceWikiLinks(html)\n  const relatedLinks = html && extractInternalLinks(html) || []\n  const relatedLinksToc = relatedLinks.map(link => (\n    <a key={link} href={`../${link}`} style={relatedLinkStyle}>{link}</a>\n  ))\n\n  return (\n    <Wiki\n      title={headings?.[0]?.value || undefined}\n      tableOfContents={tableOfContents || \"\"}\n      relatedLinksToc={relatedLinksToc}\n      wikiContents={removeFirstHeading(rhtml || \"\")}\n    />\n  )\n}\n\nexport const pageQuery = graphql`\n  query WikiDetail($id: String!) {\n    markdownRemark(id: { eq: $id }) {\n      headings(depth: h1) {\n        value\n      }\n      tableOfContents\n      html\n    }\n  }\n`\n","// e.g. <a href=\"/s9dg781hasd/javascript.md\"> -> [javascript]\nexport default function extractInternalLinks(markdown: string): string[] {\n  const regex = /<a href=\"\\/([^\"]+)\">/g\n  const links = []\n  let match\n  while ((match = regex.exec(markdown))) {\n    const link = match[1]\n    if (link.endsWith(\".md\")) {\n      links.push(link.substring(link.lastIndexOf(\"/\") + 1, link.length - 3))\n    }\n  }\n  return links\n}\n"],"names":["larger","Container","styled","div","Toc","contents","React","dangerouslySetInnerHTML","__html","WikiContent","device","Side","Main","Wiki","title","tableOfContents","relatedLinksToc","wikiContents","removeFirstHeading","html","replace","relatedLinkStyle","fontSize","marginRight","BlogPostTemplate","data","headings","markdownRemark","rhtml","replaceWikiLinks","markdown","regex","links","match","exec","link","endsWith","push","substring","lastIndexOf","length","extractInternalLinks","map","key","href","style","_headings$","value","undefined"],"sourceRoot":""}