{"componentChunkName":"component---src-pages-wiki-markdown-remark-fields-slug-tsx","path":"/wiki/programming-philosophy/","result":{"data":{"markdownRemark":{"tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EA%B0%9C%EB%B0%9C-%EC%B2%A0%ED%95%99\">개발 철학</a></p>\n</li>\n<li>\n<p><a href=\"#ted---linus-torvalds-%EB%A6%AC%EB%88%85%EC%8A%A4%EC%9D%98-%EA%B8%B0%EB%B3%B8-%EC%B2%A0%ED%95%99\">TED - Linus Torvalds: 리눅스의 기본 철학</a></p>\n<ul>\n<li><a href=\"#%EC%A2%8B%EC%9D%80-%EC%BD%94%EB%93%9C\">좋은 코드</a></li>\n<li><a href=\"#%EB%A6%AC%EB%88%84%EC%8A%A4-%ED%86%A0%EB%B0%9C%EC%8A%A4%EC%9D%98-%EA%B0%9C%EB%B0%9C%EC%9E%90-%EC%9E%90%EC%84%B8\">리누스 토발스의 개발자 자세</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EA%B0%9C%EB%B0%9C%EC%97%90-%EB%8C%80%ED%95%9C-%EC%82%AC%EC%86%8C%ED%95%9C-%EC%83%9D%EA%B0%81\">개발에 대한 사소한 생각</a></p>\n<ul>\n<li><a href=\"#%EC%BD%94%EB%93%9C-%EC%8A%A4%ED%83%80%EC%9D%BC\">코드 스타일</a></li>\n<li><a href=\"#%EC%96%B8%EC%96%B4\">언어</a></li>\n<li><a href=\"#%EC%A7%91%EC%A4%91\">집중</a></li>\n<li><a href=\"#%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\">프로그래밍</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%BD%94%EB%93%9C-%EB%A6%AC%EB%B7%B0\">코드 리뷰</a></p>\n<ul>\n<li><a href=\"#%EC%BD%94%EB%93%9C-%EC%8A%A4%ED%83%80%EC%9D%BC-%EB%A6%AC%EB%B7%B0%EB%8A%94-%EA%B0%80%EC%9E%A5-%EA%B8%B0%EB%B3%B8%EC%A0%81%EC%9D%B8-%EB%A6%AC%EB%B7%B0%EB%8B%A4\">코드 스타일 리뷰는 가장 기본적인 리뷰다.</a></li>\n</ul>\n</li>\n</ul>","html":"<h1 id=\"개발-철학\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EB%B0%9C-%EC%B2%A0%ED%95%99\" aria-label=\"개발 철학 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개발 철학</h1>\n<h1 id=\"ted---linus-torvalds-리눅스의-기본-철학\" style=\"position:relative;\"><a href=\"#ted---linus-torvalds-%EB%A6%AC%EB%88%85%EC%8A%A4%EC%9D%98-%EA%B8%B0%EB%B3%B8-%EC%B2%A0%ED%95%99\" aria-label=\"ted   linus torvalds 리눅스의 기본 철학 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TED - Linus Torvalds: 리눅스의 기본 철학</h1>\n<p><a href=\"https://www.ted.com/talks/linus_torvalds_the_mind_behind_linux?language=ko\">TED - 리누스 토발스(Linus Torvalds): 리눅스의 기본 철학</a></p>\n<h2 id=\"좋은-코드\" style=\"position:relative;\"><a href=\"#%EC%A2%8B%EC%9D%80-%EC%BD%94%EB%93%9C\" aria-label=\"좋은 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>좋은 코드</h2>\n<p>14:20 장면을 보면 Linked list의 node를 제거하는 method를 구현한 2가지 코드를 비교하여 보여준다.</p>\n<p><strong>Code 1</strong></p>\n<pre><code class=\"language-c\">remove_list_entry(entry)\n{\n    prev = NULL;\n    walk = head;\n\n    // Walk the lsit\n\n    while (walk != entry) {\n        prev = walk;\n        walk = walk->next;\n    }\n\n    // Remove the entry by updating the\n    // head or the previous entry\n\n    if (!prev)\n        head = entry->next;\n    else\n        prev->next = entry->next;\n}\n</code></pre>\n<p><strong>Code 2</strong></p>\n<pre><code class=\"language-c\">remove_list_entry(entry)\n{\n    // The \"indirect\" pointer points to the\n    // *address* of the thing we'll update\n\n    indirect = &#x26;head;\n\n    // Walk the list, looking for the thing that\n    // points to the entry we want to remove\n\n    while ((*indirect) != entry)\n        indirect = &#x26;(*indirect)->next;\n\n    // ... and just remove it\n    *indirect = entry->next;\n}\n</code></pre>\n<p>차이점은 마지막 부분의 if-else 키워드의 유무이다.</p>\n<p>첫 번째 코드는 명시적으로 조건문을 통해 제거하려 하는 노드가 첫 번째 노드인지 아닌지에 따라 다르게 처리한다.\n그러나 두 번째 코드는 제거하려는 노드가 가리키는 주소를 다음 노드로 변경한다.</p>\n<p>리누스 토발스가 말하는 것은 특수 조건이 사라지면서 코드가 더 간결해 진다는 것이다.</p>\n<p>알고리즘 순서도 만 보더라도 분기가 생기면 복잡한 그림이 된다.</p>\n<h2 id=\"리누스-토발스의-개발자-자세\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EB%88%84%EC%8A%A4-%ED%86%A0%EB%B0%9C%EC%8A%A4%EC%9D%98-%EA%B0%9C%EB%B0%9C%EC%9E%90-%EC%9E%90%EC%84%B8\" aria-label=\"리누스 토발스의 개발자 자세 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리누스 토발스의 개발자 자세</h2>\n<p>16:40 장면부터</p>\n<p>자신은 git, linux와 같은 프로젝트를 만들었음에도 예지자가 아니라고 한다.</p>\n<p>하늘을 보며 걷는(미래 지향적인) 사람들과 일하는 게 좋으며,\n자신은 그 <strong>사람들이 구멍에 빠지지 않게 구멍을 메우는 일</strong> 을 한다고 한다.</p>\n<p>Wow..</p>\n<h1 id=\"개발에-대한-사소한-생각\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EB%B0%9C%EC%97%90-%EB%8C%80%ED%95%9C-%EC%82%AC%EC%86%8C%ED%95%9C-%EC%83%9D%EA%B0%81\" aria-label=\"개발에 대한 사소한 생각 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개발에 대한 사소한 생각</h1>\n<p>가끔 정말 사소할 수 있거나, 피부로는 느끼지만 말로 표현할 수 없었던 것들이 있다.</p>\n<p>트렌드에 관한 것들이 대표적이다.\n표현하기 힘든 이유은 시간이 지남에 따라 정말 조금씩 염색해 나가기 때문이다.</p>\n<p>그리고 이런 것들을 잘 표현하는 사람도 있다.</p>\n<hr>\n<h2 id=\"코드-스타일\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C-%EC%8A%A4%ED%83%80%EC%9D%BC\" aria-label=\"코드 스타일 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드 스타일</h2>\n<p>예전에는 코드 스타일이 마치 시 같은 것이 유행했다.</p>\n<p>원래 단어를 알기 힘들도록 줄여진 변수와 함수 이름이 그렇다.</p>\n<p>시를 적고 주석으로 시의 해석을 작성했다.</p>\n<p><a href=\"https://www.facebook.com/dgtgrade/posts/1249328668459330\">https://www.facebook.com/dgtgrade/posts/1249328668459330</a></p>\n<blockquote>\n<p>요즘은 함수명, 변수명이 길어진 것 같다. 내 코드도 그렇고, 남의 코드도 그렇다. 옛날에는 왜 그렇게 안 했을까? 모니터가 작았고, 에디터가 불편 해서 그랬으려나. 또는 옛날에는 조금 더 간결한 것을 좋아하는, 그러니까 alpha 보다는 a를 좋아하는 프로그래머가 더 많아서 그랬을 수도 있겠다.</p>\n<p>...</p>\n<p>옛날에는 내 코드를 내가 이해하기 위해서라도 코멘트를 꽤 많이 달아 두었어야 했다. 코멘트를 다는 일은 매우 귀찮은 일이지만 어쩔 수 없었다. 그런데 요즘은 최소한 나 스스로를 위해서는 코멘트를 달아둘 일이 거의 없는 것 같다.</p>\n<p>gt = 0 # ground truth</p>\n<p>옛날 습관대로 이렇게 코딩 했다가, 에잇!. 하고,</p>\n<p>ground_truth = 0</p>\n<p>이렇게 고쳐쓰는 일이 많아졌다.</p>\n<p>평균적으로 코드 100줄에 (단순히 코드를 설명하긴 위한) 코멘트는 5줄도 안 되는 것 같다.</p>\n<p>...</p>\n<p>가만 생각해 보니, 함수명, 변수명은 더 길어지고, 신택스는 더 짧아지고 쉬워져서, 코멘트를 달아봐야 그 내용이 그냥 코드를 읽어주는 수준인 경우가 많아져서 그런 거 같다.</p>\n</blockquote>\n<p>그리고 지금은 필요한 만큼만 적당히 하자는 느낌.</p>\n<p>코딩은 개발자의 문학같다.</p>\n<h2 id=\"언어\" style=\"position:relative;\"><a href=\"#%EC%96%B8%EC%96%B4\" aria-label=\"언어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>언어</h2>\n<p>4학년이 되어서도 어떤 분야의 개발자가 되고 싶은지 결정하지 못했었다.</p>\n<p>웹 쪽이 마음에 있긴 했으나 저급 언어보다는 배우기 쉽다는 느낌이 계속 드는게 싫었다.</p>\n<p>솔루션만 낼 수 있다면 러닝 커브가 어떻든 관계 없다고 생각했다.</p>\n<p>결국 유행과 서비스에 가장 가까운 웹을 선택했다.</p>\n<p>그러면 계속 웹을 할 것인가?</p>\n<p><a href=\"https://www.facebook.com/dgtgrade/posts/1248502591875271\">https://www.facebook.com/dgtgrade/posts/1248502591875271</a></p>\n<blockquote>\n<p>90년대 말. 당시에 C를 잘 하는 선배는 많았다. 그런데 Java를 조금이라도 하는 선배는 많지 않았다. Assembly는 잘 다뤄도 HTML, Javascript, CSS는 다루지 못하는 선배가 많았다.</p>\n<p>나는 Java, HTML, CSS, Javascript를 다룰 수 있었다. (그 기술들도, 그리고 나도) 아주 기초적인 수준이었고, 아마 C와 Assembly를 잘 하는 선배들이 관심만 가지면 한주 또는 한달이면 다 할 수 있는 수준이었을 거다.</p>\n<p>그런데 그런 수준으로도 이런 저런 크고 작은 일을 할 수 있는 기회가 많이 주어졌었다. 수요는 넘쳐났는데 공급이 매우 딸리는 상황이었던 것이다.</p>\n<p>2008년부터 2013년 정도까지는 모바일에서 그런 상황이 연출 되었었다. 모바일을 잘 이해하는 개발자, 디자이너, 기획자는 그 희소가치가 매우 높았다.</p>\n<p>그리고, 지금, 그러니까 아마 2014년 정도부터는 머신러닝이 그렇다.</p>\n<p>그동안, 그러니까 지난 70년 동안 알고리즘과 휴리스틱으로 풀어 보려 노력 했으나 잘 안 풀리던 문제들이 머신러닝으로 마치 \"마술 같이\" 또는 \"믿기 어려울 정도로 간단하게\" 풀려 버린다는 보고들이 계속 나오고 있다.</p>\n<p>앞으로 머신러닝으로 얼마나 많은 문제들을 풀 수 있을까?</p>\n<p>♫ 세상에 뿌려진 패턴만큼 ♫ ?</p>\n<p>아무튼 풀어야 할 아니 최소한 풀어보는 시도는 해 봐야 할 문제들은 엄청나게 많이 쌓여있다.</p>\n<p>그에 반해 머신러닝을 할 수 있는 사람은 매우 적다.</p>\n<p>그래서 어떤 개발자든 머신러닝을 3달만 공부하면 앞으로 한동안 좋은 기회들을 맞이할 수 있을 거라 나는 확신한다.</p>\n</blockquote>\n<h2 id=\"집중\" style=\"position:relative;\"><a href=\"#%EC%A7%91%EC%A4%91\" aria-label=\"집중 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>집중</h2>\n<p>나는 웹의 수혜를 잔뜩 얻은 세대다.</p>\n<p>초딩 때 컴퓨터가 유행하더니 순식간에 내 손으로 쥘 수 있을만큼 작아졌고\n눈만 돌리면 보이는게 웹이다 보니 그 정보바다에 빠져버렸다.</p>\n<p>지금도 못 나왔다.</p>\n<p>코딩을 검색으로 시작했다 보니 크게 와닿지는 않지만 무슨 느낌인지는 알겠다.</p>\n<p><a href=\"https://www.facebook.com/dgtgrade/posts/1247704851955045\">https://www.facebook.com/dgtgrade/posts/1247704851955045</a></p>\n<blockquote>\n<p>요즘에 코딩 할 때, 웹에서 참고할 만한 Example 코드 찾아서 이해 하려고 노력 하는 시간이 전체 코딩 시간의 상당부분을 차지 하는 것 같다.</p>\n<p>구글이 없으면 코딩을 못 할 것 같은 느낌...</p>\n<p>뭔가 미래가 불안 하고, 스스로에게 불만족스럽다.</p>\n<p>옛날에는 (그러니까 2000년도 쯤에는) 조금만 특별한 것, 또는 어려운 것을 구현 하려면 (웹에서 찾아봐야) Example은 커녕 Tutorial도 잘 없어서 Reference 찾아보고 공부 하고 내 머리 속에 완전히 집어 넣는 시간이 아주 길었었다.</p>\n<p>예를 들면, CSS를 조금 더 잘 써 보려고 (당시에 가장 정리가 잘 되어 있었던) MSDN을 아주 많이 봤었고, CSS의 많은 것들을 외우고 있었다.</p>\n<p>...</p>\n<p>그런데, 옛날에는 분명 전화 번호 몇개 정도는 외우고 있었던 것 같은데, 요즘은 가장 가까운 사람들의 전화번호조차 기억이 안 나잖아.</p>\n<p>그러니까... 굳이 시시콜콜한 Syntax, Function 이름, Argument 순서 이런거 머리 속에 없어도 괜찮은 것 같다. 아니 오히려 그거 넣어둘 공간에 다른 거 넣어둬야 하는 것 같기도 하다.</p>\n<p>그렇게 불안해 하고, 불만족스러워 할 필요는 없을 것 같다.</p>\n</blockquote>\n<p>사실 요즘에 지구가 황폐화가 되어서 세상에 고급 언어 개발자만 남아버린다면 어떻게 될까 생각한다.</p>\n<p>언제 꺼질지 모르는 컴퓨터로 기술력을 복구해야 하는 것이다. :| :| :|</p>\n<p>OS만 깔려있는 컴퓨터에서 어떻게 코딩을 시작할 것이며,\n구글 없이 무엇을 할 수 있을지..</p>\n<p>다행이도 기본으로 깔려있는 웹 브라우저의 콘솔창에 'Hello, World!'만 찍어보고 껏을 거다.</p>\n<p>어....</p>\n<h2 id=\"프로그래밍\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\" aria-label=\"프로그래밍 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로그래밍</h2>\n<p>절차적 프로그래밍에서 시작하여 C++, 객체지향 언어가 나오더니 프로그래밍 패러다임이 바꼈다.</p>\n<p>그리고 이젠 함수형 프로그래밍이 스물스물 나온다.</p>\n<p>'하드웨어의 한계를 소프트웨어로 메꿔야 해!'</p>\n<p>'상태를 추적하기 쉬운 함수형 프로그래밍!!'</p>\n<p>'lambda'</p>\n<p>'순수 함수'</p>\n<p>사실 OOP도 잘 못하는 입장이지만, 그래도 조금씩 봐 두어야 겠지.</p>\n<p><a href=\"http://www.cnet.co.kr/view/18272\">임백준 - 함수형 프로그래밍이라는 유령</a></p>\n<h1 id=\"코드-리뷰\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C-%EB%A6%AC%EB%B7%B0\" aria-label=\"코드 리뷰 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드 리뷰</h1>\n<h2 id=\"코드-스타일-리뷰는-가장-기본적인-리뷰다\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C-%EC%8A%A4%ED%83%80%EC%9D%BC-%EB%A6%AC%EB%B7%B0%EB%8A%94-%EA%B0%80%EC%9E%A5-%EA%B8%B0%EB%B3%B8%EC%A0%81%EC%9D%B8-%EB%A6%AC%EB%B7%B0%EB%8B%A4\" aria-label=\"코드 스타일 리뷰는 가장 기본적인 리뷰다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드 스타일 리뷰는 가장 기본적인 리뷰다.</h2>\n<p>코드 리뷰를 하다보면, 코드 스타일에 대한 고민을 많이 한다.\n변수 할당 순서라던지, 네이밍 방식이라던지, 정말 사소한 줄바꿈이라던지.\n팀이 미성숙 단계라면 더욱 그렇다. 이런 상황이 지속되면 리뷰어는 고민하게 된다.\n사소한 것까지 리뷰하면 기분이 상하지 않을까.\n너무 비효율적인건 아닌가 고민하면서 코드 리뷰에 대한 부정적인 느낌으로 차게된다.</p>\n<p>그러나 이런 고민은 조금 덜어도 되겠다.</p>\n<p><a href=\"https://youtu.be/JcY35HD77lg?t=828\">2021 공개SW 페스티벌 기조강연 1 \"리눅스 Guru를 만나다.- Greg Kroah-Hartman\" - 14:02</a></p>\n<p>2021 한국 공개SW 페스티벌에 <a href=\"https://en.wikipedia.org/wiki/Greg_Kroah-Hartman\">Greg Kroah-Hartman</a>이 기조강연 했다.\n그는 리눅스 커널 개발자인데, 많은 리눅스 패치에 대한 리뷰 요청을 받는다.</p>\n<blockquote>\n<p>Q. 코드 리뷰어로서 당신이 확이하려 하는 가장 중요한 점은 무엇인가요?</p>\n<p>A. 기본적인 문제가 몇 가지 있는데 올바른 코딩 스타일을 따르느냐 입니다.</p>\n<p>우리의 코딩 스타일이 완벽하거나 훌륭해서는 아닙니다.</p>\n<p>그것은 여러분의 두뇌 때문인데요.</p>\n<p>두뇌는 일치하는 부분들에서 어떤 패턴을 봅니다.</p>\n<p>그래서 모든 코드를 항상 같은 포맷으로 넣으면 포맷이 사라지고\n코드가 의미하는 바를 볼 수 있습니다.</p>\n<p>그래서 그렇게 하는 목적은 여러분이 적합한 코딩 스타일을 갖추는 것입니다.</p>\n<p>우리는 그것을 확인할 수 있는 도구를 가지고 있습니다. (코드를) 보내기  전에 이 툴에 맡기면 모든 작업이 정상적으로 수행될 것입니다.</p>\n<p>(생략)</p>\n<p>그런 다음, 적절한 형식을 따라서 만드세요. 코드에 주석을 엄청나게 잘 붙일 필요는 없다는 것을 명심하세요.</p>\n<p>코드 자체를 이해하기 쉽고 읽기 쉽게 만들면 됩니다.</p>\n</blockquote>\n<p>코드 스타일 규칙을 지켜서 일관적인 코드가 되면, 코드 리뷰어는 중요한 로직에 집중할 수 있게된다.\n코드 스타일은 도구에 맡겨서 자동화 하자. 그래서 PR에는 로직에 집중한 리뷰만 남도록 하자.</p>\n<p>내가 속한 개발팀에서는 코드 규칙이 따로 없었다. 그래서 팀 초기에는 코드 스타일에 대한 리뷰가 많았다.\nIDE가 제공하는 기본적인 formatter가 있었지만, 누구는 사용하고 누구는 그렇지 않았다.\n사용하더라도 기본적으로 관대하게 설정되어 있었다.</p>\n<p>그래서 <a href=\"https://editorconfig.org/\">editorconfig</a>를 도입했다.\n대부분 에디터를 지원한다. 도입하고 나서는 팀이 점점 성숙해지기도 하면서 스타일에 대한 리뷰는 많이 줄었다.</p>"}},"pageContext":{"id":"f80a4ed1-64fa-530e-aadd-aea5124b1f80","fields__slug":"/programming-philosophy/","__params":{"fields__slug":"programming-philosophy"}}},"staticQueryHashes":[],"slicesMap":{}}