{"componentChunkName":"component---src-components-gatsby-templates-wiki-tsx","path":"/wiki/physics/","result":{"data":{"markdownRemark":{"headings":[{"value":"Physics"}],"fields":{"relatedDocs":[{"slug":"javascript","similarity":0.8297914524},{"slug":"web","similarity":0.826473165},{"slug":"2016-08-27-gdg-webtech-workshop-nnn","similarity":0.8192901595},{"slug":"crontab","similarity":0.7517750237},{"slug":"idea-methodology","similarity":0.7808144242},{"slug":"2016-11-16-google-campus-two-things-you-must-keep-in-google-play","similarity":0.8072801517},{"slug":"spring-framework","similarity":0.7581896289},{"slug":"aws","similarity":0.7644360205},{"slug":"git","similarity":0.79200731},{"slug":"algorithm-practice","similarity":0.7873382819},{"slug":"docker","similarity":0.7807160722},{"slug":"scp","similarity":0.7284140376},{"slug":"mac-os","similarity":0.7606571504},{"slug":"testing","similarity":0.774892979},{"slug":"machine-learning","similarity":0.7983689351},{"slug":"devops","similarity":0.7697620092},{"slug":"python","similarity":0.7435414288},{"slug":"object-oriented-programming","similarity":0.7954877932},{"slug":"linux","similarity":0.7664060142},{"slug":"sfml","similarity":0.7699403439},{"slug":"windows","similarity":0.7607732705},{"slug":"markdown","similarity":0.7466556731},{"slug":"cat-logic","similarity":0.790389101},{"slug":"vuejs","similarity":0.7778967701},{"slug":"shell","similarity":0.7767519276},{"slug":"html","similarity":0.7734342308},{"slug":"data-analysis","similarity":0.7825263295},{"slug":"hardware","similarity":0.7563470595},{"slug":"programming-convention","similarity":0.7672390381},{"slug":"webgl","similarity":0.8320657689},{"slug":"sentry","similarity":0.7547471044},{"slug":"valve","similarity":0.7603561923},{"slug":"reactjs","similarity":0.7870050312},{"slug":"airflow","similarity":0.7433064853},{"slug":"computer-graphics","similarity":0.7951812389},{"slug":"programming-philosophy","similarity":0.7867853181},{"slug":"elasticsearch","similarity":0.7771697706},{"slug":"unicode","similarity":0.7820184226},{"slug":"logging","similarity":0.7676226775},{"slug":"tools","similarity":0.7613385447},{"slug":"programming-paradigm","similarity":0.7959634209},{"slug":"inspiration","similarity":0.8008112292},{"slug":"gatsbyjs","similarity":0.7794810872},{"slug":"design-pattern","similarity":0.780142453},{"slug":"game","similarity":0.7788065425},{"slug":"kubernetes","similarity":0.7696878422},{"slug":"nodejs","similarity":0.7946921684},{"slug":"continuous-integration-and-deployment","similarity":0.7732211752},{"slug":"rust","similarity":0.7497391254},{"slug":"book","similarity":0.7968918157},{"slug":"jetbrains","similarity":0.7815255444},{"slug":"quotation","similarity":0.7731219485},{"slug":"jira","similarity":0.7438338533},{"slug":"swagger","similarity":0.7500687746},{"slug":"architecture","similarity":0.8160604954},{"slug":"unity3d","similarity":0.8283377223},{"slug":"jargon","similarity":0.7998428232},{"slug":"language-server-protocol","similarity":0.7625457336},{"slug":"clean-code","similarity":0.7871757159},{"slug":"java","similarity":0.7511533001},{"slug":"windows-subsystem-for-linux","similarity":0.7623923988},{"slug":"test-driven-development","similarity":0.7826236921},{"slug":"github","similarity":0.7565057149},{"slug":"network","similarity":0.7478119971},{"slug":"kotlin","similarity":0.7765906673},{"slug":"c-sharp","similarity":0.7971018103},{"slug":"angularjs","similarity":0.7881350695},{"slug":"vim","similarity":0.7609115934},{"slug":"ionic-framework","similarity":0.7782242946},{"slug":"physics","similarity":1},{"slug":"html-canvas","similarity":0.8068633249},{"slug":"reverse-engineering","similarity":0.7667748625},{"slug":"css","similarity":0.7989398872},{"slug":"code-review","similarity":0.7874875424},{"slug":"software-development","similarity":0.7804702444},{"slug":"database","similarity":0.8025326317},{"slug":"reactive-extensions","similarity":0.727414675},{"slug":"redis","similarity":0.7195141907},{"slug":"mail","similarity":0.7317444352},{"slug":"experience-review","similarity":0.7886332159},{"slug":"google-analytics","similarity":0.7743293033},{"slug":"data-structure","similarity":0.784246946},{"slug":"vimwiki","similarity":0.7544390509}]},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#physics\">Physics</a></p>\n<ul>\n<li>\n<p><a href=\"#2d-%EB%8F%84%ED%98%95-%EC%B6%A9%EB%8F%8C\">2D 도형 충돌</a></p>\n<ul>\n<li><a href=\"#2d-physics-engine-from-scratch-js\">2D Physics Engine from Scratch (JS)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#movement\">Movement</a></p>\n</li>\n</ul>\n</li>\n</ul>","html":"<h1 id=\"physics\" style=\"position:relative;\"><a href=\"#physics\" aria-label=\"physics permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Physics</h1>\n<h2 id=\"2d-도형-충돌\" style=\"position:relative;\"><a href=\"#2d-%EB%8F%84%ED%98%95-%EC%B6%A9%EB%8F%8C\" aria-label=\"2d 도형 충돌 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2D 도형 충돌</h2>\n<p>제대로 알기 전에는 도형을 잘 추상화해서 어떤 형태든 추상 형태로 계산할 수 있을 거라고 생각했다.\n하지만 아래 강의를 보니 아닌 거 같다. 원이면 반지름, 선이면 가까운 지점 등 가지는 요소가 다른만큼 각자 다르게 계산되어야 한다.</p>\n<p><a href=\"../unity3d\">unity3d</a>의 경우 게임 엔진 차원에서 제공하기 때문에 더 자세하게 구현되어 있다.\n[2D Physics Engine from Scratch (JS)](#2D Physics Engine from Scratch (JS))의 구현과 비교해보면 재밌다.</p>\n<h3 id=\"2d-physics-engine-from-scratch-js\" style=\"position:relative;\"><a href=\"#2d-physics-engine-from-scratch-js\" aria-label=\"2d physics engine from scratch js permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2D Physics Engine from Scratch (JS)</h3>\n<p><a href=\"https://www.youtube.com/playlist?list=PLo6lBZn6hgca1T7cNZXpiq4q395ljbEI\">https://www.youtube.com/playlist?list=PLo6lBZn6hgca1T7cNZXpiq4q395ljbEI</a>_</p>\n<p>이 유튜브 재생목록이 step by step으로 잘 설명한다. <a href=\"../javascript\">javascript</a> 및 canvas로 구현한다.\n나는 8번 Collision Response에서 10번 Adding the Walls까지 봤는데, 앞부분이 쉽다면 중간부터 봐도 무방해 보인다.</p>\n<p><a href=\"https://github.com/danielszabo88/mocorgo\">GitHub에 소스코드</a>도 공개되어 있다.</p>\n<p>8번부터만 봐도 핵심요소는 다 포함하는 듯하다.\n속도 velocity, 질량 mass, 탄성 elasticity, 마찰 friction, 가속도 acceleration</p>\n<p>매 프레임마다 다음 순서로 계산한다:</p>\n<ol>\n<li><code>intersection</code> 충돌 여부 확인</li>\n<li><code>penetration depth resolution</code> 겹침 해결</li>\n<li><code>collision resolution</code> 충돌 계산</li>\n</ol>\n<p>1에서 작용하지 않은 것으로 판단하면 2, 3을 진행하지 않는다.\n2에서 다음 프레임까지의 Delta Time 및 속도에 따라 겹치는 정도가 다르다. 팅겨내기 전에 표면으로 돌려보내기 위한 계산이다.\n3에서 물체 충돌 후 반작용을 위한 계산을 한다.</p>\n<h2 id=\"movement\" style=\"position:relative;\"><a href=\"#movement\" aria-label=\"movement permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Movement</h2>\n<p>Unity 기준.</p>\n<p><a href=\"https://forum.unity.com/threads/whats-the-best-way-to-move-to-a-target.224126/\">What's the best way to move to a target?</a></p>\n<p>간단하게 구현하면 다음과 같이 할 수 있다:</p>\n<deckgo-highlight-code language=\"csharp\"  >\n          <code slot=\"code\">transform.position += (target.position - transform.position).normalized * Time.deltaTime;</code>\n        </deckgo-highlight-code>\n<p>normalized로 vector 정규화하면 방향만 남고 크기는 1인 단위 벡터가 된다.\n여기에 deltaTime을 곱해주면 게임 엔진의 프레임을 고려한 속도가 된다.</p>\n<p>이 방법은 두 오브젝트가 서로를 향해 이동할 때 문제가 있다.\n서로를 넘어가는 시점부터 둘 다 같은 방향으로 이동하게 된다.</p>\n<p>부드러운 이동을 위해서는 다음과 같이 할 수 있다:</p>\n<deckgo-highlight-code language=\"csharp\"  >\n          <code slot=\"code\">transform.position = Vector3.Lerp(transform.position, target.position, Time.deltaTime);</code>\n        </deckgo-highlight-code>\n<p>Lerp는 선형보간(Linear Interpolation)으로, 두 지점 사이의 중간 지점을 계산한다.\n마찬가지로 deltaTime을 곱해주므로 프레임을 고려하며, 가속도가 적용되기 때문에 부드러운 이동이 가능하다.</p>\n<p>게임 케릭터를 구현을 위해 위 로직을 사용하면 어색하다.\n가속도가 없고 목표 지점을 넘어가지 않는 <code>MoveTowards</code>를 사용하는 것이 좋다.</p>\n<deckgo-highlight-code language=\"csharp\"  >\n          <code slot=\"code\">transform.position = Vector3.MoveTowards(transform.position, target.position, Time.deltaTime * speed);</code>\n        </deckgo-highlight-code>\n<p>케릭터의 속도 <code>speed</code>를 고려하는 방식이다.</p>\n<p>references:</p>\n<ul>\n<li><a href=\"https://ko.khanacademy.org/computing/computer-programming/programming-natural-simulations/programming-vectors/a/vector-magnitude-normalization\">Khan Academy - 벡터 크기와 정규화</a></li>\n<li><a href=\"https://iygames.tistory.com/6\">Unity 3D Vector의 선형보간 Lerp 정확한 사용법</a></li>\n</ul>"}},"pageContext":{"id":"75206c38-2d38-5221-999d-9f04c3674bd1"}},"staticQueryHashes":[],"slicesMap":{}}