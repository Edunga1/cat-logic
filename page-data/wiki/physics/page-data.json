{"componentChunkName":"component---src-components-gatsby-templates-wiki-tsx","path":"/wiki/physics/","result":{"data":{"file":{"fields":{"gitLogLatestHash":"ee34ec929ca5967011a21066c20f3f1b9f8c7fbe","gitLogLatestDate":"2023-07-22T21:53:32Z"},"childMarkdownRemark":{"headings":[{"value":"Physics"}],"fields":{"slug":"/physics/","relatedDocs":[{"slug":"javascript","similarity":0.3872208333},{"slug":"web","similarity":0.4623044154},{"slug":"2016-08-27-gdg-webtech-workshop-nnn","similarity":0.4841762039},{"slug":"crontab","similarity":0.2813877005},{"slug":"gradle","similarity":0.3730014763},{"slug":"idea-methodology","similarity":0.4462547412},{"slug":"2016-11-16-google-campus-two-things-you-must-keep-in-google-play","similarity":0.4855289089},{"slug":"spring-framework","similarity":0.3732928633},{"slug":"aws","similarity":0.3740391935},{"slug":"git","similarity":0.3697232207},{"slug":"algorithm-practice","similarity":0.4824609021},{"slug":"docker","similarity":0.4023280547},{"slug":"scp","similarity":0.2529186838},{"slug":"mac-os","similarity":0.4449705374},{"slug":"testing","similarity":0.446522074},{"slug":"machine-learning","similarity":0.4307286758},{"slug":"devops","similarity":0.3852215088},{"slug":"python","similarity":0.40844677},{"slug":"object-oriented-programming","similarity":0.518426249},{"slug":"linux","similarity":0.2810208846},{"slug":"sfml","similarity":0.4717852968},{"slug":"windows","similarity":0.4069637709},{"slug":"markdown","similarity":0.3285681736},{"slug":"cat-logic","similarity":0.3772885024},{"slug":"vuejs","similarity":0.3935897409},{"slug":"shell","similarity":0.4018159455},{"slug":"html","similarity":0.3212466085},{"slug":"vimenter-2023","similarity":0.4084523225},{"slug":"data-analysis","similarity":0.4456282366},{"slug":"hardware","similarity":0.3259676786},{"slug":"programming-convention","similarity":0.3848906837},{"slug":"webgl","similarity":0.5507947399},{"slug":"sentry","similarity":0.287997846},{"slug":"valve","similarity":0.2890621187},{"slug":"security","similarity":0.2645718062},{"slug":"reactjs","similarity":0.4575253254},{"slug":"airflow","similarity":0.2975509722},{"slug":"computer-graphics","similarity":0.4444952613},{"slug":"elasticsearch","similarity":0.3721185097},{"slug":"unicode","similarity":0.3929866467},{"slug":"logging","similarity":0.297216282},{"slug":"tools","similarity":0.4118816465},{"slug":"programming-paradigm","similarity":0.5100436017},{"slug":"system-failures","similarity":0.4018671927},{"slug":"amazon-redshift","similarity":0.2168662445},{"slug":"inspiration","similarity":0.4108531552},{"slug":"gatsbyjs","similarity":0.4572607822},{"slug":"design-pattern","similarity":0.4744109566},{"slug":"game","similarity":0.4905942548},{"slug":"kubernetes","similarity":0.3144683874},{"slug":"llm-tools","similarity":0.4446525152},{"slug":"nodejs","similarity":0.4792511765},{"slug":"continuous-integration-and-deployment","similarity":0.2955370435},{"slug":"rust","similarity":0.4660480975},{"slug":"book","similarity":0.4307130027},{"slug":"jetbrains","similarity":0.3991856164},{"slug":"quotation","similarity":0.2976372709},{"slug":"postgresql","similarity":0.2938803401},{"slug":"jira","similarity":0.2883667182},{"slug":"swagger","similarity":0.281967125},{"slug":"architecture","similarity":0.4318816776},{"slug":"unity3d","similarity":0.5321876756},{"slug":"jargon","similarity":0.4667237475},{"slug":"language-server-protocol","similarity":0.2637449844},{"slug":"clean-code","similarity":0.4913218033},{"slug":"java","similarity":0.4450583883},{"slug":"windows-subsystem-for-linux","similarity":0.3949344665},{"slug":"test-driven-development","similarity":0.2882560823},{"slug":"philosophy","similarity":0.4563410287},{"slug":"github","similarity":0.4051841856},{"slug":"network","similarity":0.3630898108},{"slug":"kotlin","similarity":0.4014011142},{"slug":"c-sharp","similarity":0.4996258668},{"slug":"angularjs","similarity":0.4203023963},{"slug":"vim","similarity":0.4026737911},{"slug":"ionic-framework","similarity":0.3433074765},{"slug":"physics","similarity":1},{"slug":"html-canvas","similarity":0.5491733242},{"slug":"reverse-engineering","similarity":0.3693345567},{"slug":"space","similarity":0.3869739231},{"slug":"css","similarity":0.4188093258},{"slug":"code-review","similarity":0.3728753175},{"slug":"software-development","similarity":0.4233027051},{"slug":"database","similarity":0.4227201363},{"slug":"reactive-extensions","similarity":0.3099400422},{"slug":"redis","similarity":0.2661437166},{"slug":"mail","similarity":0.2053831006},{"slug":"experience-review","similarity":0.3234012167},{"slug":"google-analytics","similarity":0.3372792045},{"slug":"data-structure","similarity":0.4170416592},{"slug":"vimwiki","similarity":0.3598784071},{"slug":"embeddings","similarity":0.3720576364},{"slug":"추론 애플리케이션","similarity":0.4245761122}]},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#physics\">Physics</a></p>\n<ul>\n<li>\n<p><a href=\"#2d-%EB%8F%84%ED%98%95-%EC%B6%A9%EB%8F%8C\">2D 도형 충돌</a></p>\n<ul>\n<li><a href=\"#2d-physics-engine-from-scratch-js\">2D Physics Engine from Scratch (JS)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#movement\">Movement</a></p>\n</li>\n</ul>\n</li>\n</ul>","html":"<h1 id=\"physics\" style=\"position:relative;\"><a href=\"#physics\" aria-label=\"physics permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Physics</h1>\n<h2 id=\"2d-도형-충돌\" style=\"position:relative;\"><a href=\"#2d-%EB%8F%84%ED%98%95-%EC%B6%A9%EB%8F%8C\" aria-label=\"2d 도형 충돌 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2D 도형 충돌</h2>\n<p>제대로 알기 전에는 도형을 잘 추상화해서 어떤 형태든 추상 형태로 계산할 수 있을 거라고 생각했다.\n하지만 아래 강의를 보니 아닌 거 같다. 원이면 반지름, 선이면 가까운 지점 등 가지는 요소가 다른만큼 각자 다르게 계산되어야 한다.</p>\n<p><a href=\"../unity3d\">unity3d</a>의 경우 게임 엔진 차원에서 제공하기 때문에 더 자세하게 구현되어 있다.\n[2D Physics Engine from Scratch (JS)](#2D Physics Engine from Scratch (JS))의 구현과 비교해보면 재밌다.</p>\n<h3 id=\"2d-physics-engine-from-scratch-js\" style=\"position:relative;\"><a href=\"#2d-physics-engine-from-scratch-js\" aria-label=\"2d physics engine from scratch js permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2D Physics Engine from Scratch (JS)</h3>\n<p><a href=\"https://www.youtube.com/playlist?list=PLo6lBZn6hgca1T7cNZXpiq4q395ljbEI\">https://www.youtube.com/playlist?list=PLo6lBZn6hgca1T7cNZXpiq4q395ljbEI</a>_</p>\n<p>이 유튜브 재생목록이 step by step으로 잘 설명한다. <a href=\"../javascript\">javascript</a> 및 canvas로 구현한다.\n나는 8번 Collision Response에서 10번 Adding the Walls까지 봤는데, 앞부분이 쉽다면 중간부터 봐도 무방해 보인다.</p>\n<p><a href=\"https://github.com/danielszabo88/mocorgo\">GitHub에 소스코드</a>도 공개되어 있다.</p>\n<p>8번부터만 봐도 핵심요소는 다 포함하는 듯하다.\n속도 velocity, 질량 mass, 탄성 elasticity, 마찰 friction, 가속도 acceleration</p>\n<p>매 프레임마다 다음 순서로 계산한다:</p>\n<ol>\n<li><code class=\"language-text\">intersection</code> 충돌 여부 확인</li>\n<li><code class=\"language-text\">penetration depth resolution</code> 겹침 해결</li>\n<li><code class=\"language-text\">collision resolution</code> 충돌 계산</li>\n</ol>\n<p>1에서 작용하지 않은 것으로 판단하면 2, 3을 진행하지 않는다.\n2에서 다음 프레임까지의 Delta Time 및 속도에 따라 겹치는 정도가 다르다. 팅겨내기 전에 표면으로 돌려보내기 위한 계산이다.\n3에서 물체 충돌 후 반작용을 위한 계산을 한다.</p>\n<h2 id=\"movement\" style=\"position:relative;\"><a href=\"#movement\" aria-label=\"movement permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Movement</h2>\n<p>Unity 기준.</p>\n<p><a href=\"https://forum.unity.com/threads/whats-the-best-way-to-move-to-a-target.224126/\">What's the best way to move to a target?</a></p>\n<p>간단하게 구현하면 다음과 같이 할 수 있다:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">transform<span class=\"token punctuation\">.</span>position <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>position <span class=\"token operator\">-</span> transform<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>normalized <span class=\"token operator\">*</span> Time<span class=\"token punctuation\">.</span>deltaTime<span class=\"token punctuation\">;</span></code></pre></div>\n<p>normalized로 vector 정규화하면 방향만 남고 크기는 1인 단위 벡터가 된다.\n여기에 deltaTime을 곱해주면 게임 엔진의 프레임을 고려한 속도가 된다.</p>\n<p>이 방법은 두 오브젝트가 서로를 향해 이동할 때 문제가 있다.\n서로를 넘어가는 시점부터 둘 다 같은 방향으로 이동하게 된다.</p>\n<p>부드러운 이동을 위해서는 다음과 같이 할 수 있다:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">transform<span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> Vector3<span class=\"token punctuation\">.</span><span class=\"token function\">Lerp</span><span class=\"token punctuation\">(</span>transform<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">,</span> Time<span class=\"token punctuation\">.</span>deltaTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Lerp는 선형보간(Linear Interpolation)으로, 두 지점 사이의 중간 지점을 계산한다.\n마찬가지로 deltaTime을 곱해주므로 프레임을 고려하며, 가속도가 적용되기 때문에 부드러운 이동이 가능하다.</p>\n<p>게임 케릭터를 구현을 위해 위 로직을 사용하면 어색하다.\n가속도가 없고 목표 지점을 넘어가지 않는 <code class=\"language-text\">MoveTowards</code>를 사용하는 것이 좋다.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">transform<span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> Vector3<span class=\"token punctuation\">.</span><span class=\"token function\">MoveTowards</span><span class=\"token punctuation\">(</span>transform<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">,</span> Time<span class=\"token punctuation\">.</span>deltaTime <span class=\"token operator\">*</span> speed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>케릭터의 속도 <code class=\"language-text\">speed</code>를 고려하는 방식이다.</p>\n<p>references:</p>\n<ul>\n<li><a href=\"https://ko.khanacademy.org/computing/computer-programming/programming-natural-simulations/programming-vectors/a/vector-magnitude-normalization\">Khan Academy - 벡터 크기와 정규화</a></li>\n<li><a href=\"https://iygames.tistory.com/6\">Unity 3D Vector의 선형보간 Lerp 정확한 사용법</a></li>\n</ul>"}}},"pageContext":{"id":"354c4f71-2485-5ef6-a7b9-2ab2f5f5609c"}},"staticQueryHashes":[],"slicesMap":{}}