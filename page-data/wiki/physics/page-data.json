{"componentChunkName":"component---src-components-gatsby-templates-wiki-tsx","path":"/wiki/physics/","result":{"data":{"file":{"fields":{"gitLogs":[{"hash":"0126516704c12d2207e2e7116cd3113537c4c41a","date":"2024-07-08T11:42:49Z"},{"hash":"ee34ec929ca5967011a21066c20f3f1b9f8c7fbe","date":"2023-07-22T21:53:32Z"},{"hash":"a0052572d79189d2fb2e789ee7456840f7ff2209","date":"2023-05-18T14:28:06Z"},{"hash":"2a2a07d7891610d7a4dbf26aab3cd63ec16b0a6f","date":"2023-03-04T11:35:58Z"},{"hash":"76114a1b4e178f149559f4ec1c9311af79836200","date":"2023-01-30T15:31:34Z"},{"hash":"e8b5e5e97e4424ec69197ec702460b61e8880cef","date":"2023-01-01T15:11:35Z"},{"hash":"751f2ded39a3c6c4b8f9df5e756e505baa1968d1","date":"2022-12-27T14:19:55Z"},{"hash":"677813775ffa0624768a61ba7df5217d248efd44","date":"2022-12-14T14:15:23Z"}]},"childMarkdownRemark":{"headings":[{"value":"Physics"}],"fields":{"slug":"/physics/","relatedDocs":[]},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#physics\">Physics</a></p>\n<ul>\n<li>\n<p><a href=\"#2d-%EB%8F%84%ED%98%95-%EC%B6%A9%EB%8F%8C\">2D 도형 충돌</a></p>\n<ul>\n<li><a href=\"#2d-physics-engine-from-scratch-js\">2D Physics Engine from Scratch (JS)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#movement\">Movement</a></p>\n</li>\n</ul>\n</li>\n</ul>","html":"<h1 id=\"physics\" style=\"position:relative;\"><a href=\"#physics\" aria-label=\"physics permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Physics</h1>\n<h2 id=\"2d-도형-충돌\" style=\"position:relative;\"><a href=\"#2d-%EB%8F%84%ED%98%95-%EC%B6%A9%EB%8F%8C\" aria-label=\"2d 도형 충돌 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2D 도형 충돌</h2>\n<p>제대로 알기 전에는 도형을 잘 추상화해서 어떤 형태든 추상 형태로 계산할 수 있을 거라고 생각했다.\n하지만 아래 강의를 보니 아닌 거 같다. 원이면 반지름, 선이면 가까운 지점 등 가지는 요소가 다른만큼 각자 다르게 계산되어야 한다.</p>\n<p><a href=\"../unity3d\">unity3d</a>의 경우 게임 엔진 차원에서 제공하기 때문에 더 자세하게 구현되어 있다.\n[2D Physics Engine from Scratch (JS)](#2D Physics Engine from Scratch (JS))의 구현과 비교해보면 재밌다.</p>\n<h3 id=\"2d-physics-engine-from-scratch-js\" style=\"position:relative;\"><a href=\"#2d-physics-engine-from-scratch-js\" aria-label=\"2d physics engine from scratch js permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2D Physics Engine from Scratch (JS)</h3>\n<p><a href=\"https://www.youtube.com/playlist?list=PLo6lBZn6hgca1T7cNZXpiq4q395ljbEI\">https://www.youtube.com/playlist?list=PLo6lBZn6hgca1T7cNZXpiq4q395ljbEI</a>_</p>\n<p>이 유튜브 재생목록이 step by step으로 잘 설명한다. <a href=\"../javascript\">javascript</a> 및 canvas로 구현한다.\n나는 8번 Collision Response에서 10번 Adding the Walls까지 봤는데, 앞부분이 쉽다면 중간부터 봐도 무방해 보인다.</p>\n<p><a href=\"https://github.com/danielszabo88/mocorgo\">GitHub에 소스코드</a>도 공개되어 있다.</p>\n<p>8번부터만 봐도 핵심요소는 다 포함하는 듯하다.\n속도 velocity, 질량 mass, 탄성 elasticity, 마찰 friction, 가속도 acceleration</p>\n<p>매 프레임마다 다음 순서로 계산한다:</p>\n<ol>\n<li><code class=\"language-text\">intersection</code> 충돌 여부 확인</li>\n<li><code class=\"language-text\">penetration depth resolution</code> 겹침 해결</li>\n<li><code class=\"language-text\">collision resolution</code> 충돌 계산</li>\n</ol>\n<p>1에서 작용하지 않은 것으로 판단하면 2, 3을 진행하지 않는다.<br>\n2에서 다음 프레임까지의 Delta Time 및 속도에 따라 겹치는 정도가 다르다. 팅겨내기 전에 표면으로 돌려보내기 위한 계산이다.<br>\n3에서 물체 충돌 후 반작용을 위한 계산을 한다.</p>\n<p><a href=\"https://edunga1.github.io/canvas-collision-simulation/\">다음</a>은 내 구현 결과이다.\n동그라미를 드래그해서 움직이면 다른 동그라미와 충돌한다.</p>\n<iframe src=\"https://edunga1.github.io/canvas-collision-simulation/\" width=\"100%\" height=\"300px\"></iframe>\n<p>동그라미 업데이트 순서가 작은 것 -> 큰 것 순서로 이루어진다.\n이 순서에 의한 문제점이 있다.\n아무 동그라미나 드래그해서 다른 2개의 동그라미를 충돌시키면 항상 작은 동그라미가 밀려난다.\n즉, A를 드래그해서 B -> C 순서로 충돌시키나 C -> B 순서로 충돌시키나 항상 B가 밀려난다.\n업데이트 순서가 반대였으면 항상 C만 밀려났을 것이다.</p>\n<h2 id=\"movement\" style=\"position:relative;\"><a href=\"#movement\" aria-label=\"movement permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Movement</h2>\n<p>Unity 기준.</p>\n<p><a href=\"https://forum.unity.com/threads/whats-the-best-way-to-move-to-a-target.224126/\">What's the best way to move to a target?</a></p>\n<p>간단하게 구현하면 다음과 같이 할 수 있다:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">transform<span class=\"token punctuation\">.</span>position <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>position <span class=\"token operator\">-</span> transform<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>normalized <span class=\"token operator\">*</span> Time<span class=\"token punctuation\">.</span>deltaTime<span class=\"token punctuation\">;</span></code></pre></div>\n<p>normalized로 vector 정규화하면 방향만 남고 크기는 1인 단위 벡터가 된다.\n여기에 deltaTime을 곱해주면 게임 엔진의 프레임을 고려한 속도가 된다.</p>\n<p>이 방법은 두 오브젝트가 서로를 향해 이동할 때 문제가 있다.\n서로를 넘어가는 시점부터 둘 다 같은 방향으로 이동하게 된다.</p>\n<p>부드러운 이동을 위해서는 다음과 같이 할 수 있다:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">transform<span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> Vector3<span class=\"token punctuation\">.</span><span class=\"token function\">Lerp</span><span class=\"token punctuation\">(</span>transform<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">,</span> Time<span class=\"token punctuation\">.</span>deltaTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Lerp는 선형보간(Linear Interpolation)으로, 두 지점 사이의 중간 지점을 계산한다.\n마찬가지로 deltaTime을 곱해주므로 프레임을 고려하며, 가속도가 적용되기 때문에 부드러운 이동이 가능하다.</p>\n<p>게임 케릭터를 구현을 위해 위 로직을 사용하면 어색하다.\n가속도가 없고 목표 지점을 넘어가지 않는 <code class=\"language-text\">MoveTowards</code>를 사용하는 것이 좋다.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">transform<span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> Vector3<span class=\"token punctuation\">.</span><span class=\"token function\">MoveTowards</span><span class=\"token punctuation\">(</span>transform<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">,</span> Time<span class=\"token punctuation\">.</span>deltaTime <span class=\"token operator\">*</span> speed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>케릭터의 속도 <code class=\"language-text\">speed</code>를 고려하는 방식이다.</p>\n<p>references:</p>\n<ul>\n<li><a href=\"https://ko.khanacademy.org/computing/computer-programming/programming-natural-simulations/programming-vectors/a/vector-magnitude-normalization\">Khan Academy - 벡터 크기와 정규화</a></li>\n<li><a href=\"https://iygames.tistory.com/6\">Unity 3D Vector의 선형보간 Lerp 정확한 사용법</a></li>\n</ul>"}},"site":{"siteMetadata":{"gitHubRepositoryUrl":"https://github.com/edunga1/cat-logic"}}},"pageContext":{"id":"354c4f71-2485-5ef6-a7b9-2ab2f5f5609c"}},"staticQueryHashes":[],"slicesMap":{}}