{"componentChunkName":"component---src-pages-wiki-markdown-remark-fields-slug-tsx","path":"/wiki/java/","result":{"data":{"markdownRemark":{"tableOfContents":"<ul>\n<li>\n<p><a href=\"#java\">Java</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B0%9C%EB%85%90\">개념</a></p>\n<ul>\n<li><a href=\"#servlet-container-web-container\">Servlet Container (Web Container)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#jakarta-ee-aka-java-ee\">Jakarta EE (a.k.a. Java EE)</a></p>\n<ul>\n<li>\n<p><a href=\"#%ED%8F%AC%ED%95%A8%ED%95%98%EB%8A%94-%EA%B8%B0%EC%88%A0\">포함하는 기술</a></p>\n<ul>\n<li>\n<p><a href=\"#http\">HTTP</a></p>\n</li>\n<li>\n<p><a href=\"#jndi-java-naming-and-directory-interface\">JNDI (Java Naming and Directory Interface)</a></p>\n</li>\n<li>\n<p><a href=\"#jta-java-transaction-api\">JTA (Java Transaction API)</a></p>\n</li>\n<li>\n<p><a href=\"#jakarta-persistence-api-jpa-java-persistence-api\">Jakarta Persistence API (JPA, Java Persistence API)</a></p>\n<ul>\n<li>\n<p><a href=\"#jpa-repository\">JPA Repository</a></p>\n<ul>\n<li>\n<p><a href=\"#query-methods\">Query Methods</a></p>\n</li>\n<li>\n<p><a href=\"#query\">@Query</a></p>\n</li>\n<li>\n<p><a href=\"#query-by-example-qbe\">Query By Example (QBE)</a></p>\n</li>\n<li>\n<p><a href=\"#querydsl\">QueryDSL</a></p>\n<ul>\n<li><a href=\"#querydsl-sql\">querydsl-sql</a></li>\n<li><a href=\"#infobip-spring-data-querydsl\">infobip-spring-data-querydsl</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#jpa-%EA%B8%B0%EB%B3%B8-%EB%A9%94%EC%84%9C%EB%93%9C%EB%8A%94-%EB%8B%A4%EB%A5%B8-method%EC%9D%98-%EC%9C%84%EC%9E%84-%EC%9A%A9%EC%9C%BC%EB%A1%9C%EB%A7%8C-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC-%ED%95%9C%EB%8B%A4\">JPA 기본 메서드는 다른 method의 위임 용으로만 사용해야 한다.</a></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%A4%91%EC%B2%A9-%ED%81%B4%EB%9E%98%EC%8A%A4nested-classes\">중첩 클래스(Nested Classes)</a></p>\n</li>\n<li>\n<p><a href=\"#reference\">Reference</a></p>\n</li>\n</ul>","html":"<h1 id=\"java\" style=\"position:relative;\"><a href=\"#java\" aria-label=\"java permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Java</h1>\n<h1 id=\"개념\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EB%85%90\" aria-label=\"개념 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개념</h1>\n<h2 id=\"servlet-container-web-container\" style=\"position:relative;\"><a href=\"#servlet-container-web-container\" aria-label=\"servlet container web container permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Servlet Container (Web Container)</h2>\n<p><a href=\"https://en.wikipedia.org/wiki/Web_container\">https://en.wikipedia.org/wiki/Web_container</a></p>\n<blockquote>\n<p>A web container (also known as a servlet container;[1] and compare \"webcontainer\"[2]) is the component of a web server that interacts with Jakarta Servlets.</p>\n</blockquote>\n<p>웹 컨테이너는 웹 서버의 컴포넌트로, Servlet을 실행하는 역할을 한다. 서블릿 컨테이너라고도 한다.</p>\n<p>톰캣 서버도 Servlet Container이다.</p>\n<p>Spring Boot에서 제공하는 <code>TomcatServletWebServerFactory</code>를 사용하면 쉽게 컨테이너를 만들고, 시작할 수 있다.</p>\n<pre><code class=\"language-java\">public class Application {\n  public static void main(String[] args} {\n    ServletWebServerFactory factory = new TomcatServletWebServerFactory();\n    WebServer server = factory.getWebServer();\n    server.start();\n  }\n}\n</code></pre>\n<p>ref. <a href=\"https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/web/embedded/tomcat/TomcatServletWebServerFactory.html\">TomcatServletWebServerFactory</a>\nref. <a href=\"https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/web/server/WebServer.html\">WebServer</a></p>\n<h1 id=\"jakarta-ee-aka-java-ee\" style=\"position:relative;\"><a href=\"#jakarta-ee-aka-java-ee\" aria-label=\"jakarta ee aka java ee permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Jakarta EE (a.k.a. Java EE)</h1>\n<p><a href=\"https://www.samsungsds.com/kr/insights/java_jakarta.html\">https://www.samsungsds.com/kr/insights/java_jakarta.html</a></p>\n<p>EE는 Enterprise Edition의 줄임말이다.</p>\n<p>명칭을 Java EE -> Jakarta EE 명칭을 변경하면서, 오픈소스로 전환했다.</p>\n<p>기업(enterise)용 애플리케이션을 개발 및 실행하기 위한 기술과 환경을 제공한다.</p>\n<h2 id=\"포함하는-기술\" style=\"position:relative;\"><a href=\"#%ED%8F%AC%ED%95%A8%ED%95%98%EB%8A%94-%EA%B8%B0%EC%88%A0\" aria-label=\"포함하는 기술 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>포함하는 기술</h2>\n<p><a href=\"https://jakarta.ee/specifications/platform/8/platform-spec-8.html#a84\">https://jakarta.ee/specifications/platform/8/platform-spec-8.html#a84</a></p>\n<h3 id=\"http\" style=\"position:relative;\"><a href=\"#http\" aria-label=\"http permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTP</h3>\n<p>클라이언트 사이드 API를 <code>java.net</code>으로 제공한다. 서버 사이드는 Jakarta Servlet, Jakarta Server Pages,Jakarta Server Faces 등에서 제공한다.</p>\n<p>ref. <a href=\"https://reflectoring.io/comparison-of-java-http-clients/\">https://reflectoring.io/comparison-of-java-http-clients/</a></p>\n<pre><code>HttpClient client = HttpClient.newBuilder()\n  .version(Version.HTTP_2)\n  .followRedirects(Redirect.NORMAL)\n  .build();\n\nHttpRequest request = HttpRequest.newBuilder()\n .uri(new URI(URLConstants.URL))\n .GET()\n .header(URLConstants.API_KEY_NAME, URLConstants.API_KEY_VALUE)\n .timeout(Duration.ofSeconds(10))\n .build();\n\n\nclient.sendAsync(request, BodyHandlers.ofString())\n  .thenApply(HttpResponse::body)\n  .thenAccept(System.out::println)\n  .join();java\n</code></pre>\n<h3 id=\"jndi-java-naming-and-directory-interface\" style=\"position:relative;\"><a href=\"#jndi-java-naming-and-directory-interface\" aria-label=\"jndi java naming and directory interface permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JNDI (Java Naming and Directory Interface)</h3>\n<blockquote>\n<p>JNDI는 디렉터리 서비스에서 제공하는 데이터 및 객체를 발견하고 참고하기 위한 자바 API다.</p>\n</blockquote>\n<pre><code class=\"language-java\">ds = new DriverManagerDataSource(\"jdbc:h2:mem:mydb\");\n</code></pre>\n<h3 id=\"jta-java-transaction-api\" style=\"position:relative;\"><a href=\"#jta-java-transaction-api\" aria-label=\"jta java transaction api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JTA (Java Transaction API)</h3>\n<p><code>javax.transaction</code> 패키지로 제공한다.</p>\n<p><a href=\"https://www.baeldung.com/spring-vs-jta-transactional\">Transactional Annotations: Spring vs. JTA</a>\n스프링이 제공하는 <code>org.springframework.transaction.annotation.Transactional</code>. JTA가 제공하는 <code>javax.transaction.Transactional</code>. 두 개를 비교하는 글.</p>\n<p>Spring Framework 4.0부터 JTA 1.2를 지원해서 Spring에서 JTA Transactional을 사용할 수 있다고 한다.</p>\n<h3 id=\"jakarta-persistence-api-jpa-java-persistence-api\" style=\"position:relative;\"><a href=\"#jakarta-persistence-api-jpa-java-persistence-api\" aria-label=\"jakarta persistence api jpa java persistence api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Jakarta Persistence API (JPA, Java Persistence API)</h3>\n<h4 id=\"jpa-repository\" style=\"position:relative;\"><a href=\"#jpa-repository\" aria-label=\"jpa repository permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JPA Repository</h4>\n<p>JPA를 이용해서 어떤 방법으로 데이터를 가져오는지 알아본다.</p>\n<p>쿼리를 실행하는데 @Query, <strong>Query Method</strong>. 크게 두 가지 방법을 사용하는 거 같다.</p>\n<h5 id=\"query-methods\" style=\"position:relative;\"><a href=\"#query-methods\" aria-label=\"query methods permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Query Methods</h5>\n<p><a href=\"https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#repositories.query-methods\">https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#repositories.query-methods</a></p>\n<pre><code class=\"language-kotlin\">@Repository\ninterface FooRepository: JpaRepository&#x3C;Foo, Int> {\n  fun findAll(): List&#x3C;Foo>\n}\n</code></pre>\n<p>메서드 이름이 쿼리를 대신한다. <code>type</code>이라는 컬럼으로 조건을 걸고 싶으면\n<code>fun findAllByType(type: String)</code> 형태가 된다.</p>\n<h5 id=\"query\" style=\"position:relative;\"><a href=\"#query\" aria-label=\"query permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@Query</h5>\n<p><a href=\"https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods.at-query\">https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods.at-query</a></p>\n<pre><code class=\"language-sql\">SELECT\n  f\nFROM Foo f\nWHERE\n  type = :type\n</code></pre>\n<p>SQL과 비슷해 보이지만, JPQL라는 이름을 사용한다. 메서드 이름은 직접 정해줄 수 있다.\n<code>:type</code>이 인자를 의미한다.  항상 alias를 사용해야 하고, <code>SELECT *</code> 를 Alias 이름으로 대체한다.</p>\n<p>Query Method 마찬가지지만, 컬럼 정보는 Entity를 참조한다.</p>\n<p>인자로 <code>nativeQuery = true</code>를 넘겨주면 JPQL 대신 SQL을 사용할 수 있다.</p>\n<h5 id=\"query-by-example-qbe\" style=\"position:relative;\"><a href=\"#query-by-example-qbe\" aria-label=\"query by example qbe permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Query By Example (QBE)</h5>\n<p><a href=\"https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#query-by-example\">https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#query-by-example</a></p>\n<pre><code class=\"language-java\">// 검색 할 데이터 준비\nPerson person = new Person();                         \nperson.setFirstname(\"Dave\");                          \n\n// 쿼리\npersonRepository.findAll(Example.of(person));\n</code></pre>\n<p>사용해보진 않았다. Entity 인스턴스가 쿼리 용도로 사용한다. 복잡한 쿼리의 경우 가독성이 떨어진다.</p>\n<h5 id=\"querydsl\" style=\"position:relative;\"><a href=\"#querydsl\" aria-label=\"querydsl permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>QueryDSL</h5>\n<p><a href=\"http://www.querydsl.com/static/querydsl/4.1.3/reference/html_single/#d0e321\">http://www.querydsl.com/static/querydsl/4.1.3/reference/html_single/#d0e321</a></p>\n<pre><code class=\"language-java\">QCustomer customer = QCustomer.customer;\nCustomer bob = queryFactory.selectFrom(customer)\n  .where(customer.firstName.eq(\"Bob\"))\n  .fetchOne();\n</code></pre>\n<p>Query Methods, JPQL, QBE는 JPA 내장되어 있지만 QueryDSL은 그렇지 않다.</p>\n<p>사용 방법은 python의 <a href=\"https://www.sqlalchemy.org/\">sqlalchemy</a>나 node의 <a href=\"http://knexjs.org/\">knexjs</a>와 비슷하다.\n다른 ORM이나 Query Builder도 사용 방법은 비슷하지 않을까.</p>\n<p>knexjs:</p>\n<pre><code class=\"language-javascript\">knex('users').where({ first_name: 'Test', last_name:  'User' }).select('id')\n</code></pre>\n<p>sqlalcehmy:</p>\n<pre><code class=\"language-python\">session.query(User).filter(User.name == 'Edwardo').all()\n</code></pre>\n<p>sqlalchemy의 경우 python의 연산자 오버로딩을 힘입어 높은 가독성을 가진다.\nnumpy와 같은 <a href=\"/cat-logic/7cfb1763bbdb17583bd2f0eb2d0fce61/python.md\">python</a> 라이브러리도 같은 이유에서 사용하기 편리한 인터페이스를 가졌다.</p>\n<h6 id=\"querydsl-sql\" style=\"position:relative;\"><a href=\"#querydsl-sql\" aria-label=\"querydsl sql permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>querydsl-sql</h6>\n<p><a href=\"http://querydsl.com/static/querydsl/latest/reference/html/ch02s03.html\">http://querydsl.com/static/querydsl/latest/reference/html/ch02s03.html</a></p>\n<p>native query의 대안. Union 등 제공하지 않는 쿼리는 이 솔루션의 사용을 고려할 수 있다.\n다만 JPA를 사용하지 않아서 좀 불편하다.</p>\n<p><a href=\"https://youtu.be/zMAX7g6rO_Y?t=1169\">https://youtu.be/zMAX7g6rO_Y?t=1169</a></p>\n<p>영상에서도 설명하는데, 실제로도 해보면 사용하기 매우 번거롭다.\nlocal db로부터 q-class를 생성해야 한다. 이 것 때문에 배포 전략을 다시 변경해야 할 수도 있다.\nquerydsl-jpa가 entity로부터 생성한 q-class를 함께 사용할 수 없다.</p>\n<h6 id=\"infobip-spring-data-querydsl\" style=\"position:relative;\"><a href=\"#infobip-spring-data-querydsl\" aria-label=\"infobip spring data querydsl permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>infobip-spring-data-querydsl</h6>\n<p><a href=\"https://github.com/infobip/infobip-spring-data-querydsl\">https://github.com/infobip/infobip-spring-data-querydsl</a></p>\n<p>또다른 native query의 대안. Union 쿼리 등 동작하는 것을 확인했다.</p>\n<h4 id=\"jpa-기본-메서드는-다른-method의-위임-용으로만-사용해야-한다\" style=\"position:relative;\"><a href=\"#jpa-%EA%B8%B0%EB%B3%B8-%EB%A9%94%EC%84%9C%EB%93%9C%EB%8A%94-%EB%8B%A4%EB%A5%B8-method%EC%9D%98-%EC%9C%84%EC%9E%84-%EC%9A%A9%EC%9C%BC%EB%A1%9C%EB%A7%8C-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC-%ED%95%9C%EB%8B%A4\" aria-label=\"jpa 기본 메서드는 다른 method의 위임 용으로만 사용해야 한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JPA 기본 메서드는 다른 method의 위임 용으로만 사용해야 한다.</h4>\n<p><a href=\"https://github.com/infobip/infobip-spring-data-querydsl\">https://github.com/infobip/infobip-spring-data-querydsl</a></p>\n<blockquote>\n<p>In production code persistence layer (SQL) shouldn't leak to service layer. See <a href=\"https://stackoverflow.com/a/26563841/607767\">this answer</a> by Oliver Drotbohm (Spring Data Project Lead @ Pivotal) on how to approach encapsulating persistence logic.</p>\n</blockquote>\n<p>persistence layer (SQL) 코드가 서비스에 노출되지 말아야 한다고 한다. Spring Data Project Lead 개발자가 stackoverflow에서 답변함.</p>\n<p>Stackoverflow Post: <a href=\"https://stackoverflow.com/questions/26543612/should-i-use-java-8-default-methods-for-manually-implemented-spring-data-reposit/26563841#26563841\">https://stackoverflow.com/questions/26543612/should-i-use-java-8-default-methods-for-manually-implemented-spring-data-reposit/26563841#26563841</a></p>\n<blockquote>\n<p>Default methods should only be used to delegate calls to other repository methods. Default methods - by definition - cannot access any state of an instance (as an interface has none). They only can delegate to other interface methods or call static ones of other classes.</p>\n</blockquote>\n<p><em>다른 메서드의 위임 용도로만 기본 메서드를 사용해야 합니다.</em></p>\n<h1 id=\"중첩-클래스nested-classes\" style=\"position:relative;\"><a href=\"#%EC%A4%91%EC%B2%A9-%ED%81%B4%EB%9E%98%EC%8A%A4nested-classes\" aria-label=\"중첩 클래스nested classes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>중첩 클래스(Nested Classes)</h1>\n<blockquote>\n<p>Terminology: Nested classes are divided into two categories: non-static and static. Non-static nested classes are called inner classes. Nested classes that are declared static are called static nested classes.</p>\n</blockquote>\n<p>중첩 클래스에는 두 가지 종류가 있다. static이 아닌 중첩 클래스는 <strong>inner class</strong>, static으로 선언된 중첩 클래스는 <strong>static nested class</strong>.<br>\n따라서 static이면서 inner class는 없다.</p>\n<h1 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h1>\n<p><a href=\"https://docs.oracle.com/javase/tutorial/java/javaOO/nested.html\">https://docs.oracle.com/javase/tutorial/java/javaOO/nested.html</a></p>"}},"pageContext":{"id":"10111d3c-c32f-53d9-b7dd-b614a7171853","fields__slug":"/java/","__params":{"fields__slug":"java"}}},"staticQueryHashes":[],"slicesMap":{}}