{"componentChunkName":"component---src-pages-wiki-markdown-remark-id-tsx","path":"/wiki/623b17b4-5278-5969-8b27-1f7cb204a495/","result":{"data":{"markdownRemark":{"id":"623b17b4-5278-5969-8b27-1f7cb204a495","tableOfContents":"<ul>\n<li>\n<p><a href=\"#spring-framework\">Spring framework</a></p>\n</li>\n<li>\n<p><a href=\"#webclient-%EC%B2%AB-%EC%9A%94%EC%B2%AD%EC%9D%B4-%EB%8A%90%EB%A6%B0-%EB%AC%B8%EC%A0%9C\">WebClient 첫 요청이 느린 문제</a></p>\n</li>\n<li>\n<p><a href=\"#requestmapping-request-mapping-narrowing\"><code>RequestMapping</code> Request mapping narrowing</a></p>\n<ul>\n<li>\n<p><a href=\"#parameters\">parameters</a></p>\n<ul>\n<li><a href=\"#value-alias-of-path\"><code>value</code> (alias of <code>path</code>)</a></li>\n<li><a href=\"#params\"><code>params</code></a></li>\n<li><a href=\"#headers\"><code>headers</code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","html":"<h1>Spring framework</h1>\n<h1>WebClient 첫 요청이 느린 문제</h1>\n<p>상황: 서버 시작 직후 다른 서버의 API를 호출하는 내 API가 느려서 클라이언트에서 타임아웃이 자주 발생함.<br>\n해결: netty http client의 <code>warmup</code> + 사용자 진입 전 미리 타겟 서버 API 호출</p>\n<p><a href=\"https://projectreactor.io/docs/netty/release/reference/index.html#_eager_initialization_4\">https://projectreactor.io/docs/netty/release/reference/index.html#_eager_initialization_4</a></p>\n<ol>\n<li>warmup으로 event loop pool을 준비시키고</li>\n<li>서버 시작 시 임의로 호출하여 모든 사용자 요청은 첫 요청 이후가 되도록 한다.</li>\n</ol>\n<p>2의 임의 호출은 해당 서버의 health check가 되는 API로 했다.</p>\n<p>문서에서 설명하는 첫 요청에서 시간을 소요하는 요소는 다음과 같다:</p>\n<ol>\n<li>event loop group</li>\n<li>host name resolver</li>\n<li>내장된 transport 라이브러리들</li>\n<li>보안과 관련된 라이브러리들</li>\n</ol>\n<h1><code>RequestMapping</code> Request mapping narrowing</h1>\n<p><a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/RequestMapping.html\">RequestMapping - Spring API</a></p>\n<p><code>@RequestMapping</code>는 Controller의 매핑 범위를 줄이는 파라미터를 제공한다.</p>\n<p><code>@GetMapping</code> <code>@PostMapping</code> 사용하여 우선 method로 선택 범위를 좁힐 수 있다.</p>\n<h2>parameters</h2>\n<h3><code>value</code> (alias of <code>path</code>)</h3>\n<p>가장 기본적인 인자로, url path를 매핑한다. 기본 값은 빈 문자열이므로 <code>/</code> 와 같다.</p>\n<h3><code>params</code></h3>\n<p>query-string 매핑.</p>\n<ul>\n<li><code>myParam=myValue</code> 특정 값인 경우만 매핑한다.</li>\n<li><code>myParam!=myValue</code> 위의 반대. 특정 값이 아닌 경우만 매핑한다.</li>\n<li><code>!myParam</code> <code>myParam</code> 파라미터 자체가 제공된 경우만 매핑한다.</li>\n</ul>\n<h3><code>headers</code></h3>\n<p>header 매핑.</p>\n<p><code>@RequestMapping(value = \"/something\", headers = \"content-type=text/*\")</code></p>\n<p>wildcard를 사용한 경우 <code>text/plain</code> <code>text/html</code> 모두 매핑한다.</p>"}},"pageContext":{"id":"623b17b4-5278-5969-8b27-1f7cb204a495","__params":{"id":"623b17b4-5278-5969-8b27-1f7cb204a495"}}},"staticQueryHashes":[],"slicesMap":{}}