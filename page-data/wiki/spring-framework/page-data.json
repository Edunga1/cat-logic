{"componentChunkName":"component---src-components-gatsby-templates-wiki-tsx","path":"/wiki/spring-framework/","result":{"data":{"markdownRemark":{"headings":[{"value":"Spring framework"}],"fields":{"slug":"/spring-framework/","relatedDocs":[{"slug":"reverse-engineering","similarity":0.7667067563},{"slug":"design-pattern","similarity":0.8265243207},{"slug":"kubernetes","similarity":0.8008992975},{"slug":"markdown","similarity":0.788741287},{"slug":"kotlin","similarity":0.8542761654},{"slug":"jira","similarity":0.7995208628},{"slug":"book","similarity":0.7969076314},{"slug":"vim","similarity":0.7899765741},{"slug":"hardware","similarity":0.7665493195},{"slug":"network","similarity":0.7871594318},{"slug":"architecture","similarity":0.878585425},{"slug":"python","similarity":0.7939793907},{"slug":"physics","similarity":0.7632057625},{"slug":"experience-review","similarity":0.7935451218},{"slug":"2016-08-27-gdg-webtech-workshop-nnn","similarity":0.8160573332},{"slug":"css","similarity":0.776310586},{"slug":"redis","similarity":0.7546185727},{"slug":"embeddings","similarity":0.7855080334},{"slug":"clean-code","similarity":0.783113136},{"slug":"scp","similarity":0.737122209},{"slug":"vimwiki","similarity":0.7864097229},{"slug":"cat-logic","similarity":0.7915455807},{"slug":"rust","similarity":0.7694269328},{"slug":"github","similarity":0.7966826885},{"slug":"2016-11-16-google-campus-two-things-you-must-keep-in-google-play","similarity":0.8185131364},{"slug":"jargon","similarity":0.8152013512},{"slug":"windows","similarity":0.7759313594},{"slug":"test-driven-development","similarity":0.8106629908},{"slug":"javascript","similarity":0.8100307827},{"slug":"c-sharp","similarity":0.7658040733},{"slug":"linux","similarity":0.8258432441},{"slug":"testing","similarity":0.8537708488},{"slug":"valve","similarity":0.7611408227},{"slug":"sentry","similarity":0.8099924584},{"slug":"continuous-integration-and-deployment","similarity":0.8137208908},{"slug":"object-oriented-programming","similarity":0.8092630045},{"slug":"angularjs","similarity":0.8343464936},{"slug":"webgl","similarity":0.7590931528},{"slug":"google-analytics","similarity":0.7699296408},{"slug":"quotation","similarity":0.7719832528},{"slug":"airflow","similarity":0.7776719227},{"slug":"reactjs","similarity":0.8122942413},{"slug":"unicode","similarity":0.7531722081},{"slug":"mac-os","similarity":0.7982997622},{"slug":"sfml","similarity":0.7707031452},{"slug":"inspiration","similarity":0.79000478},{"slug":"spring-framework","similarity":1},{"slug":"data-structure","similarity":0.7879711264},{"slug":"java","similarity":0.8688328718},{"slug":"logging","similarity":0.7919110128},{"slug":"swagger","similarity":0.8443268645},{"slug":"vimenter-2023","similarity":0.7916589458},{"slug":"reactive-extensions","similarity":0.7725615781},{"slug":"windows-subsystem-for-linux","similarity":0.7761983086},{"slug":"mail","similarity":0.7864152003},{"slug":"unity3d","similarity":0.8013134683},{"slug":"web","similarity":0.8212206979},{"slug":"code-review","similarity":0.8051719742},{"slug":"git","similarity":0.8049809438},{"slug":"language-server-protocol","similarity":0.7678670006},{"slug":"algorithm-practice","similarity":0.7065479726},{"slug":"programming-paradigm","similarity":0.8036166244},{"slug":"elasticsearch","similarity":0.8307011317},{"slug":"idea-methodology","similarity":0.7714011453},{"slug":"software-development","similarity":0.848019221},{"slug":"docker","similarity":0.7889124982},{"slug":"aws","similarity":0.8159550824},{"slug":"programming-convention","similarity":0.8044602436},{"slug":"devops","similarity":0.7961648446},{"slug":"html-canvas","similarity":0.7418065658},{"slug":"programming-philosophy","similarity":0.7854939444},{"slug":"jetbrains","similarity":0.8478283651},{"slug":"ionic-framework","similarity":0.7842560505},{"slug":"data-analysis","similarity":0.7685435586},{"slug":"game","similarity":0.7964875134},{"slug":"machine-learning","similarity":0.7997433051},{"slug":"nodejs","similarity":0.8125528047},{"slug":"shell","similarity":0.8081424828},{"slug":"gatsbyjs","similarity":0.8251359348},{"slug":"html","similarity":0.7836842587},{"slug":"computer-graphics","similarity":0.7405835542},{"slug":"vuejs","similarity":0.7734532583},{"slug":"tools","similarity":0.8116479099},{"slug":"crontab","similarity":0.7754515627},{"slug":"database","similarity":0.8237178303},{"slug":"추론 애플리케이션","similarity":0.7897405901}]},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#spring-framework\">Spring framework</a></p>\n<ul>\n<li>\n<p><a href=\"#features\">Features</a></p>\n<ul>\n<li>\n<p><a href=\"#requestmapping-request-mapping-narrowing\"><code class=\"language-text\">RequestMapping</code> Request mapping narrowing</a></p>\n<ul>\n<li>\n<p><a href=\"#parameters\">parameters</a></p>\n<ul>\n<li><a href=\"#value-alias-of-path\"><code class=\"language-text\">value</code> (alias of <code class=\"language-text\">path</code>)</a></li>\n<li><a href=\"#params\"><code class=\"language-text\">params</code></a></li>\n<li><a href=\"#headers\"><code class=\"language-text\">headers</code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#test\">Test</a></p>\n<ul>\n<li><a href=\"#transactional-test\">Transactional Test</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#application-properties\">Application Properties</a></p>\n</li>\n<li>\n<p><a href=\"#uri-links\">URI Links</a></p>\n</li>\n<li>\n<p><a href=\"#actuator\">Actuator</a></p>\n<ul>\n<li><a href=\"#httptracehttpexchanges\">httptrace(httpexchanges)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#spring-cli\">Spring CLI</a></p>\n<ul>\n<li><a href=\"#%EB%B9%A0%EB%A5%B8-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%83%9D%EC%84%B1\">빠른 프로젝트 생성</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#caching\">Caching</a></p>\n<ul>\n<li><a href=\"#caffeine\">Caffeine</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#troubleshooting\">Troubleshooting</a></p>\n<ul>\n<li><a href=\"#intellij%EC%97%90%EC%84%9C-properties%EC%9D%98-%EC%84%A0%EC%96%B8%EB%B6%80%EB%A5%BC-%EC%B0%BE%EC%9D%84-%EC%88%98-%EC%97%86%EB%8A%94-%EA%B2%BD%EC%9A%B0\">IntelliJ에서 Properties의 선언부를 찾을 수 없는 경우</a></li>\n<li><a href=\"#webclient-%EC%B2%AB-%EC%9A%94%EC%B2%AD%EC%9D%B4-%EB%8A%90%EB%A6%B0-%EB%AC%B8%EC%A0%9C\">WebClient 첫 요청이 느린 문제</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","html":"<h1 id=\"spring-framework\" style=\"position:relative;\"><a href=\"#spring-framework\" aria-label=\"spring framework permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Spring framework</h1>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/index.html\">Spring Boot Reference Documentation</a></p>\n<h2 id=\"features\" style=\"position:relative;\"><a href=\"#features\" aria-label=\"features permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Features</h2>\n<h3 id=\"requestmapping-request-mapping-narrowing\" style=\"position:relative;\"><a href=\"#requestmapping-request-mapping-narrowing\" aria-label=\"requestmapping request mapping narrowing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">RequestMapping</code> Request mapping narrowing</h3>\n<p><a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/RequestMapping.html\">RequestMapping - Spring API</a></p>\n<p><code class=\"language-text\">@RequestMapping</code>는 Controller의 매핑 범위를 줄이는 파라미터를 제공한다.</p>\n<p><code class=\"language-text\">@GetMapping</code> <code class=\"language-text\">@PostMapping</code> 사용하여 우선 method로 선택 범위를 좁힐 수 있다.</p>\n<h4 id=\"parameters\" style=\"position:relative;\"><a href=\"#parameters\" aria-label=\"parameters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>parameters</h4>\n<h5 id=\"value-alias-of-path\" style=\"position:relative;\"><a href=\"#value-alias-of-path\" aria-label=\"value alias of path permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">value</code> (alias of <code class=\"language-text\">path</code>)</h5>\n<p>가장 기본적인 인자로, url path를 매핑한다. 기본 값은 빈 문자열이므로 <code class=\"language-text\">/</code> 와 같다.</p>\n<h5 id=\"params\" style=\"position:relative;\"><a href=\"#params\" aria-label=\"params permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">params</code></h5>\n<p>query-string 매핑.</p>\n<ul>\n<li><code class=\"language-text\">myParam=myValue</code> 특정 값인 경우만 매핑한다.</li>\n<li><code class=\"language-text\">myParam!=myValue</code> 위의 반대. 특정 값이 아닌 경우만 매핑한다.</li>\n<li><code class=\"language-text\">!myParam</code> <code class=\"language-text\">myParam</code> 파라미터 자체가 제공된 경우만 매핑한다.</li>\n</ul>\n<h5 id=\"headers\" style=\"position:relative;\"><a href=\"#headers\" aria-label=\"headers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">headers</code></h5>\n<p>header 매핑.</p>\n<p><code class=\"language-text\">@RequestMapping(value = \"/something\", headers = \"content-type=text/*\")</code></p>\n<p>wildcard를 사용한 경우 <code class=\"language-text\">text/plain</code> <code class=\"language-text\">text/html</code> 모두 매핑한다.</p>\n<h3 id=\"test\" style=\"position:relative;\"><a href=\"#test\" aria-label=\"test permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Test</h3>\n<h4 id=\"transactional-test\" style=\"position:relative;\"><a href=\"#transactional-test\" aria-label=\"transactional test permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Transactional Test</h4>\n<p>통합 테스트에서 teardown 시점에 트랜잭션을 롤백하는 방법은 편리해서 자주 사용하는 방법이다.</p>\n<p>SpringBootTest에서는 <code class=\"language-text\">@Transactional</code>을 사용하여 테스트 후에 롤백할 수 있다:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Import</span><span class=\"token punctuation\">(</span>TestClientConfig<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation builtin\">@ExtendWith</span><span class=\"token punctuation\">(</span>SpringExtension<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation builtin\">@AutoConfigureWebTestClient</span>\n<span class=\"token annotation builtin\">@SpringBootTest</span>\n<span class=\"token annotation builtin\">@Transactional</span>\n<span class=\"token keyword\">class</span> UserAddressTest <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation builtin\">@Autowired</span>\n  <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> userAddressRepository<span class=\"token operator\">:</span> UserAddressRepository\n\n  <span class=\"token annotation builtin\">@BeforeEach</span>\n  <span class=\"token keyword\">fun</span> <span class=\"token function\">prepare</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    userAddressRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token function\">UserAddress</span><span class=\"token punctuation\">(</span>uid <span class=\"token operator\">=</span> <span class=\"token number\">1234</span><span class=\"token punctuation\">,</span> address1 <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"서울시\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation builtin\">@Test</span>\n  <span class=\"token keyword\">fun</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>userAddressRepository<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation builtin\">@Test</span>\n  <span class=\"token keyword\">fun</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>userAddressRepository<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>하지만 <code class=\"language-text\">@Nested</code> 클래스에서는 롤백되지 않는다:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Import</span><span class=\"token punctuation\">(</span>TestClientConfig<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation builtin\">@ExtendWith</span><span class=\"token punctuation\">(</span>SpringExtension<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation builtin\">@AutoConfigureWebTestClient</span>\n<span class=\"token annotation builtin\">@SpringBootTest</span>\n<span class=\"token annotation builtin\">@Transactional</span>\n<span class=\"token keyword\">class</span> DescribeShippingAddressDetailAAA <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation builtin\">@Autowired</span>\n  <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> userAddressRepository<span class=\"token operator\">:</span> UserAddressRepository\n\n  <span class=\"token annotation builtin\">@BeforeEach</span>\n  <span class=\"token keyword\">fun</span> <span class=\"token function\">prepare</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    userAddressRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token function\">UserAddress</span><span class=\"token punctuation\">(</span>uid <span class=\"token operator\">=</span> <span class=\"token number\">1234</span><span class=\"token punctuation\">,</span> address1 <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"서울시 구로구 구로동\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation builtin\">@Nested</span>\n  <span class=\"token keyword\">inner</span> <span class=\"token keyword\">class</span> Context <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation builtin\">@Test</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>userAddressRepository<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation builtin\">@Test</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>userAddressRepository<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">@Nested</code>에서 롤백되지 않는 것은 <a href=\"https://stackoverflow.com/questions/44203244/transaction-roll-back-is-not-working-in-test-case-in-nested-class-of-junit5\">예상 가능한 범위</a>라고\nSpring TestContext Framework 개발자가 말한다:</p>\n<blockquote>\n<p>This is to be expected: the Spring TestContext Framework has never supported \"inheritance\" for nested test classes.</p>\n</blockquote>\n<p>다만 이를 지원할 수 있도록 작업한 모양이다.\n<a href=\"https://jira.spring.io/browse/SPR-15366\">SPR-15366</a> 이슈에서 <code class=\"language-text\">@Nested</code>에 대한 처리를 진행했다.\nSpring 5.3의 마일스톤에 포함되어 있다.</p>\n<p>이 작업이 <a href=\"https://docs.spring.io/spring-framework/reference/testing/annotations/integration-junit-jupiter.html#integration-testing-annotations-nestedtestconfiguration\">@NestedTestConfiguration</a>에 대한 내용으로 보인다.</p>\n<h3 id=\"application-properties\" style=\"position:relative;\"><a href=\"#application-properties\" aria-label=\"application properties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Application Properties</h3>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html\">https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html</a></p>\n<p>Spring Boot는 <code class=\"language-text\">application.properties</code>, <code class=\"language-text\">application.yaml</code>, 환경변수, command-line 인자로부터 설정값을 받을 수 있다.</p>\n<p><code class=\"language-text\">@configurationProperties</code>가 설정된 클래스에 매핑해 주는데 <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.external-config.typesafe-configuration-properties.relaxed-binding\">Relaxed Binding</a>을 사용한다.</p>\n<p>매우 관대한 규칙으로 property에 binding 하는데, <a href=\"https://github.com/spring-projects/spring-boot/wiki/Relaxed-Binding-2.0\">Relaxed Binding 2.0 Github Wiki</a>에 그 규칙을 설명하고 있다.</p>\n<p>예를들어 다음 설정은 모두 같은 것을 의미한다:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">spring.jpa.database-platform=mysql\nspring.jpa.databasePlatform=mysql\nspring.JPA.database_platform=mysql</code></pre></div>\n<p>공식적으로 추천하는 포맷은 kebab-case를 사용하는 것이다:</p>\n<blockquote>\n<p>We recommend that properties are stored in lowercase kabab format. i.e. <code class=\"language-text\">my.property-name=foo</code>.</p>\n</blockquote>\n<p><code class=\"language-text\">@ConfigurationProperties</code> 예시. 생성자를 통해서 주입받는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@ConstructorBinding</span>\n<span class=\"token annotation builtin\">@ConfigurationProperties</span><span class=\"token punctuation\">(</span>prefix <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"foo.bar\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token function\">MyConfig</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> baz<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// ConstructorBinding 사용하려면 EnableConfigurationProperties가 필요</span>\n<span class=\"token annotation builtin\">@EnableConfigurationProperties</span><span class=\"token punctuation\">(</span>MyConfig<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation builtin\">@SpringBootApplication</span>\n<span class=\"token keyword\">class</span> Application</code></pre></div>\n<h3 id=\"uri-links\" style=\"position:relative;\"><a href=\"#uri-links\" aria-label=\"uri links permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>URI Links</h3>\n<p><a href=\"https://docs.spring.io/spring-framework/reference/web/webmvc/mvc-uri-building.html#uri-encoding\">https://docs.spring.io/spring-framework/reference/web/webmvc/mvc-uri-building.html#uri-encoding</a></p>\n<p><code class=\"language-text\">UriComponentsBuilder</code>로 query parameter에 URL을 전달하기 위해 다음과 같이 작성하면 인코딩 문제가 발생한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span>url<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> UriComponentsBuilder\n  <span class=\"token punctuation\">.</span><span class=\"token function\">fromUriString</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"https://example.com\"</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">queryParam</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"url\"</span></span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"https://www.google.com/search?q=%ED%91%B8%EB%B0%94&amp;oq=%ED%91%B8%EB%B0%94&amp;aqs=chrome..69i64j46i340i512j0i512l8.2053j0j1&amp;sourceid=chrome&amp;ie=UTF-8\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// https://example.com?url=https://www.google.com/search?q=%ED%91%B8%EB%B0%94&amp;oq=%ED%91%B8%EB%B0%94&amp;aqs=chrome..69i64j46i340i512j0i512l8.2053j0j1&amp;sourceid=chrome&amp;ie=UTF-8</span></code></pre></div>\n<p><code class=\"language-text\">url=</code> 파라미터의 url에 포함된 slash가 인코딩 되지 않는다.</p>\n<p>다음과 같이 <code class=\"language-text\">build()</code>로 전달하면 올바르게 인코딩한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span>url<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> UriComponentsBuilder\n    <span class=\"token punctuation\">.</span><span class=\"token function\">fromUriString</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"https://example.com\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">queryParam</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"url\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"{url}\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"https://www.google.com/search?q=%ED%91%B8%EB%B0%94&amp;oq=%ED%91%B8%EB%B0%94&amp;aqs=chrome..69i64j46i340i512j0i512l8.2053j0j1&amp;sourceid=chrome&amp;ie=UTF-8\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// https://example.com?url=https%3A%2F%2Fwww.google.com%2Fsearch%3Fq%3D%25ED%2591%25B8%25EB%25B0%2594%26oq%3D%25ED%2591%25B8%25EB%25B0%2594%26aqs%3Dchrome..69i64j46i340i512j0i512l8.2053j0j1%26sourceid%3Dchrome%26ie%3DUTF-8</span></code></pre></div>\n<p><code class=\"language-text\">/</code>, <code class=\"language-text\">=</code>, <code class=\"language-text\">&amp;</code> 등 URI 요소를 인코딩한 것을 볼 수 있다.</p>\n<p>placeholder<code class=\"language-text\">{url}</code>는 사용하지 않았고, build로 전달하는 순서대로 replace 한다.</p>\n<h3 id=\"actuator\" style=\"position:relative;\"><a href=\"#actuator\" aria-label=\"actuator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Actuator</h3>\n<p>Spring Boot는 Actuator로 운영 환경에서 사용할 수 있는 모니터링 및 관리 도구를 제공한다.</p>\n<ul>\n<li>2.1.0 문서: <a href=\"https://docs.spring.io/spring-boot/docs/2.1.0.M1/reference/html/production-ready.html\">https://docs.spring.io/spring-boot/docs/2.1.0.M1/reference/html/production-ready.html</a></li>\n<li>3.2.x 문서: <a href=\"https://docs.spring.io/spring-boot/docs/3.2.x/reference/html/actuator.html#actuator\">https://docs.spring.io/spring-boot/docs/3.2.x/reference/html/actuator.html#actuator</a></li>\n</ul>\n<p>문서 제목부터 <em>Production-ready Features</em>로 안정감이 느껴진다.</p>\n<p>기본적으로 <code class=\"language-text\">/actuator</code>에서 현재 제공하고 있는 도구 목록을 보여주는데, json으로 제공된다:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"_links\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"self\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"href\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://localhost:5001/actuator\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"templated\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"beans\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"href\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://localhost:5001/actuator/beans\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"templated\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"health\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"href\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://localhost:5001/actuator/health\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"templated\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"health-path\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"href\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://localhost:5001/actuator/health/{*path}\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"templated\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"httptrace\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"href\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://localhost:5001/actuator/httptrace\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"templated\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"httptracehttpexchanges\" style=\"position:relative;\"><a href=\"#httptracehttpexchanges\" aria-label=\"httptracehttpexchanges permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>httptrace(httpexchanges)</h4>\n<p>httptrace는 최근 HTTP 요청 내역을 관리하는 기능이다. Spring Boot 3 부터는 <code class=\"language-text\">httpexchanges</code>라 부른다.</p>\n<ul>\n<li>2.1.0: <a href=\"https://docs.spring.io/spring-boot/docs/2.1.0.M1/reference/html/production-ready-http-tracing.html\">https://docs.spring.io/spring-boot/docs/2.1.0.M1/reference/html/production-ready-http-tracing.html</a></li>\n<li>3.2.x: <a href=\"https://docs.spring.io/spring-boot/docs/3.2.x/reference/html/actuator.html#actuator.http-exchanges\">https://docs.spring.io/spring-boot/docs/3.2.x/reference/html/actuator.html#actuator.http-exchanges</a></li>\n</ul>\n<p>기능 활성화를 위해서 버전에 따라 설정이 상이하다.</p>\n<p>2.7.5 기준으로 <code class=\"language-text\">management.endpoints.web.exposure.include=httptrace</code>를 설정 추가하고, <code class=\"language-text\">HttpTraceRepository</code> Bean을 구현하면 활성화 할 수 있다.<br>\nBean 구현하는 것은 <a href=\"https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.2.0-M3-Release-Notes#actuator-http-trace-and-auditing-are-disabled-by-default\">2.2.0 M3 부터 변경</a>되었는데, 이전 버전에서는 구현없이 가능했던 모양.</p>\n<p>Spring Boot 3부터는 명칭 변경으로 <code class=\"language-text\">management.endpoints.web.exposure.include=httpexchanges</code>로 변경되었다.\nBean 인터페이스 이름도 <code class=\"language-text\">HttpExchangeRepository</code>로 변경되었다.</p>\n<p>어느 버전이든 <code class=\"language-text\">HttpTraceRepository</code>를 in-memory 버전 저장소로 간편하게 구현할 수 있다.<br>\n다음은 Spring Boot 2 기준 예시 코드:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Bean</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">httpTraceRepository</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> HttpTraceRepository <span class=\"token operator\">=</span> <span class=\"token function\">InMemoryHttpTraceRepository</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>내 경우, 운영에서는 <code class=\"language-text\">health</code> 말고는 Actuator 기능을 비활성화했기 때문에 Bean 생성 조건에 property 확인을 추가했다:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Bean</span>\n<span class=\"token annotation builtin\">@ConditionalOnExpression</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"'\\${management.endpoints.web.exposure.include}'.contains('httptrace')\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">httpTraceRepository</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> HttpTraceRepository <span class=\"token operator\">=</span> <span class=\"token function\">InMemoryHttpTraceRepository</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>서버 시작 후 <code class=\"language-text\">/actuator/httptrace</code>에 접속하면 json으로 제공한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"traces\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"timestamp\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2023-12-27T08:24:56.956Z\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"principal\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"session\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"request\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"method\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"uri\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://localhost:5001/actuator/\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"headers\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"sec-fetch-mode\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"navigate\"</span>\n          <span class=\"token punctuation\">]</span>\n          <span class=\"token comment\">// ... 생략</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"remoteAddress\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"response\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"headers\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"Keep-Alive\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"timeout=60\"</span>\n          <span class=\"token punctuation\">]</span>\n          <span class=\"token comment\">// ... 생략</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"timeTaken\"</span><span class=\"token operator\">:</span> <span class=\"token number\">27</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>actuator 페이지 접근을 위해 기록된 것을 볼 수 있다.\n최근 요청의 헤더 정보, 응답 코드, URL 등을 알 수 있다.</p>\n<h2 id=\"spring-cli\" style=\"position:relative;\"><a href=\"#spring-cli\" aria-label=\"spring cli permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Spring CLI</h2>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/cli.html\">https://docs.spring.io/spring-boot/docs/current/reference/html/cli.html</a></p>\n<p>Installation(Homebrew):</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ brew tap spring-io/tap\n$ brew <span class=\"token function\">install</span> spring-boot</code></pre></div>\n<p>도움말 확인하려면 <code class=\"language-text\">spring help &lt;command></code><br>\ne.g. <code class=\"language-text\">spring help init</code></p>\n<h3 id=\"빠른-프로젝트-생성\" style=\"position:relative;\"><a href=\"#%EB%B9%A0%EB%A5%B8-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%83%9D%EC%84%B1\" aria-label=\"빠른 프로젝트 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>빠른 프로젝트 생성</h3>\n<p>Kotlin + Spring Boot + Gradle 프로젝트를 빠르게 생성 해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">spring init <span class=\"token parameter variable\">--language</span> kotlin <span class=\"token parameter variable\">--type</span> gradle-project-kotlin <span class=\"token parameter variable\">--extract</span> demo</code></pre></div>\n<p><code class=\"language-text\">demo</code> 디렉토리와 함께 프로젝트가 생성된다.<br>\n<code class=\"language-text\">--extract</code> 옵션을 생략하면 zip 파일로 생성된다.</p>\n<p>Application 코드를 생성해 주지만 <code class=\"language-text\">ApplicationRunner</code>로 간단하게 hello world 출력해보자:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@SpringBootApplication</span>\n<span class=\"token keyword\">class</span> DemoApplication<span class=\"token operator\">:</span> ApplicationRunner <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> ApplicationArguments<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Hello, world!\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    runApplication<span class=\"token operator\">&lt;</span>DemoApplication<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">spring init --list</code>로 설정 기본값을 확인할 수 있다:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Parameters\n+-------------+------------------------------------------+------------------------------+\n<span class=\"token operator\">|</span> Id          <span class=\"token operator\">|</span> Description                              <span class=\"token operator\">|</span> Default value                <span class=\"token operator\">|</span>\n+-------------+------------------------------------------+------------------------------+\n<span class=\"token operator\">|</span> artifactId  <span class=\"token operator\">|</span> project coordinates <span class=\"token punctuation\">(</span>infer archive name<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> demo                         <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> bootVersion <span class=\"token operator\">|</span> spring boot version                      <span class=\"token operator\">|</span> <span class=\"token number\">3.0</span>.4                        <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> description <span class=\"token operator\">|</span> project description                      <span class=\"token operator\">|</span> Demo project <span class=\"token keyword\">for</span> Spring Boot <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> groupId     <span class=\"token operator\">|</span> project coordinates                      <span class=\"token operator\">|</span> com.example                  <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> javaVersion <span class=\"token operator\">|</span> language level                           <span class=\"token operator\">|</span> <span class=\"token number\">17</span>                           <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> language    <span class=\"token operator\">|</span> programming language                     <span class=\"token operator\">|</span> <span class=\"token function\">java</span>                         <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> name        <span class=\"token operator\">|</span> project name <span class=\"token punctuation\">(</span>infer application name<span class=\"token punctuation\">)</span>    <span class=\"token operator\">|</span> demo                         <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> packageName <span class=\"token operator\">|</span> root package                             <span class=\"token operator\">|</span> com.example.demo             <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> packaging   <span class=\"token operator\">|</span> project packaging                        <span class=\"token operator\">|</span> jar                          <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token builtin class-name\">type</span>        <span class=\"token operator\">|</span> project <span class=\"token builtin class-name\">type</span>                             <span class=\"token operator\">|</span> gradle-project               <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> version     <span class=\"token operator\">|</span> project version                          <span class=\"token operator\">|</span> <span class=\"token number\">0.0</span>.1-SNAPSHOT               <span class=\"token operator\">|</span>\n+-------------+------------------------------------------+------------------------------+</code></pre></div>\n<p><code class=\"language-text\">--type</code> 옵션에 사용 할 프로젝트 유형 목록도 표시된다:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Project types <span class=\"token punctuation\">(</span>* denotes the default<span class=\"token punctuation\">)</span>\n+-----------------------+--------------------------------------------------------------+--------------------------------------------+\n<span class=\"token operator\">|</span> Id                    <span class=\"token operator\">|</span> Description                                                  <span class=\"token operator\">|</span> Tags                                       <span class=\"token operator\">|</span>\n+-----------------------+--------------------------------------------------------------+--------------------------------------------+\n<span class=\"token operator\">|</span> gradle-build          <span class=\"token operator\">|</span> Generate a Gradle build file.                                <span class=\"token operator\">|</span> build:gradle,format:build                  <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>                       <span class=\"token operator\">|</span>                                                              <span class=\"token operator\">|</span>                                            <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> gradle-project *      <span class=\"token operator\">|</span> Generate a Gradle based project archive using the Groovy     <span class=\"token operator\">|</span> build:gradle,dialect:groovy,format:project <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>                       <span class=\"token operator\">|</span> DSL.                                                         <span class=\"token operator\">|</span>                                            <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>                       <span class=\"token operator\">|</span>                                                              <span class=\"token operator\">|</span>                                            <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> gradle-project-kotlin <span class=\"token operator\">|</span> Generate a Gradle based project archive using the Kotlin     <span class=\"token operator\">|</span> build:gradle,dialect:kotlin,format:project <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>                       <span class=\"token operator\">|</span> DSL.                                                         <span class=\"token operator\">|</span>                                            <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>                       <span class=\"token operator\">|</span>                                                              <span class=\"token operator\">|</span>                                            <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> maven-build           <span class=\"token operator\">|</span> Generate a Maven pom.xml.                                    <span class=\"token operator\">|</span> build:maven,format:build                   <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>                       <span class=\"token operator\">|</span>                                                              <span class=\"token operator\">|</span>                                            <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> maven-project         <span class=\"token operator\">|</span> Generate a Maven based project archive.                      <span class=\"token operator\">|</span> build:maven,format:project                 <span class=\"token operator\">|</span>\n+-----------------------+--------------------------------------------------------------+--------------------------------------------+</code></pre></div>\n<p>포함할 의존성도 선택할 수 있는데, 간단한 설명이 포함되어 있어서 유용하다:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Supported dependencies\n+--------------------------------------+--------------------------------------------------------------+-------------------------------+\n<span class=\"token operator\">|</span> Id                                   <span class=\"token operator\">|</span> Description                                                  <span class=\"token operator\">|</span> Required version              <span class=\"token operator\">|</span>\n+--------------------------------------+--------------------------------------------------------------+-------------------------------+\n<span class=\"token operator\">|</span> activemq                             <span class=\"token operator\">|</span> Spring JMS support with Apache ActiveMQ <span class=\"token string\">'Classic'</span><span class=\"token builtin class-name\">.</span>           <span class=\"token operator\">|</span>                               <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>                                      <span class=\"token operator\">|</span>                                                              <span class=\"token operator\">|</span>                               <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> actuator                             <span class=\"token operator\">|</span> Supports built <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span>or custom<span class=\"token punctuation\">)</span> endpoints that <span class=\"token builtin class-name\">let</span> you monitor <span class=\"token operator\">|</span>                               <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>                                      <span class=\"token operator\">|</span> and manage your application - such as application health,    <span class=\"token operator\">|</span>                               <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>                                      <span class=\"token operator\">|</span> metrics, sessions, etc.                                      <span class=\"token operator\">|</span>                               <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>                                      <span class=\"token operator\">|</span>                                                              <span class=\"token operator\">|</span>                               <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> webflux                              <span class=\"token operator\">|</span> Build reactive web applications with Spring WebFlux and      <span class=\"token operator\">|</span>                               <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>                                      <span class=\"token operator\">|</span> Netty.                                                       <span class=\"token operator\">|</span>                               <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>                                      <span class=\"token operator\">|</span>                                                              <span class=\"token operator\">|</span>                               <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> websocket                            <span class=\"token operator\">|</span> Build Servlet-based WebSocket applications with SockJS and   <span class=\"token operator\">|</span>                               <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>                                      <span class=\"token operator\">|</span> STOMP.                                                       <span class=\"token operator\">|</span>                               <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>                                      <span class=\"token operator\">|</span>                                                              <span class=\"token operator\">|</span>                               <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> zipkin                               <span class=\"token operator\">|</span> Enable and expose span and trace IDs to Zipkin.              <span class=\"token operator\">|</span>                               <span class=\"token operator\">|</span>\n+--------------------------------------+--------------------------------------------------------------+-------------------------------+</code></pre></div>\n<p>의존성을 추가하려면 <code class=\"language-text\">--dependencies=actuator,webflux</code>와 같이 사용한다.</p>\n<h2 id=\"caching\" style=\"position:relative;\"><a href=\"#caching\" aria-label=\"caching permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Caching</h2>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/2.0.x/reference/html/boot-features-caching.html\">https://docs.spring.io/spring-boot/docs/2.0.x/reference/html/boot-features-caching.html</a></p>\n<blockquote>\n<p>Use the spring-boot-starter-cache “Starter” to quickly add basic caching dependencies. The starter brings in spring-context-support.</p>\n</blockquote>\n<p><code class=\"language-text\">spring-boot-starter-cache</code>를 사용하면 간단한 설정으로 캐싱 모듈을 사용할 수 있는 거 같다.\n일단 내 경우에는 간단한 형태는 아니고, 함수마다 각기 다른 캐시 만료 정책을 적용하기 위해서 <code class=\"language-text\">CacheManager</code>를 직접 구성해야 했고,\n직접 구성하니 <code class=\"language-text\">spring-boot-starter-cache</code>는 필요하지 않았다.</p>\n<h3 id=\"caffeine\" style=\"position:relative;\"><a href=\"#caffeine\" aria-label=\"caffeine permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Caffeine</h3>\n<p>로컬 캐시 용도로 Caffeine만 써봤다.\n<a href=\"https://github.com/ben-manes/caffeine/wiki/Benchmarks\">Caffeine에서 제공하는 벤치마크</a>로는 가장 우수하다.</p>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/dependency-versions.html#:~:text=2.15.2-,com.github.ben%2Dmanes.caffeine,-caffeine\">spring managed dependency</a>이므로 버전을 직접 지정할 필요는 없다.</p>\n<blockquote>\n<p>If Caffeine is present, a CaffeineCacheManager (provided by the spring-boot-starter-cache “Starter”)</p>\n</blockquote>\n<p><code class=\"language-text\">spring-boot-starter-cache</code>를 사용하면 <code class=\"language-text\">CaffeineCacheManager</code>를 알아서 만들어 준다고 한다.\n내 경우에는 직접 <code class=\"language-text\">CacheManager</code> 구성해서 <code class=\"language-text\">spring-boot-starter-cache</code>가 필요하지 않았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@EnableCaching</span>\n<span class=\"token annotation builtin\">@Configuration</span>\n<span class=\"token keyword\">class</span> CacheConfig <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation builtin\">@Bean</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">cacheManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> CacheManager <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> caches <span class=\"token operator\">=</span> CacheType<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">CaffeineCache</span><span class=\"token punctuation\">(</span>\n                it<span class=\"token punctuation\">.</span>cacheName<span class=\"token punctuation\">,</span>\n                Caffeine<span class=\"token punctuation\">.</span><span class=\"token function\">newBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">expireAfterWrite</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span>duration<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">SimpleCacheManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">also</span> <span class=\"token punctuation\">{</span>\n            it<span class=\"token punctuation\">.</span><span class=\"token function\">setCaches</span><span class=\"token punctuation\">(</span>caches<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">enum</span> <span class=\"token keyword\">class</span> <span class=\"token function\">CacheType</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">val</span> cacheName<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">val</span> duration<span class=\"token operator\">:</span> Duration<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">CACHE_POLICY1</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"policy1\"</span></span><span class=\"token punctuation\">,</span> Duration<span class=\"token punctuation\">.</span><span class=\"token function\">ofMinutes</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">CACHE_POLICY2</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"policy2\"</span></span><span class=\"token punctuation\">,</span> Duration<span class=\"token punctuation\">.</span><span class=\"token function\">ofMinutes</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>enum으로 만료 시간에 다른 캐시 정책을 여러개 만들었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Cacheable</span><span class=\"token punctuation\">(</span>cacheNames <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"policy1\"</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">getItems</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Set<span class=\"token operator\">&lt;</span>Items<span class=\"token operator\">></span> <span class=\"token operator\">=</span> repository<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>사용을 위해선 캐시 이름을 맞춰서 사용한다.\n캐시 이름이 변경되면 캐시 선언 부분과 사용 부분 모두 수정하는데, 이는 캐시 이름을 <code class=\"language-text\">const val</code>로 만들어서 처리할 수 있다.</p>\n<h2 id=\"troubleshooting\" style=\"position:relative;\"><a href=\"#troubleshooting\" aria-label=\"troubleshooting permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Troubleshooting</h2>\n<h3 id=\"intellij에서-properties의-선언부를-찾을-수-없는-경우\" style=\"position:relative;\"><a href=\"#intellij%EC%97%90%EC%84%9C-properties%EC%9D%98-%EC%84%A0%EC%96%B8%EB%B6%80%EB%A5%BC-%EC%B0%BE%EC%9D%84-%EC%88%98-%EC%97%86%EB%8A%94-%EA%B2%BD%EC%9A%B0\" aria-label=\"intellij에서 properties의 선언부를 찾을 수 없는 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>IntelliJ에서 Properties의 선언부를 찾을 수 없는 경우</h3>\n<p><code class=\"language-text\">@ConfigurationProperties(prefix=\"foo.bar\")</code>가 선언된 클래스가 있음에도 <code class=\"language-text\">application.yml</code>에서 선언부를 찾지 못하고,\n<code class=\"language-text\">Cannot resolve configuration property 'foo.bar'</code> 경고가 출력되는 문제. 서버 시작은 잘 된다.</p>\n<p><code class=\"language-text\">org.springframework.boot:spring-boot-configuration-processor</code> 의존성을 추가하고, <code class=\"language-text\">gradle compileJava</code>를 실행하면 된다.</p>\n<p>gradle(kts) 예시:</p>\n<div class=\"gatsby-highlight\" data-language=\"gradle\"><pre class=\"language-gradle\"><code class=\"language-gradle\"><span class=\"token function\">kapt</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">\"org.springframework.boot:spring-boot-configuration-processor\"</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"webclient-첫-요청이-느린-문제\" style=\"position:relative;\"><a href=\"#webclient-%EC%B2%AB-%EC%9A%94%EC%B2%AD%EC%9D%B4-%EB%8A%90%EB%A6%B0-%EB%AC%B8%EC%A0%9C\" aria-label=\"webclient 첫 요청이 느린 문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WebClient 첫 요청이 느린 문제</h3>\n<p>상황: 서버 시작 직후 다른 서버의 API를 호출하는 내 API가 느려서 클라이언트에서 타임아웃이 자주 발생함.<br>\n해결: netty http client의 <code class=\"language-text\">warmup</code> + 사용자 진입 전 미리 타겟 서버 API 호출</p>\n<p><a href=\"https://projectreactor.io/docs/netty/release/reference/index.html#_eager_initialization_4\">https://projectreactor.io/docs/netty/release/reference/index.html#_eager_initialization_4</a></p>\n<ol>\n<li>warmup으로 event loop pool을 준비시키고</li>\n<li>서버 시작 시 임의로 호출하여 모든 사용자 요청은 첫 요청 이후가 되도록 한다.</li>\n</ol>\n<p>2의 임의 호출은 해당 서버의 health check가 되는 API로 했다.</p>\n<p>문서에서 설명하는 첫 요청에서 시간을 소요하는 요소는 다음과 같다:</p>\n<ol>\n<li>event loop group</li>\n<li>host name resolver</li>\n<li>내장된 transport 라이브러리들</li>\n<li>보안과 관련된 라이브러리들</li>\n</ol>"}},"pageContext":{"id":"623b17b4-5278-5969-8b27-1f7cb204a495"}},"staticQueryHashes":[],"slicesMap":{}}