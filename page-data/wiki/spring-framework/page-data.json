{"componentChunkName":"component---src-pages-wiki-markdown-remark-fields-slug-tsx","path":"/wiki/spring-framework/","result":{"data":{"markdownRemark":{"tableOfContents":"<ul>\n<li>\n<p><a href=\"#spring-framework\">Spring framework</a></p>\n</li>\n<li>\n<p><a href=\"#webclient-%EC%B2%AB-%EC%9A%94%EC%B2%AD%EC%9D%B4-%EB%8A%90%EB%A6%B0-%EB%AC%B8%EC%A0%9C\">WebClient 첫 요청이 느린 문제</a></p>\n</li>\n<li>\n<p><a href=\"#requestmapping-request-mapping-narrowing\"><code>RequestMapping</code> Request mapping narrowing</a></p>\n<ul>\n<li>\n<p><a href=\"#parameters\">parameters</a></p>\n<ul>\n<li><a href=\"#value-alias-of-path\"><code>value</code> (alias of <code>path</code>)</a></li>\n<li><a href=\"#params\"><code>params</code></a></li>\n<li><a href=\"#headers\"><code>headers</code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#test\">Test</a></p>\n</li>\n<li>\n<p><a href=\"#transactional-test\">Transactional Test</a></p>\n</li>\n<li>\n<p><a href=\"#spring-cli\">Spring CLI</a></p>\n<ul>\n<li><a href=\"#%EB%B9%A0%EB%A5%B8-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%83%9D%EC%84%B1\">빠른 프로젝트 생성</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#reference\">Reference</a></p>\n</li>\n</ul>","html":"<h1 id=\"spring-framework\" style=\"position:relative;\"><a href=\"#spring-framework\" aria-label=\"spring framework permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Spring framework</h1>\n<h1 id=\"webclient-첫-요청이-느린-문제\" style=\"position:relative;\"><a href=\"#webclient-%EC%B2%AB-%EC%9A%94%EC%B2%AD%EC%9D%B4-%EB%8A%90%EB%A6%B0-%EB%AC%B8%EC%A0%9C\" aria-label=\"webclient 첫 요청이 느린 문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WebClient 첫 요청이 느린 문제</h1>\n<p>상황: 서버 시작 직후 다른 서버의 API를 호출하는 내 API가 느려서 클라이언트에서 타임아웃이 자주 발생함.<br>\n해결: netty http client의 <code>warmup</code> + 사용자 진입 전 미리 타겟 서버 API 호출</p>\n<p><a href=\"https://projectreactor.io/docs/netty/release/reference/index.html#_eager_initialization_4\">https://projectreactor.io/docs/netty/release/reference/index.html#_eager_initialization_4</a></p>\n<ol>\n<li>warmup으로 event loop pool을 준비시키고</li>\n<li>서버 시작 시 임의로 호출하여 모든 사용자 요청은 첫 요청 이후가 되도록 한다.</li>\n</ol>\n<p>2의 임의 호출은 해당 서버의 health check가 되는 API로 했다.</p>\n<p>문서에서 설명하는 첫 요청에서 시간을 소요하는 요소는 다음과 같다:</p>\n<ol>\n<li>event loop group</li>\n<li>host name resolver</li>\n<li>내장된 transport 라이브러리들</li>\n<li>보안과 관련된 라이브러리들</li>\n</ol>\n<h1 id=\"requestmapping-request-mapping-narrowing\" style=\"position:relative;\"><a href=\"#requestmapping-request-mapping-narrowing\" aria-label=\"requestmapping request mapping narrowing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>RequestMapping</code> Request mapping narrowing</h1>\n<p><a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/RequestMapping.html\">RequestMapping - Spring API</a></p>\n<p><code>@RequestMapping</code>는 Controller의 매핑 범위를 줄이는 파라미터를 제공한다.</p>\n<p><code>@GetMapping</code> <code>@PostMapping</code> 사용하여 우선 method로 선택 범위를 좁힐 수 있다.</p>\n<h2 id=\"parameters\" style=\"position:relative;\"><a href=\"#parameters\" aria-label=\"parameters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>parameters</h2>\n<h3 id=\"value-alias-of-path\" style=\"position:relative;\"><a href=\"#value-alias-of-path\" aria-label=\"value alias of path permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>value</code> (alias of <code>path</code>)</h3>\n<p>가장 기본적인 인자로, url path를 매핑한다. 기본 값은 빈 문자열이므로 <code>/</code> 와 같다.</p>\n<h3 id=\"params\" style=\"position:relative;\"><a href=\"#params\" aria-label=\"params permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>params</code></h3>\n<p>query-string 매핑.</p>\n<ul>\n<li><code>myParam=myValue</code> 특정 값인 경우만 매핑한다.</li>\n<li><code>myParam!=myValue</code> 위의 반대. 특정 값이 아닌 경우만 매핑한다.</li>\n<li><code>!myParam</code> <code>myParam</code> 파라미터 자체가 제공된 경우만 매핑한다.</li>\n</ul>\n<h3 id=\"headers\" style=\"position:relative;\"><a href=\"#headers\" aria-label=\"headers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>headers</code></h3>\n<p>header 매핑.</p>\n<p><code>@RequestMapping(value = \"/something\", headers = \"content-type=text/*\")</code></p>\n<p>wildcard를 사용한 경우 <code>text/plain</code> <code>text/html</code> 모두 매핑한다.</p>\n<h1 id=\"test\" style=\"position:relative;\"><a href=\"#test\" aria-label=\"test permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Test</h1>\n<h1 id=\"transactional-test\" style=\"position:relative;\"><a href=\"#transactional-test\" aria-label=\"transactional test permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Transactional Test</h1>\n<p>통합 테스트에서 teardown 시점에 트랜잭션을 롤백하는 방법은 편리해서 자주 사용하는 방법이다.</p>\n<p>SpringBootTest에서는 <code>@Transactional</code>을 사용하여 테스트 후에 롤백할 수 있다:</p>\n<pre><code class=\"language-kotlin\">@Import(TestClientConfig::class)\n@ExtendWith(SpringExtension::class)\n@AutoConfigureWebTestClient\n@SpringBootTest\n@Transactional\nclass UserAddressTest {\n  @Autowired\n  lateinit var userAddressRepository: UserAddressRepository\n\n  @BeforeEach\n  fun prepare() {\n    userAddressRepository.save(UserAddress(uid = 1234, address1 = \"서울시\"))\n  }\n\n  @Test\n  fun test1() {\n    assertThat(userAddressRepository.count()).isEqualTo(1)\n  }\n\n  @Test\n  fun test2() {\n    assertThat(userAddressRepository.count()).isEqualTo(1)\n  }\n}\n</code></pre>\n<p>하지만 <code>@Nested</code> 클래스에서는 롤백되지 않는다:</p>\n<pre><code class=\"language-kotlin\">@Import(TestClientConfig::class)\n@ExtendWith(SpringExtension::class)\n@AutoConfigureWebTestClient\n@SpringBootTest\n@Transactional\nclass DescribeShippingAddressDetailAAA {\n  @Autowired\n  lateinit var userAddressRepository: UserAddressRepository\n\n  @BeforeEach\n  fun prepare() {\n    userAddressRepository.save(UserAddress(uid = 1234, address1 = \"서울시 구로구 구로동\"))\n  }\n\n  @Nested\n  inner class Context {\n    @Test\n    fun test1() {\n      assertThat(userAddressRepository.count()).isEqualTo(1)\n    }\n\n    @Test\n    fun test2() {\n      assertThat(userAddressRepository.count()).isEqualTo(1)\n    }\n  }\n}\n</code></pre>\n<p><code>@Nested</code>에서 롤백되지 않는 것은 <a href=\"https://stackoverflow.com/questions/44203244/transaction-roll-back-is-not-working-in-test-case-in-nested-class-of-junit5\">예상 가능한 범위</a>라고\nSpring TestContext Framework 개발자가 말한다:</p>\n<blockquote>\n<p>This is to be expected: the Spring TestContext Framework has never supported \"inheritance\" for nested test classes.</p>\n</blockquote>\n<p>다만 이를 지원할 수 있도록 작업한 모양이다.\n<a href=\"https://jira.spring.io/browse/SPR-15366\">SPR-15366</a> 이슈에서 <code>@Nested</code>에 대한 처리를 진행했다.\nSpring 5.3의 마일스톤에 포함되어 있다.</p>\n<p>이 작업이 <a href=\"https://docs.spring.io/spring-framework/reference/testing/annotations/integration-junit-jupiter.html#integration-testing-annotations-nestedtestconfiguration\">@NestedTestConfiguration</a>에 대한 내용으로 보인다.</p>\n<h1 id=\"spring-cli\" style=\"position:relative;\"><a href=\"#spring-cli\" aria-label=\"spring cli permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Spring CLI</h1>\n<p>Installation(Homebrew):</p>\n<pre><code class=\"language-bash\">$ brew tap spring-io/tap\n$ brew install spring-boot\n</code></pre>\n<p>도움말 확인하려면 <code>spring help &#x3C;command></code><br>\ne.g. <code>spring help init</code></p>\n<h2 id=\"빠른-프로젝트-생성\" style=\"position:relative;\"><a href=\"#%EB%B9%A0%EB%A5%B8-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%83%9D%EC%84%B1\" aria-label=\"빠른 프로젝트 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>빠른 프로젝트 생성</h2>\n<p>Kotlin + Spring Boot + Gradle 프로젝트를 빠르게 생성 해보자.</p>\n<pre><code class=\"language-bash\">spring init --language kotlin --type gradle-project-kotlin --extract demo\n</code></pre>\n<p><code>demo</code> 디렉토리와 함께 프로젝트가 생성된다.<br>\n<code>--extract</code> 옵션을 생략하면 zip 파일로 생성된다.</p>\n<p>Application 코드를 생성해 주지만 <code>ApplicationRunner</code>로 간단하게 hello world 출력해보자:</p>\n<pre><code class=\"language-kotlin\">@SpringBootApplication\nclass DemoApplication: ApplicationRunner {\n    override fun run(args: ApplicationArguments) {\n        println(\"Hello, world!\")\n    }\n}\n\nfun main(args: Array&#x3C;String>) {\n    runApplication&#x3C;DemoApplication>(*args)\n}\n</code></pre>\n<p>JDK 버전 등 기본 설정값을 확인하려면 <code>spring init --list</code>:</p>\n<pre><code class=\"language-bash\">Parameters\n+-------------+------------------------------------------+------------------------------+\n| Id          | Description                              | Default value                |\n+-------------+------------------------------------------+------------------------------+\n| artifactId  | project coordinates (infer archive name) | demo                         |\n| bootVersion | spring boot version                      | 3.0.4                        |\n| description | project description                      | Demo project for Spring Boot |\n| groupId     | project coordinates                      | com.example                  |\n| javaVersion | language level                           | 17                           |\n| language    | programming language                     | java                         |\n| name        | project name (infer application name)    | demo                         |\n| packageName | root package                             | com.example.demo             |\n| packaging   | project packaging                        | jar                          |\n| type        | project type                             | gradle-project               |\n| version     | project version                          | 0.0.1-SNAPSHOT               |\n+-------------+------------------------------------------+------------------------------+\n</code></pre>\n<p><code>spring init --list</code>는 설치 지원하는 의존성도 보여주는데, 설명이 간락하게 잘 되어있다:</p>\n<pre><code class=\"language-bash\">Supported dependencies\n+--------------------------------------+--------------------------------------------------------------+-------------------------------+\n| Id                                   | Description                                                  | Required version              |\n+--------------------------------------+--------------------------------------------------------------+-------------------------------+\n| activemq                             | Spring JMS support with Apache ActiveMQ 'Classic'.           |                               |\n|                                      |                                                              |                               |\n| actuator                             | Supports built in (or custom) endpoints that let you monitor |                               |\n|                                      | and manage your application - such as application health,    |                               |\n|                                      | metrics, sessions, etc.                                      |                               |\n|                                      |                                                              |                               |\n| webflux                              | Build reactive web applications with Spring WebFlux and      |                               |\n|                                      | Netty.                                                       |                               |\n|                                      |                                                              |                               |\n| websocket                            | Build Servlet-based WebSocket applications with SockJS and   |                               |\n|                                      | STOMP.                                                       |                               |\n|                                      |                                                              |                               |\n| zipkin                               | Enable and expose span and trace IDs to Zipkin.              |                               |\n+--------------------------------------+--------------------------------------------------------------+-------------------------------+\n</code></pre>\n<p>의존성을 추가하려면 <code>--dependencies=actuator,webflux</code>와 같이 옵션을 추가한다.</p>\n<h1 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h1>\n<p>Spring CLI:<br>\n<a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/cli.html\">https://docs.spring.io/spring-boot/docs/current/reference/html/cli.html</a></p>"}},"pageContext":{"id":"623b17b4-5278-5969-8b27-1f7cb204a495","fields__slug":"/spring-framework/","__params":{"fields__slug":"spring-framework"}}},"staticQueryHashes":[],"slicesMap":{}}