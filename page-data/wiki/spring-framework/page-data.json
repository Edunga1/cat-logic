{"componentChunkName":"component---src-components-gatsby-templates-wiki-tsx","path":"/wiki/spring-framework/","result":{"data":{"file":{"fields":{"gitLogs":[{"hash":"5496f8969c5a6f25f3786cdb7d432dafb6d6f0e9","date":"2024-09-26T15:56:20+09:00"},{"hash":"b87915fa2a77d640d288a27e46d8751624b34106","date":"2024-08-06T15:15:07+09:00"},{"hash":"8e12a15b3fb90c7e113ae965d4756e822186b035","date":"2024-05-27T17:23:52+09:00"},{"hash":"6d30f411bc4c41b0fa5635b546db6fd0a24e2fcb","date":"2024-05-25T11:15:28Z"},{"hash":"740cd46d18e3b14559a80ba68978ef5174f8c932","date":"2024-05-24T15:34:23+09:00"},{"hash":"7cbb37abcf761d6711d6a8b1c17e534762567d56","date":"2024-05-22T14:47:31Z"},{"hash":"04d39bb8c2cfb63b5f8bd4907ac14b59a1fac646","date":"2024-05-22T14:19:36Z"},{"hash":"a82bb70aa3a47a845fce61f18422c71f2afc4450","date":"2024-05-22T10:48:14Z"},{"hash":"1b78d63ff4787a2b95603115815341099ddd3f7e","date":"2024-04-14T08:50:01Z"},{"hash":"e5cd103361d8b704ca1a8535a675064ea634935f","date":"2024-04-12T09:20:11+09:00"}]},"childMarkdownRemark":{"headings":[{"value":"Spring framework"}],"fields":{"slug":"/spring-framework/","relatedDocs":[{"slug":"javascript","similarity":0.5476444354},{"slug":"web","similarity":0.6330081728},{"slug":"2016-08-27-gdg-webtech-workshop-nnn","similarity":0.5699011495},{"slug":"crontab","similarity":0.4206492029},{"slug":"gradle","similarity":0.5305799601},{"slug":"idea-methodology","similarity":0.3722751321},{"slug":"podman","similarity":0.334179068},{"slug":"2016-11-16-google-campus-two-things-you-must-keep-in-google-play","similarity":0.5175102594},{"slug":"spring-framework","similarity":1},{"slug":"aws","similarity":0.5403440329},{"slug":"git","similarity":0.4720795844},{"slug":"algorithm-practice","similarity":0.3445937228},{"slug":"docker","similarity":0.5096355469},{"slug":"scp","similarity":0.2983908306},{"slug":"mac-os","similarity":0.4910820444},{"slug":"testing","similarity":0.5513238422},{"slug":"machine-learning","similarity":0.524723277},{"slug":"devops","similarity":0.3821066644},{"slug":"python","similarity":0.46528859},{"slug":"object-oriented-programming","similarity":0.5632635739},{"slug":"linux","similarity":0.3712671087},{"slug":"sfml","similarity":0.4832399666},{"slug":"windows","similarity":0.4669425883},{"slug":"markdown","similarity":0.4371732473},{"slug":"cat-logic","similarity":0.4948014515},{"slug":"vuejs","similarity":0.3365375166},{"slug":"shell","similarity":0.6438030223},{"slug":"html","similarity":0.4422163537},{"slug":"vimenter-2023","similarity":0.5039805477},{"slug":"data-analysis","similarity":0.4639499578},{"slug":"hardware","similarity":0.3565294163},{"slug":"programming-convention","similarity":0.4396618064},{"slug":"webgl","similarity":0.4142186743},{"slug":"sentry","similarity":0.3893821504},{"slug":"valve","similarity":0.3023398264},{"slug":"security","similarity":0.3388255315},{"slug":"reactjs","similarity":0.5619263121},{"slug":"airflow","similarity":0.4106481689},{"slug":"computer-graphics","similarity":0.2624359496},{"slug":"elasticsearch","similarity":0.5138871122},{"slug":"unicode","similarity":0.2623750979},{"slug":"logging","similarity":0.3710308071},{"slug":"tools","similarity":0.6330812284},{"slug":"programming-paradigm","similarity":0.5347872304},{"slug":"system-failures","similarity":0.362346004},{"slug":"company","similarity":0.4289179676},{"slug":"amazon-redshift","similarity":0.2423052705},{"slug":"inspiration","similarity":0.4156672407},{"slug":"gatsbyjs","similarity":0.5398220711},{"slug":"design-pattern","similarity":0.54970425},{"slug":"tmux","similarity":0.5172047743},{"slug":"game","similarity":0.4252910621},{"slug":"kubernetes","similarity":0.4490345686},{"slug":"nodejs","similarity":0.6219800573},{"slug":"continuous-integration-and-deployment","similarity":0.4065339553},{"slug":"rust","similarity":0.6373096128},{"slug":"book","similarity":0.3497942483},{"slug":"jetbrains","similarity":0.5979944196},{"slug":"quotation","similarity":0.3073548144},{"slug":"postgresql","similarity":0.392658997},{"slug":"jira","similarity":0.3608848067},{"slug":"large-language-model","similarity":0.6682286164},{"slug":"swagger","similarity":0.4468498604},{"slug":"architecture","similarity":0.5754921836},{"slug":"godot","similarity":0.4254442963},{"slug":"curl","similarity":0.5119178709},{"slug":"unity3d","similarity":0.4981184129},{"slug":"jargon","similarity":0.5441733592},{"slug":"language-server-protocol","similarity":0.4235174203},{"slug":"clean-code","similarity":0.4442165908},{"slug":"java","similarity":0.6731105739},{"slug":"windows-subsystem-for-linux","similarity":0.4806201401},{"slug":"test-driven-development","similarity":0.3076818486},{"slug":"philosophy","similarity":0.5295491573},{"slug":"github","similarity":0.5180234012},{"slug":"network","similarity":0.442869133},{"slug":"ollama","similarity":0.5887279551},{"slug":"kotlin","similarity":0.672566791},{"slug":"c-sharp","similarity":0.3731395691},{"slug":"angularjs","similarity":0.6077490452},{"slug":"treesitter","similarity":0.4008134344},{"slug":"vim","similarity":0.4705242625},{"slug":"ionic-framework","similarity":0.4519662666},{"slug":"physics","similarity":0.3911312115},{"slug":"html-canvas","similarity":0.3979501429},{"slug":"reverse-engineering","similarity":0.2690757933},{"slug":"space","similarity":0.3874571309},{"slug":"css","similarity":0.3861204453},{"slug":"code-review","similarity":0.446856302},{"slug":"software-development","similarity":0.5367455069},{"slug":"database","similarity":0.5470581375},{"slug":"reactive-extensions","similarity":0.3772055788},{"slug":"redis","similarity":0.3870029606},{"slug":"mail","similarity":0.2638266012},{"slug":"experience-review","similarity":0.3706725538},{"slug":"google-analytics","similarity":0.333451735},{"slug":"data-structure","similarity":0.3568346091},{"slug":"vimwiki","similarity":0.3753499546},{"slug":"embeddings","similarity":0.437060764},{"slug":"추론 애플리케이션","similarity":0.4053197202}]},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#spring-framework\">Spring framework</a></p>\n<ul>\n<li>\n<p><a href=\"#features\">Features</a></p>\n<ul>\n<li>\n<p><a href=\"#requestmapping-request-mapping-narrowing\"><code class=\"language-text\">RequestMapping</code> Request mapping narrowing</a></p>\n<ul>\n<li>\n<p><a href=\"#parameters\">parameters</a></p>\n<ul>\n<li><a href=\"#value-alias-of-path\"><code class=\"language-text\">value</code> (alias of <code class=\"language-text\">path</code>)</a></li>\n<li><a href=\"#params\"><code class=\"language-text\">params</code></a></li>\n<li><a href=\"#headers\"><code class=\"language-text\">headers</code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#test\">Test</a></p>\n<ul>\n<li><a href=\"#transactional-test\">Transactional Test</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#application-properties\">Application Properties</a></p>\n</li>\n<li>\n<p><a href=\"#uri-links\">URI Links</a></p>\n</li>\n<li>\n<p><a href=\"#actuator\">Actuator</a></p>\n<ul>\n<li><a href=\"#httptracehttpexchanges\">httptrace(httpexchanges)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#transaction\">Transaction</a></p>\n<ul>\n<li><a href=\"#%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98-%EB%A1%9C%EA%B7%B8-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0\">트랜잭션 로그 확인하기</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#spring-boot-cli\">Spring Boot CLI</a></p>\n<ul>\n<li><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%83%9D%EC%84%B1\">프로젝트 생성</a></li>\n<li><a href=\"#%EC%98%88%EC%8B%9C\">예시</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#caching\">Caching</a></p>\n<ul>\n<li><a href=\"#caffeine\">Caffeine</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#spring-ai\">Spring AI</a></p>\n<ul>\n<li><a href=\"#spring-ai-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0\">Spring AI 프로젝트 시작하기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#troubleshooting\">Troubleshooting</a></p>\n<ul>\n<li><a href=\"#intellij%EC%97%90%EC%84%9C-properties%EC%9D%98-%EC%84%A0%EC%96%B8%EB%B6%80%EB%A5%BC-%EC%B0%BE%EC%9D%84-%EC%88%98-%EC%97%86%EB%8A%94-%EA%B2%BD%EC%9A%B0\">IntelliJ에서 Properties의 선언부를 찾을 수 없는 경우</a></li>\n<li><a href=\"#webclient-%EC%B2%AB-%EC%9A%94%EC%B2%AD%EC%9D%B4-%EB%8A%90%EB%A6%B0-%EB%AC%B8%EC%A0%9C\">WebClient 첫 요청이 느린 문제</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","html":"<h1 id=\"spring-framework\" style=\"position:relative;\"><a href=\"#spring-framework\" aria-label=\"spring framework permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Spring framework</h1>\n<p>자바 기반 엔터프라이즈 애플리케이션을 개발하기 위한 프레임워크.</p>\n<blockquote>\n<p>A key element of Spring is infrastructural support at the application level: Spring focuses on the \"plumbing\" of enterprise applications so that teams can focus on application-level business logic, without unnecessary ties to specific deployment environments.</p>\n</blockquote>\n<p>특정 배포 환경에 종속되지 않도록 애플리케이션 수준의 인프라 지원을 제공하는 것이 핵심 요소.</p>\n<blockquote>\n<p>Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can \"just run\".</p>\n</blockquote>\n<p>Spring Boot의 목적은 실행만 하면 되는 스프링 기반 애플리케이션을 쉽게 만드는 것이다.</p>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/index.html\">Spring Boot Reference Documentation</a></p>\n<h2 id=\"features\" style=\"position:relative;\"><a href=\"#features\" aria-label=\"features permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Features</h2>\n<h3 id=\"requestmapping-request-mapping-narrowing\" style=\"position:relative;\"><a href=\"#requestmapping-request-mapping-narrowing\" aria-label=\"requestmapping request mapping narrowing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">RequestMapping</code> Request mapping narrowing</h3>\n<p><a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/RequestMapping.html\">RequestMapping - Spring API</a></p>\n<p><code class=\"language-text\">@RequestMapping</code>는 Controller의 매핑 범위를 줄이는 파라미터를 제공한다.</p>\n<p><code class=\"language-text\">@GetMapping</code> <code class=\"language-text\">@PostMapping</code> 사용하여 우선 method로 선택 범위를 좁힐 수 있다.</p>\n<h4 id=\"parameters\" style=\"position:relative;\"><a href=\"#parameters\" aria-label=\"parameters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>parameters</h4>\n<h5 id=\"value-alias-of-path\" style=\"position:relative;\"><a href=\"#value-alias-of-path\" aria-label=\"value alias of path permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">value</code> (alias of <code class=\"language-text\">path</code>)</h5>\n<p>가장 기본적인 인자로, url path를 매핑한다. 기본 값은 빈 문자열이므로 <code class=\"language-text\">/</code> 와 같다.</p>\n<h5 id=\"params\" style=\"position:relative;\"><a href=\"#params\" aria-label=\"params permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">params</code></h5>\n<p>query-string 매핑.</p>\n<ul>\n<li><code class=\"language-text\">myParam=myValue</code> 특정 값인 경우만 매핑한다.</li>\n<li><code class=\"language-text\">myParam!=myValue</code> 위의 반대. 특정 값이 아닌 경우만 매핑한다.</li>\n<li><code class=\"language-text\">!myParam</code> <code class=\"language-text\">myParam</code> 파라미터 자체가 제공된 경우만 매핑한다.</li>\n</ul>\n<h5 id=\"headers\" style=\"position:relative;\"><a href=\"#headers\" aria-label=\"headers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">headers</code></h5>\n<p>header 매핑.</p>\n<p><code class=\"language-text\">@RequestMapping(value = \"/something\", headers = \"content-type=text/*\")</code></p>\n<p>wildcard를 사용한 경우 <code class=\"language-text\">text/plain</code> <code class=\"language-text\">text/html</code> 모두 매핑한다.</p>\n<h3 id=\"test\" style=\"position:relative;\"><a href=\"#test\" aria-label=\"test permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Test</h3>\n<h4 id=\"transactional-test\" style=\"position:relative;\"><a href=\"#transactional-test\" aria-label=\"transactional test permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Transactional Test</h4>\n<p>통합 테스트에서 teardown 시점에 트랜잭션을 롤백하는 방법은 편리해서 자주 사용하는 방법이다.</p>\n<p>SpringBootTest에서는 <code class=\"language-text\">@Transactional</code>을 사용하여 테스트 후에 롤백할 수 있다:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Import</span><span class=\"token punctuation\">(</span>TestClientConfig<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation builtin\">@ExtendWith</span><span class=\"token punctuation\">(</span>SpringExtension<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation builtin\">@AutoConfigureWebTestClient</span>\n<span class=\"token annotation builtin\">@SpringBootTest</span>\n<span class=\"token annotation builtin\">@Transactional</span>\n<span class=\"token keyword\">class</span> UserAddressTest <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation builtin\">@Autowired</span>\n  <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> userAddressRepository<span class=\"token operator\">:</span> UserAddressRepository\n\n  <span class=\"token annotation builtin\">@BeforeEach</span>\n  <span class=\"token keyword\">fun</span> <span class=\"token function\">prepare</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    userAddressRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token function\">UserAddress</span><span class=\"token punctuation\">(</span>uid <span class=\"token operator\">=</span> <span class=\"token number\">1234</span><span class=\"token punctuation\">,</span> address1 <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"서울시\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation builtin\">@Test</span>\n  <span class=\"token keyword\">fun</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>userAddressRepository<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation builtin\">@Test</span>\n  <span class=\"token keyword\">fun</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>userAddressRepository<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>하지만 <code class=\"language-text\">@Nested</code> 클래스에서는 롤백되지 않는다:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Import</span><span class=\"token punctuation\">(</span>TestClientConfig<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation builtin\">@ExtendWith</span><span class=\"token punctuation\">(</span>SpringExtension<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation builtin\">@AutoConfigureWebTestClient</span>\n<span class=\"token annotation builtin\">@SpringBootTest</span>\n<span class=\"token annotation builtin\">@Transactional</span>\n<span class=\"token keyword\">class</span> DescribeShippingAddressDetailAAA <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation builtin\">@Autowired</span>\n  <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> userAddressRepository<span class=\"token operator\">:</span> UserAddressRepository\n\n  <span class=\"token annotation builtin\">@BeforeEach</span>\n  <span class=\"token keyword\">fun</span> <span class=\"token function\">prepare</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    userAddressRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token function\">UserAddress</span><span class=\"token punctuation\">(</span>uid <span class=\"token operator\">=</span> <span class=\"token number\">1234</span><span class=\"token punctuation\">,</span> address1 <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"서울시 구로구 구로동\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation builtin\">@Nested</span>\n  <span class=\"token keyword\">inner</span> <span class=\"token keyword\">class</span> Context <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation builtin\">@Test</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>userAddressRepository<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation builtin\">@Test</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>userAddressRepository<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">@Nested</code>에서 롤백되지 않는 것은 <a href=\"https://stackoverflow.com/questions/44203244/transaction-roll-back-is-not-working-in-test-case-in-nested-class-of-junit5\">예상 가능한 범위</a>라고\nSpring TestContext Framework 개발자가 말한다:</p>\n<blockquote>\n<p>This is to be expected: the Spring TestContext Framework has never supported \"inheritance\" for nested test classes.</p>\n</blockquote>\n<p>다만 이를 지원할 수 있도록 작업한 모양이다.\n<a href=\"https://jira.spring.io/browse/SPR-15366\">SPR-15366</a> 이슈에서 <code class=\"language-text\">@Nested</code>에 대한 처리를 진행했다.\nSpring 5.3의 마일스톤에 포함되어 있다.</p>\n<p>이 작업이 <a href=\"https://docs.spring.io/spring-framework/reference/testing/annotations/integration-junit-jupiter.html#integration-testing-annotations-nestedtestconfiguration\">@NestedTestConfiguration</a>에 대한 내용으로 보인다.</p>\n<h3 id=\"application-properties\" style=\"position:relative;\"><a href=\"#application-properties\" aria-label=\"application properties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Application Properties</h3>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html\">https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html</a></p>\n<p>Spring Boot는 <code class=\"language-text\">application.properties</code>, <code class=\"language-text\">application.yaml</code>, 환경변수, command-line 인자로부터 설정값을 받을 수 있다.</p>\n<p><code class=\"language-text\">@configurationProperties</code>가 설정된 클래스에 매핑해 주는데 <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.external-config.typesafe-configuration-properties.relaxed-binding\">Relaxed Binding</a>을 사용한다.</p>\n<p>매우 관대한 규칙으로 property에 binding 하는데, <a href=\"https://github.com/spring-projects/spring-boot/wiki/Relaxed-Binding-2.0\">Relaxed Binding 2.0 Github Wiki</a>에 그 규칙을 설명하고 있다.</p>\n<p>특수 문자는 제거되고, 모두 소문자로 변환한다.\n따라서 다음 설정은 모두 동일한 것으로 간주된다:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">spring.jpa.database-platform=mysql\nspring.jpa.databasePlatform=mysql\nspring.JPA.database_platform=mysql\nspring.jpa.databaseplatform=mysql</code></pre></div>\n<p>추천하는 프로퍼티 작성 스타일은 kebab-case를 사용하는 것이다:</p>\n<blockquote>\n<p>We recommend that properties are stored in lowercase kabab format. i.e. <code class=\"language-text\">my.property-name=foo</code>.</p>\n</blockquote>\n<p><code class=\"language-text\">@ConfigurationProperties</code> 예시. 생성자를 통해서 주입받는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@ConstructorBinding</span>\n<span class=\"token annotation builtin\">@ConfigurationProperties</span><span class=\"token punctuation\">(</span>prefix <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"foo.bar\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token function\">MyConfig</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> baz<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// ConstructorBinding 사용하려면 EnableConfigurationProperties가 필요</span>\n<span class=\"token annotation builtin\">@EnableConfigurationProperties</span><span class=\"token punctuation\">(</span>MyConfig<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation builtin\">@SpringBootApplication</span>\n<span class=\"token keyword\">class</span> Application</code></pre></div>\n<h3 id=\"uri-links\" style=\"position:relative;\"><a href=\"#uri-links\" aria-label=\"uri links permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>URI Links</h3>\n<p><a href=\"https://docs.spring.io/spring-framework/reference/web/webmvc/mvc-uri-building.html#uri-encoding\">https://docs.spring.io/spring-framework/reference/web/webmvc/mvc-uri-building.html#uri-encoding</a></p>\n<p><code class=\"language-text\">UriComponentsBuilder</code>로 query parameter에 URL을 전달하기 위해 다음과 같이 작성하면 인코딩 문제가 발생한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span>url<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> UriComponentsBuilder\n  <span class=\"token punctuation\">.</span><span class=\"token function\">fromUriString</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"https://example.com\"</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">queryParam</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"url\"</span></span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"https://www.google.com/search?q=%ED%91%B8%EB%B0%94&amp;oq=%ED%91%B8%EB%B0%94&amp;aqs=chrome..69i64j46i340i512j0i512l8.2053j0j1&amp;sourceid=chrome&amp;ie=UTF-8\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// https://example.com?url=https://www.google.com/search?q=%ED%91%B8%EB%B0%94&amp;oq=%ED%91%B8%EB%B0%94&amp;aqs=chrome..69i64j46i340i512j0i512l8.2053j0j1&amp;sourceid=chrome&amp;ie=UTF-8</span></code></pre></div>\n<p><code class=\"language-text\">url=</code> 파라미터의 url에 포함된 slash가 인코딩 되지 않는다.</p>\n<p>다음과 같이 <code class=\"language-text\">build()</code>로 전달하면 올바르게 인코딩한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span>url<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> UriComponentsBuilder\n    <span class=\"token punctuation\">.</span><span class=\"token function\">fromUriString</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"https://example.com\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">queryParam</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"url\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"{url}\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"https://www.google.com/search?q=%ED%91%B8%EB%B0%94&amp;oq=%ED%91%B8%EB%B0%94&amp;aqs=chrome..69i64j46i340i512j0i512l8.2053j0j1&amp;sourceid=chrome&amp;ie=UTF-8\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// https://example.com?url=https%3A%2F%2Fwww.google.com%2Fsearch%3Fq%3D%25ED%2591%25B8%25EB%25B0%2594%26oq%3D%25ED%2591%25B8%25EB%25B0%2594%26aqs%3Dchrome..69i64j46i340i512j0i512l8.2053j0j1%26sourceid%3Dchrome%26ie%3DUTF-8</span></code></pre></div>\n<p><code class=\"language-text\">/</code>, <code class=\"language-text\">=</code>, <code class=\"language-text\">&amp;</code> 등 URI 요소를 인코딩한 것을 볼 수 있다.</p>\n<p>placeholder<code class=\"language-text\">{url}</code>는 사용하지 않았고, build로 전달하는 순서대로 replace 한다.</p>\n<h3 id=\"actuator\" style=\"position:relative;\"><a href=\"#actuator\" aria-label=\"actuator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Actuator</h3>\n<p>Spring Boot는 Actuator로 운영 환경에서 사용할 수 있는 모니터링 및 관리 도구를 제공한다.</p>\n<ul>\n<li>2.1.0 문서: <a href=\"https://docs.spring.io/spring-boot/docs/2.1.0.M1/reference/html/production-ready.html\">https://docs.spring.io/spring-boot/docs/2.1.0.M1/reference/html/production-ready.html</a></li>\n<li>3.2.x 문서: <a href=\"https://docs.spring.io/spring-boot/docs/3.2.x/reference/html/actuator.html#actuator\">https://docs.spring.io/spring-boot/docs/3.2.x/reference/html/actuator.html#actuator</a></li>\n</ul>\n<p>문서 제목부터 <em>Production-ready Features</em>로 안정감이 느껴진다.</p>\n<p>기본적으로 <code class=\"language-text\">/actuator</code>에서 현재 제공하고 있는 도구 목록을 보여주는데, json으로 제공된다:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"_links\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"self\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"href\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://localhost:5001/actuator\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"templated\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"beans\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"href\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://localhost:5001/actuator/beans\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"templated\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"health\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"href\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://localhost:5001/actuator/health\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"templated\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"health-path\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"href\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://localhost:5001/actuator/health/{*path}\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"templated\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"httptrace\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"href\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://localhost:5001/actuator/httptrace\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"templated\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"httptracehttpexchanges\" style=\"position:relative;\"><a href=\"#httptracehttpexchanges\" aria-label=\"httptracehttpexchanges permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>httptrace(httpexchanges)</h4>\n<p>httptrace는 최근 HTTP 요청 내역을 관리하는 기능이다. Spring Boot 3 부터는 <code class=\"language-text\">httpexchanges</code>라 부른다.</p>\n<ul>\n<li>2.1.0: <a href=\"https://docs.spring.io/spring-boot/docs/2.1.0.M1/reference/html/production-ready-http-tracing.html\">https://docs.spring.io/spring-boot/docs/2.1.0.M1/reference/html/production-ready-http-tracing.html</a></li>\n<li>3.2.x: <a href=\"https://docs.spring.io/spring-boot/docs/3.2.x/reference/html/actuator.html#actuator.http-exchanges\">https://docs.spring.io/spring-boot/docs/3.2.x/reference/html/actuator.html#actuator.http-exchanges</a></li>\n</ul>\n<p>기능 활성화를 위해서 버전에 따라 설정이 상이하다.</p>\n<p>2.7.5 기준으로 <code class=\"language-text\">management.endpoints.web.exposure.include=httptrace</code>를 설정 추가하고, <code class=\"language-text\">HttpTraceRepository</code> Bean을 구현하면 활성화 할 수 있다.<br>\nBean 구현하는 것은 <a href=\"https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.2.0-M3-Release-Notes#actuator-http-trace-and-auditing-are-disabled-by-default\">2.2.0 M3 부터 변경</a>되었는데, 이전 버전에서는 구현없이 가능했던 모양.</p>\n<p>Spring Boot 3부터는 명칭 변경으로 <code class=\"language-text\">management.endpoints.web.exposure.include=httpexchanges</code>로 변경되었다.\nBean 인터페이스 이름도 <code class=\"language-text\">HttpExchangeRepository</code>로 변경되었다.</p>\n<p>어느 버전이든 <code class=\"language-text\">HttpTraceRepository</code>를 in-memory 버전 저장소로 간편하게 구현할 수 있다.<br>\n다음은 Spring Boot 2 기준 예시 코드:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Bean</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">httpTraceRepository</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> HttpTraceRepository <span class=\"token operator\">=</span> <span class=\"token function\">InMemoryHttpTraceRepository</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>내 경우, 운영에서는 <code class=\"language-text\">health</code> 말고는 Actuator 기능을 비활성화했기 때문에 Bean 생성 조건에 property 확인을 추가했다:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Bean</span>\n<span class=\"token annotation builtin\">@ConditionalOnExpression</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"'\\${management.endpoints.web.exposure.include}'.contains('httptrace')\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">httpTraceRepository</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> HttpTraceRepository <span class=\"token operator\">=</span> <span class=\"token function\">InMemoryHttpTraceRepository</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>서버 시작 후 <code class=\"language-text\">/actuator/httptrace</code>에 접속하면 json으로 제공한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"traces\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"timestamp\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2023-12-27T08:24:56.956Z\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"principal\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"session\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"request\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"method\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"uri\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://localhost:5001/actuator/\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"headers\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"sec-fetch-mode\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"navigate\"</span>\n          <span class=\"token punctuation\">]</span>\n          <span class=\"token comment\">// ... 생략</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"remoteAddress\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"response\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"headers\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"Keep-Alive\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"timeout=60\"</span>\n          <span class=\"token punctuation\">]</span>\n          <span class=\"token comment\">// ... 생략</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"timeTaken\"</span><span class=\"token operator\">:</span> <span class=\"token number\">27</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>actuator 페이지 접근을 위해 기록된 것을 볼 수 있다.\n최근 요청의 헤더 정보, 응답 코드, URL 등을 알 수 있다.</p>\n<h3 id=\"transaction\" style=\"position:relative;\"><a href=\"#transaction\" aria-label=\"transaction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Transaction</h3>\n<h4 id=\"트랜잭션-로그-확인하기\" style=\"position:relative;\"><a href=\"#%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98-%EB%A1%9C%EA%B7%B8-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0\" aria-label=\"트랜잭션 로그 확인하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>트랜잭션 로그 확인하기</h4>\n<p><code class=\"language-text\">org.springframework.transaction</code>의 로그 레벨을 log4j, slf4j 기준 <code class=\"language-text\">TRACE</code>로 조정해야 한다: <code class=\"language-text\">org.springframework.transaction: TRACE</code></p>\n<p>그러면 다음과 같이 로그가 출력된다:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">2024-05-27T17:05:03.693+09:00 TRACE 19245 --- [-1 @coroutine#3] o.s.t.i.TransactionInterceptor           : Getting transaction for [com.example.MyService.process]\n\n\n2024-05-27T17:05:03.694+09:00 TRACE 19245 --- [-1 @coroutine#3] o.s.t.i.TransactionInterceptor           : Getting transaction for [org.springframework.data.jpa.repository.support.SimpleJpaRepository.deleteAllByIdInBatch]\n\n2024-05-27T17:05:03.708+09:00 TRACE 19245 --- [-1 @coroutine#3] o.s.t.i.TransactionInterceptor           : Completing tran2024-05-27T17:05:03.708+09:00 TRACE 19245 --- [-1 @coroutine#3] o.s.t.i.TransactionInterceptor           : Completing transaction for [org.springframework.data.jpa.repository.support.SimpleJpaRepository.deleteAllByIdInBatch]\n\n2024-05-27T17:05:03.709+09:00 TRACE 19245 --- [-1 @coroutine#3] o.s.t.i.TransactionInterceptor           : Getting transaction for [org.springframework.data.jpa.repository.support.SimpleJpaRepository.saveAll]\n\n2024-05-27T17:05:03.712+09:00 TRACE 19245 --- [-1 @coroutine#3] o.s.t.i.TransactionInterceptor           : Completing transaction for [org.springframework.data.jpa.repository.support.SimpleJpaRepository.saveAll]\n\n\n2024-05-27T17:05:03.712+09:00 TRACE 19245 --- [-1 @coroutine#3] o.s.t.i.TransactionInterceptor           : Completing transaction for [com.example.MyService.process]saction for [org.springframework.data.jpa.repository.support.SimpleJpaRepository.deleteAllByIdInBatch]</code></pre></div>\n<p>트랜잭션의 시작은 <code class=\"language-text\">Getting transaction for</code>로 시작하고, 종료는 <code class=\"language-text\">Completing transaction for</code>로 끝난다.</p>\n<p>기본적으로 쿼리 전후에 트랜잭션의 시작과 종료가 발생하지만(위 예제에서는 <code class=\"language-text\">SimpleJpaRepository</code>의 메서드 호출로 시작과 종료가 발생),\n<code class=\"language-text\">@Transactional</code>을 통한 명시적인 트랜잭션 사용 시, 해당 메서드 전후로 트랜잭션 시작과 종료가 발생한다(위 예제에서는 <code class=\"language-text\">MyService.process</code>).</p>\n<p>로그 대신 코드로 확인하고 싶다면 <code class=\"language-text\">TransactionSynchronizationManager.isActualTransactionActive()</code>를 사용한다. 전역 객체이므로 디버그 모드에서도 별도 주입 없이 사용할 수 있어서 간편하다.</p>\n<h2 id=\"spring-boot-cli\" style=\"position:relative;\"><a href=\"#spring-boot-cli\" aria-label=\"spring boot cli permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Spring Boot CLI</h2>\n<p>새 Spring 프로젝트를 빠르게 시작할 수 있는 도구.\n프로젝트는 Spring Boot를 기반으로 한다.</p>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/cli.html\">https://docs.spring.io/spring-boot/docs/current/reference/html/cli.html</a></p>\n<p>Homebrew로 설치:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ brew tap spring-io/tap\n$ brew <span class=\"token function\">install</span> spring-boot</code></pre></div>\n<ul>\n<li><code class=\"language-text\">spring help &lt;command></code>: 명령어 도움말을 확인할 수 있다.</li>\n<li><code class=\"language-text\">spring init --list</code>: 사용 가능한 프로젝트 유형 목록을 확인할 수 있다.</li>\n</ul>\n<h3 id=\"프로젝트-생성\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%83%9D%EC%84%B1\" aria-label=\"프로젝트 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로젝트 생성</h3>\n<p>Kotlin + Spring Boot + Gradle 프로젝트를 빠르게 생성 해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">spring init <span class=\"token parameter variable\">--language</span> kotlin <span class=\"token parameter variable\">--type</span> gradle-project-kotlin <span class=\"token parameter variable\">--extract</span> demo</code></pre></div>\n<p><code class=\"language-text\">demo</code> 디렉토리와 함께 프로젝트가 생성된다.<br>\n<code class=\"language-text\">--extract</code> 옵션을 생략하면 zip 파일로 생성된다.</p>\n<p>Application 코드를 생성해 주지만 <code class=\"language-text\">ApplicationRunner</code>로 간단하게 hello world 출력해보자:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@SpringBootApplication</span>\n<span class=\"token keyword\">class</span> DemoApplication<span class=\"token operator\">:</span> ApplicationRunner <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> ApplicationArguments<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Hello, world!\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    runApplication<span class=\"token operator\">&lt;</span>DemoApplication<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">spring init --list</code>의 가장 마지막 부분에 설정 기본값이 표시된다:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Parameters\n+-------------+------------------------------------------+------------------------------+\n<span class=\"token operator\">|</span> Id          <span class=\"token operator\">|</span> Description                              <span class=\"token operator\">|</span> Default value                <span class=\"token operator\">|</span>\n+-------------+------------------------------------------+------------------------------+\n<span class=\"token operator\">|</span> artifactId  <span class=\"token operator\">|</span> project coordinates <span class=\"token punctuation\">(</span>infer archive name<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> demo                         <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> bootVersion <span class=\"token operator\">|</span> spring boot version                      <span class=\"token operator\">|</span> <span class=\"token number\">3.0</span>.4                        <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> description <span class=\"token operator\">|</span> project description                      <span class=\"token operator\">|</span> Demo project <span class=\"token keyword\">for</span> Spring Boot <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> groupId     <span class=\"token operator\">|</span> project coordinates                      <span class=\"token operator\">|</span> com.example                  <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> javaVersion <span class=\"token operator\">|</span> language level                           <span class=\"token operator\">|</span> <span class=\"token number\">17</span>                           <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> language    <span class=\"token operator\">|</span> programming language                     <span class=\"token operator\">|</span> <span class=\"token function\">java</span>                         <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> name        <span class=\"token operator\">|</span> project name <span class=\"token punctuation\">(</span>infer application name<span class=\"token punctuation\">)</span>    <span class=\"token operator\">|</span> demo                         <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> packageName <span class=\"token operator\">|</span> root package                             <span class=\"token operator\">|</span> com.example.demo             <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> packaging   <span class=\"token operator\">|</span> project packaging                        <span class=\"token operator\">|</span> jar                          <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> <span class=\"token builtin class-name\">type</span>        <span class=\"token operator\">|</span> project <span class=\"token builtin class-name\">type</span>                             <span class=\"token operator\">|</span> gradle-project               <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> version     <span class=\"token operator\">|</span> project version                          <span class=\"token operator\">|</span> <span class=\"token number\">0.0</span>.1-SNAPSHOT               <span class=\"token operator\">|</span>\n+-------------+------------------------------------------+------------------------------+</code></pre></div>\n<p><code class=\"language-text\">--type</code> 옵션에 사용 할 프로젝트 유형 목록도 표시된다:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Project types <span class=\"token punctuation\">(</span>* denotes the default<span class=\"token punctuation\">)</span>\n+-----------------------+--------------------------------------------------------------+--------------------------------------------+\n<span class=\"token operator\">|</span> Id                    <span class=\"token operator\">|</span> Description                                                  <span class=\"token operator\">|</span> Tags                                       <span class=\"token operator\">|</span>\n+-----------------------+--------------------------------------------------------------+--------------------------------------------+\n<span class=\"token operator\">|</span> gradle-build          <span class=\"token operator\">|</span> Generate a Gradle build file.                                <span class=\"token operator\">|</span> build:gradle,format:build                  <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>                       <span class=\"token operator\">|</span>                                                              <span class=\"token operator\">|</span>                                            <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> gradle-project *      <span class=\"token operator\">|</span> Generate a Gradle based project archive using the Groovy     <span class=\"token operator\">|</span> build:gradle,dialect:groovy,format:project <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>                       <span class=\"token operator\">|</span> DSL.                                                         <span class=\"token operator\">|</span>                                            <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>                       <span class=\"token operator\">|</span>                                                              <span class=\"token operator\">|</span>                                            <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> gradle-project-kotlin <span class=\"token operator\">|</span> Generate a Gradle based project archive using the Kotlin     <span class=\"token operator\">|</span> build:gradle,dialect:kotlin,format:project <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>                       <span class=\"token operator\">|</span> DSL.                                                         <span class=\"token operator\">|</span>                                            <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>                       <span class=\"token operator\">|</span>                                                              <span class=\"token operator\">|</span>                                            <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> maven-build           <span class=\"token operator\">|</span> Generate a Maven pom.xml.                                    <span class=\"token operator\">|</span> build:maven,format:build                   <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>                       <span class=\"token operator\">|</span>                                                              <span class=\"token operator\">|</span>                                            <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> maven-project         <span class=\"token operator\">|</span> Generate a Maven based project archive.                      <span class=\"token operator\">|</span> build:maven,format:project                 <span class=\"token operator\">|</span>\n+-----------------------+--------------------------------------------------------------+--------------------------------------------+</code></pre></div>\n<p>포함할 의존성도 선택할 수 있는데, 간단한 설명이 포함되어 있어서 유용하다:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Supported dependencies\n+--------------------------------------+--------------------------------------------------------------+-------------------------------+\n<span class=\"token operator\">|</span> Id                                   <span class=\"token operator\">|</span> Description                                                  <span class=\"token operator\">|</span> Required version              <span class=\"token operator\">|</span>\n+--------------------------------------+--------------------------------------------------------------+-------------------------------+\n<span class=\"token operator\">|</span> activemq                             <span class=\"token operator\">|</span> Spring JMS support with Apache ActiveMQ <span class=\"token string\">'Classic'</span><span class=\"token builtin class-name\">.</span>           <span class=\"token operator\">|</span>                               <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>                                      <span class=\"token operator\">|</span>                                                              <span class=\"token operator\">|</span>                               <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> actuator                             <span class=\"token operator\">|</span> Supports built <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span>or custom<span class=\"token punctuation\">)</span> endpoints that <span class=\"token builtin class-name\">let</span> you monitor <span class=\"token operator\">|</span>                               <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>                                      <span class=\"token operator\">|</span> and manage your application - such as application health,    <span class=\"token operator\">|</span>                               <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>                                      <span class=\"token operator\">|</span> metrics, sessions, etc.                                      <span class=\"token operator\">|</span>                               <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>                                      <span class=\"token operator\">|</span>                                                              <span class=\"token operator\">|</span>                               <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> webflux                              <span class=\"token operator\">|</span> Build reactive web applications with Spring WebFlux and      <span class=\"token operator\">|</span>                               <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>                                      <span class=\"token operator\">|</span> Netty.                                                       <span class=\"token operator\">|</span>                               <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>                                      <span class=\"token operator\">|</span>                                                              <span class=\"token operator\">|</span>                               <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> websocket                            <span class=\"token operator\">|</span> Build Servlet-based WebSocket applications with SockJS and   <span class=\"token operator\">|</span>                               <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>                                      <span class=\"token operator\">|</span> STOMP.                                                       <span class=\"token operator\">|</span>                               <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>                                      <span class=\"token operator\">|</span>                                                              <span class=\"token operator\">|</span>                               <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> zipkin                               <span class=\"token operator\">|</span> Enable and expose span and trace IDs to Zipkin.              <span class=\"token operator\">|</span>                               <span class=\"token operator\">|</span>\n+--------------------------------------+--------------------------------------------------------------+-------------------------------+</code></pre></div>\n<p>의존성을 추가하려면 <code class=\"language-text\">--dependencies=actuator,webflux</code>와 같이 사용한다.</p>\n<h3 id=\"예시\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C\" aria-label=\"예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시</h3>\n<p>설정 없이, 바로 시작할 수 있는 웹 서버:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ spring init <span class=\"token parameter variable\">--language</span> kotlin <span class=\"token parameter variable\">--type</span> gradle-project-kotlin <span class=\"token parameter variable\">-d</span> web <span class=\"token parameter variable\">--extract</span> spring-web</code></pre></div>\n<p><code class=\"language-text\">spring-web</code> 폴더로 이동 후 <code class=\"language-text\">./gradlew bootRun</code>으로 웹 서버를 시작할 수 있다.\n포트 설정이 필요하다면 <code class=\"language-text\">./gradlew bootRun --args='--server.port=8888'</code>.</p>\n<p>JPA 추가하여 kotlin + gradle(kts) + web + jpa:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ spring init <span class=\"token parameter variable\">--language</span> kotlin <span class=\"token parameter variable\">--type</span> gradle-project-kotlin <span class=\"token parameter variable\">-d</span> data-jpa,web <span class=\"token parameter variable\">--extract</span> spring-kotlin-web</code></pre></div>\n<p>여기에 mysql jdbc connector를 추가하면:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ spring init <span class=\"token parameter variable\">--language</span> kotlin <span class=\"token parameter variable\">--type</span> gradle-project-kotlin <span class=\"token parameter variable\">-d</span> data-jpa,web,mysql <span class=\"token parameter variable\">--extract</span> spring-kotlin-web-mysql</code></pre></div>\n<p>좀 더 운영을 생각한다면 actuator도 추가할 수 있겠다:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ spring init <span class=\"token parameter variable\">--language</span> kotlin <span class=\"token parameter variable\">--type</span> gradle-project-kotlin <span class=\"token parameter variable\">-d</span> data-jpa,web,mysql,actuator <span class=\"token parameter variable\">--extract</span> spring-kotlin-web</code></pre></div>\n<h2 id=\"caching\" style=\"position:relative;\"><a href=\"#caching\" aria-label=\"caching permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Caching</h2>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/2.0.x/reference/html/boot-features-caching.html\">https://docs.spring.io/spring-boot/docs/2.0.x/reference/html/boot-features-caching.html</a></p>\n<blockquote>\n<p>Use the spring-boot-starter-cache “Starter” to quickly add basic caching dependencies. The starter brings in spring-context-support.</p>\n</blockquote>\n<p><code class=\"language-text\">spring-boot-starter-cache</code>를 사용하면 간단한 설정으로 캐싱 모듈을 사용할 수 있는 거 같다.\n일단 내 경우에는 간단한 형태는 아니고, 함수마다 각기 다른 캐시 만료 정책을 적용하기 위해서 <code class=\"language-text\">CacheManager</code>를 직접 구성해야 했고,\n직접 구성하니 <code class=\"language-text\">spring-boot-starter-cache</code>는 필요하지 않았다.</p>\n<h3 id=\"caffeine\" style=\"position:relative;\"><a href=\"#caffeine\" aria-label=\"caffeine permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Caffeine</h3>\n<p>로컬 캐시 용도로 Caffeine만 써봤다.\n<a href=\"https://github.com/ben-manes/caffeine/wiki/Benchmarks\">Caffeine에서 제공하는 벤치마크</a>로는 가장 우수하다.</p>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/dependency-versions.html#:~:text=2.15.2-,com.github.ben%2Dmanes.caffeine,-caffeine\">spring managed dependency</a>이므로 버전을 직접 지정할 필요는 없다.</p>\n<blockquote>\n<p>If Caffeine is present, a CaffeineCacheManager (provided by the spring-boot-starter-cache “Starter”)</p>\n</blockquote>\n<p><code class=\"language-text\">spring-boot-starter-cache</code>를 사용하면 <code class=\"language-text\">CaffeineCacheManager</code>를 알아서 만들어 준다고 한다.\n내 경우에는 직접 <code class=\"language-text\">CacheManager</code> 구성해서 <code class=\"language-text\">spring-boot-starter-cache</code>가 필요하지 않았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@EnableCaching</span>\n<span class=\"token annotation builtin\">@Configuration</span>\n<span class=\"token keyword\">class</span> CacheConfig <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation builtin\">@Bean</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">cacheManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> CacheManager <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> caches <span class=\"token operator\">=</span> CacheType<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">CaffeineCache</span><span class=\"token punctuation\">(</span>\n                it<span class=\"token punctuation\">.</span>cacheName<span class=\"token punctuation\">,</span>\n                Caffeine<span class=\"token punctuation\">.</span><span class=\"token function\">newBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">expireAfterWrite</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span>duration<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">SimpleCacheManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">also</span> <span class=\"token punctuation\">{</span>\n            it<span class=\"token punctuation\">.</span><span class=\"token function\">setCaches</span><span class=\"token punctuation\">(</span>caches<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">enum</span> <span class=\"token keyword\">class</span> <span class=\"token function\">CacheType</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">val</span> cacheName<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">val</span> duration<span class=\"token operator\">:</span> Duration<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">CACHE_POLICY1</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"policy1\"</span></span><span class=\"token punctuation\">,</span> Duration<span class=\"token punctuation\">.</span><span class=\"token function\">ofMinutes</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">CACHE_POLICY2</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"policy2\"</span></span><span class=\"token punctuation\">,</span> Duration<span class=\"token punctuation\">.</span><span class=\"token function\">ofMinutes</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>enum으로 만료 시간에 다른 캐시 정책을 여러개 만들었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Cacheable</span><span class=\"token punctuation\">(</span>cacheNames <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"policy1\"</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">getItems</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Set<span class=\"token operator\">&lt;</span>Items<span class=\"token operator\">></span> <span class=\"token operator\">=</span> repository<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>사용을 위해선 캐시 이름을 맞춰서 사용한다.\n캐시 이름이 변경되면 캐시 선언 부분과 사용 부분 모두 수정하는데, 이는 캐시 이름을 <code class=\"language-text\">const val</code>로 만들어서 처리할 수 있다.</p>\n<h2 id=\"spring-ai\" style=\"position:relative;\"><a href=\"#spring-ai\" aria-label=\"spring ai permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Spring AI</h2>\n<p>Spring AI 프로젝트는 다양한 언어 모델과 플랫폼의 통합을 제공한다.</p>\n<ul>\n<li>개요: <a href=\"https://spring.io/projects/spring-ai\">https://spring.io/projects/spring-ai</a></li>\n<li>시작하기: <a href=\"https://docs.spring.io/spring-ai/reference/getting-started.html\">https://docs.spring.io/spring-ai/reference/getting-started.html</a></li>\n</ul>\n<p>2024년 5월 아직 정식 릴리즈가 아닌 Milestone Release 단계이다.</p>\n<p>OpenAI Key로 ChatGPT를 연동하거나, Ollama로 로컬 LLM을 다운로드 받아서 연결하거나 이외에도 Google Gemini, 임베딩 모델, 이미지 생성 등 다양한\n플랫폼과 모델을 사용할 수 있다.</p>\n<h3 id=\"spring-ai-프로젝트-시작하기\" style=\"position:relative;\"><a href=\"#spring-ai-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0\" aria-label=\"spring ai 프로젝트 시작하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Spring AI 프로젝트 시작하기</h3>\n<p>이 시작 프로젝트는 <a href=\"https://github.com/Edunga1/spring-ai-web-start\">https://github.com/Edunga1/spring-ai-web-start</a> 에 올려두었다.</p>\n<hr>\n<p>Spring CLI로 빠르게 시작해 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ spring init <span class=\"token parameter variable\">--language</span> kotlin <span class=\"token parameter variable\">--type</span> gradle-project-kotlin <span class=\"token parameter variable\">-d</span> spring-ai-ollama,web <span class=\"token parameter variable\">--extract</span> spring-ai-start</code></pre></div>\n<p>kotlin, gradle + kotlin dsl 그리고 <code class=\"language-text\">spring-ai-ollama</code> 의존성을 가진 프로젝트를 생성한다.\n알아서 milestone 저장소를 추가해 준다.</p>\n<p><a href=\"../large-language-model\">ollama</a>는 AI 모델을 로컬에서 쉽게 사용하도록 도와주는 도구다.\n무료로 사용할 수 있으므로 이 프로젝트에서 비용 발생하지 않는다.</p>\n<p>application.properties에 Ollama host와 사용할 모델을 설정한다:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">spring.application.name=demo\nspring.ai.ollama.base-url=http://localhost:11434\nspring.ai.ollama.chat.options.model=llama3</code></pre></div>\n<p>간단한 컨트롤러를 작성하자:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>springaiwebstart\n\n<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>ai<span class=\"token punctuation\">.</span>ollama<span class=\"token punctuation\">.</span>OllamaChatClient\n<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span>GetMapping\n<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span>RestController\n\n<span class=\"token annotation builtin\">@RestController</span>\n<span class=\"token keyword\">class</span> <span class=\"token function\">ChatController</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> client<span class=\"token operator\">:</span> OllamaChatClient<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation builtin\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"/chat\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">chat</span><span class=\"token punctuation\">(</span>q<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">mapOf</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string-literal singleline\"><span class=\"token string\">\"response\"</span></span> <span class=\"token keyword\">to</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이제 <code class=\"language-text\">ollama</code>로 모델만 서빙하면 된다. docker로 띄우면 매우 간단해진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># ollama 시작</span>\n$ <span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">-v</span> ollama:/root/.ollama <span class=\"token parameter variable\">-p</span> <span class=\"token number\">11434</span>:11434 <span class=\"token parameter variable\">--name</span> ollama ollama/ollama serve\n\n<span class=\"token comment\"># llama3 모델 다운로드</span>\n$ <span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> ollama ollama pull llama3</code></pre></div>\n<p>모델 다운로드가 꽤 오래 걸린다. 완료되면 프로젝트를 시작하고 간단한 쿼리를 날려보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> http://localhost:8080/chat<span class=\"token punctuation\">\\</span>?q<span class=\"token punctuation\">\\</span><span class=\"token operator\">=</span>hello\n<span class=\"token punctuation\">{</span><span class=\"token string\">\"response\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"Hello! It's nice to meet you. Is there something I can help you with, or would you like to chat?\"</span><span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"troubleshooting\" style=\"position:relative;\"><a href=\"#troubleshooting\" aria-label=\"troubleshooting permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Troubleshooting</h2>\n<h3 id=\"intellij에서-properties의-선언부를-찾을-수-없는-경우\" style=\"position:relative;\"><a href=\"#intellij%EC%97%90%EC%84%9C-properties%EC%9D%98-%EC%84%A0%EC%96%B8%EB%B6%80%EB%A5%BC-%EC%B0%BE%EC%9D%84-%EC%88%98-%EC%97%86%EB%8A%94-%EA%B2%BD%EC%9A%B0\" aria-label=\"intellij에서 properties의 선언부를 찾을 수 없는 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>IntelliJ에서 Properties의 선언부를 찾을 수 없는 경우</h3>\n<p><code class=\"language-text\">@ConfigurationProperties(prefix=\"foo.bar\")</code>가 선언된 클래스가 있음에도 <code class=\"language-text\">application.yml</code>에서 선언부를 찾지 못하고,\n<code class=\"language-text\">Cannot resolve configuration property 'foo.bar'</code> 경고가 출력되는 문제. 서버 시작은 잘 된다.</p>\n<p><code class=\"language-text\">org.springframework.boot:spring-boot-configuration-processor</code> 의존성을 추가하고, <code class=\"language-text\">gradle compileJava</code>를 실행하면 된다.</p>\n<p>gradle(kts) 예시:</p>\n<div class=\"gatsby-highlight\" data-language=\"gradle\"><pre class=\"language-gradle\"><code class=\"language-gradle\"><span class=\"token function\">kapt</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">\"org.springframework.boot:spring-boot-configuration-processor\"</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"webclient-첫-요청이-느린-문제\" style=\"position:relative;\"><a href=\"#webclient-%EC%B2%AB-%EC%9A%94%EC%B2%AD%EC%9D%B4-%EB%8A%90%EB%A6%B0-%EB%AC%B8%EC%A0%9C\" aria-label=\"webclient 첫 요청이 느린 문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WebClient 첫 요청이 느린 문제</h3>\n<p>서버 시작 직후 API를 호출하는데 너무 느려서 타임아웃이 된다면, warmup을 고려하자.\nnetty http client의 warmup과 사용자 호출이 진입되기 전에 의존 API를 한 번씩 호출해 두는 것으로 사용자의 요청에서의 지연을 줄일 수 있다.</p>\n<p><a href=\"https://projectreactor.io/docs/netty/release/reference/index.html#_eager_initialization_4\">https://projectreactor.io/docs/netty/release/reference/index.html#_eager_initialization_4</a></p>\n<ol>\n<li>warmup으로 event loop pool을 준비시키고</li>\n<li>서버 시작 시 임의로 호출하여 모든 사용자 요청은 첫 요청 이후가 되도록 한다.</li>\n</ol>\n<p>2의 임의 호출은 해당 서버의 health check가 되는 API로 했다.</p>\n<p>문서에서 설명하는 첫 요청에서 시간을 소요하는 요소는 다음과 같다:</p>\n<ol>\n<li>event loop group</li>\n<li>host name resolver</li>\n<li>내장된 transport 라이브러리들</li>\n<li>보안과 관련된 라이브러리들</li>\n</ol>"}},"allMarkdownRemark":{"nodes":[{"headings":[{"value":"Airflow"}],"fields":{"slug":"/airflow/"}},{"headings":[{"value":"2016-11-16 캠퍼스 스타트업 스쿨의 \"구글 플레이에서 꼭 지켜야 할 두 가지\""}],"fields":{"slug":"/2016-11-16-google-campus-two-things-you-must-keep-in-google-play/"}},{"headings":[{"value":"2016-08-27 GDG WebTech Workshop \"측정하는 놈, 로딩하는 놈, 그리는 놈\""}],"fields":{"slug":"/2016-08-27-gdg-webtech-workshop-nnn/"}},{"headings":[{"value":"알고리즘 연습"}],"fields":{"slug":"/algorithm-practice/"}},{"headings":[{"value":"Amazon Redshift"}],"fields":{"slug":"/amazon-redshift/"}},{"headings":[{"value":"Angular JS"}],"fields":{"slug":"/angularjs/"}},{"headings":[{"value":"Architecture"}],"fields":{"slug":"/architecture/"}},{"headings":[{"value":"책"}],"fields":{"slug":"/book/"}},{"headings":[{"value":"Amazon Web Service"}],"fields":{"slug":"/aws/"}},{"headings":[{"value":"The Cat Logic"}],"fields":{"slug":"/cat-logic/"}},{"headings":[{"value":"C# Programming Language"}],"fields":{"slug":"/c-sharp/"}},{"headings":[{"value":"코드 리뷰"}],"fields":{"slug":"/code-review/"}},{"headings":[{"value":"크롬 브라우저"}],"fields":{"slug":"/chrome-browser/"}},{"headings":[{"value":"Clean Code"}],"fields":{"slug":"/clean-code/"}},{"headings":[{"value":"회사"}],"fields":{"slug":"/company/"}},{"headings":[{"value":"Computer Graphics"}],"fields":{"slug":"/computer-graphics/"}},{"headings":[{"value":"CI/CD"}],"fields":{"slug":"/continuous-integration-and-deployment/"}},{"headings":[{"value":"CSS"}],"fields":{"slug":"/css/"}},{"headings":[{"value":"crontab"}],"fields":{"slug":"/crontab/"}},{"headings":[{"value":"CURL"}],"fields":{"slug":"/curl/"}},{"headings":[{"value":"Database"}],"fields":{"slug":"/database/"}},{"headings":[{"value":"자료구조"}],"fields":{"slug":"/data-structure/"}},{"headings":[{"value":"Data analysis"}],"fields":{"slug":"/data-analysis/"}},{"headings":[{"value":"Design Pattern"}],"fields":{"slug":"/design-pattern/"}},{"headings":[{"value":"DevOps"}],"fields":{"slug":"/devops/"}},{"headings":[{"value":"Docker"}],"fields":{"slug":"/docker/"}},{"headings":[{"value":"Elasticsearch"}],"fields":{"slug":"/elasticsearch/"}},{"headings":[{"value":"임베딩"}],"fields":{"slug":"/embeddings/"}},{"headings":[{"value":"세미나 및 컨퍼런스 후기"}],"fields":{"slug":"/experience-review/"}},{"headings":[{"value":"Game"}],"fields":{"slug":"/game/"}},{"headings":[{"value":"GatsbyJS"}],"fields":{"slug":"/gatsbyjs/"}},{"headings":[{"value":"GitHub"}],"fields":{"slug":"/github/"}},{"headings":[{"value":"Git"}],"fields":{"slug":"/git/"}},{"headings":[{"value":"Godot Engine"}],"fields":{"slug":"/godot/"}},{"headings":[{"value":"Google Analytics"}],"fields":{"slug":"/google-analytics/"}},{"headings":[{"value":"Gradle"}],"fields":{"slug":"/gradle/"}},{"headings":[{"value":"Hardware"}],"fields":{"slug":"/hardware/"}},{"headings":[{"value":"아이디어 방법론"}],"fields":{"slug":"/idea-methodology/"}},{"headings":[{"value":"HTML"}],"fields":{"slug":"/html/"}},{"headings":[{"value":"Canvas"}],"fields":{"slug":"/html-canvas/"}},{"headings":[{"value":"영감을 주는 것"}],"fields":{"slug":"/inspiration/"}},{"headings":[{"value":"개발 용어"}],"fields":{"slug":"/jargon/"}},{"headings":[{"value":"Ionic Framework"}],"fields":{"slug":"/ionic-framework/"}},{"headings":[{"value":"Javascript & Typescript Programming Language"}],"fields":{"slug":"/javascript/"}},{"headings":[{"value":"Java Programming Language"}],"fields":{"slug":"/java/"}},{"headings":[{"value":"JetBrains"}],"fields":{"slug":"/jetbrains/"}},{"headings":[{"value":"Jira"}],"fields":{"slug":"/jira/"}},{"headings":[{"value":"Kotlin Programming Language"}],"fields":{"slug":"/kotlin/"}},{"headings":[{"value":"Kubernetes"}],"fields":{"slug":"/kubernetes/"}},{"headings":[{"value":"Language Server Protocol"}],"fields":{"slug":"/language-server-protocol/"}},{"headings":[{"value":"Large Language Model"}],"fields":{"slug":"/large-language-model/"}},{"headings":[{"value":"Linux"}],"fields":{"slug":"/linux/"}},{"headings":[{"value":"Machine Learning"}],"fields":{"slug":"/machine-learning/"}},{"headings":[{"value":"Logging"}],"fields":{"slug":"/logging/"}},{"headings":[{"value":"Mac OS"}],"fields":{"slug":"/mac-os/"}},{"headings":[{"value":"Mail"}],"fields":{"slug":"/mail/"}},{"headings":[{"value":"Network"}],"fields":{"slug":"/network/"}},{"headings":[{"value":"Markdown"}],"fields":{"slug":"/markdown/"}},{"headings":[{"value":"Object Oriented Programming"}],"fields":{"slug":"/object-oriented-programming/"}},{"headings":[{"value":"Node JS"}],"fields":{"slug":"/nodejs/"}},{"headings":[{"value":"Ollama"}],"fields":{"slug":"/ollama/"}},{"headings":[{"value":"개인적인 철학"}],"fields":{"slug":"/philosophy/"}},{"headings":[{"value":"Podman"}],"fields":{"slug":"/podman/"}},{"headings":[{"value":"Physics"}],"fields":{"slug":"/physics/"}},{"headings":[{"value":"Programming Convention"}],"fields":{"slug":"/programming-convention/"}},{"headings":[{"value":"PostgreSQL"}],"fields":{"slug":"/postgresql/"}},{"headings":[{"value":"Programming Paradigm"}],"fields":{"slug":"/programming-paradigm/"}},{"headings":[{"value":"Python Programming Language"}],"fields":{"slug":"/python/"}},{"headings":[{"value":"인용문"}],"fields":{"slug":"/quotation/"}},{"headings":[{"value":"Reactive Extensions (Reactive X, RX)"}],"fields":{"slug":"/reactive-extensions/"}},{"headings":[{"value":"React JS"}],"fields":{"slug":"/reactjs/"}},{"headings":[{"value":"Reverse Engineering"}],"fields":{"slug":"/reverse-engineering/"}},{"headings":[{"value":"Redis"}],"fields":{"slug":"/redis/"}},{"headings":[{"value":"Rust Programming Language"}],"fields":{"slug":"/rust/"}},{"headings":[{"value":"SCP"}],"fields":{"slug":"/scp/"}},{"headings":[{"value":"보안"}],"fields":{"slug":"/security/"}},{"headings":[{"value":"Sentry - APM & Error Tracking"}],"fields":{"slug":"/sentry/"}},{"headings":[{"value":"SFML"}],"fields":{"slug":"/sfml/"}},{"headings":[{"value":"소프트웨어 개발"}],"fields":{"slug":"/software-development/"}},{"headings":[{"value":"Shell 명령어"}],"fields":{"slug":"/shell/"}},{"headings":[{"value":"우주"}],"fields":{"slug":"/space/"}},{"headings":[{"value":"Swagger"}],"fields":{"slug":"/swagger/"}},{"headings":[{"value":"Spring framework"}],"fields":{"slug":"/spring-framework/"}},{"headings":[{"value":"시스템 장애"}],"fields":{"slug":"/system-failures/"}},{"headings":[{"value":"Testing"}],"fields":{"slug":"/testing/"}},{"headings":[{"value":"테스트 주도 개발 (Test Driven Development)"}],"fields":{"slug":"/test-driven-development/"}},{"headings":[{"value":"Tmux"}],"fields":{"slug":"/tmux/"}},{"headings":[{"value":"개발/비개발 도구"}],"fields":{"slug":"/tools/"}},{"headings":[{"value":"Treesitter"}],"fields":{"slug":"/treesitter/"}},{"headings":[{"value":"Unicode"}],"fields":{"slug":"/unicode/"}},{"headings":[{"value":"Unity 3D"}],"fields":{"slug":"/unity3d/"}},{"headings":[{"value":"Valve사의 신규 입사자를 위한 핸드북"}],"fields":{"slug":"/valve/"}},{"headings":[{"value":"VimEnter 2023"}],"fields":{"slug":"/vimenter-2023/"}},{"headings":[{"value":"Vim"}],"fields":{"slug":"/vim/"}},{"headings":[{"value":"Vimwiki"}],"fields":{"slug":"/vimwiki/"}},{"headings":[{"value":"Vue JS"}],"fields":{"slug":"/vuejs/"}},{"headings":[{"value":"웹 개발"}],"fields":{"slug":"/web/"}},{"headings":[{"value":"WebGL"}],"fields":{"slug":"/webgl/"}},{"headings":[{"value":"Windows Subsystem for Linux (WSL)"}],"fields":{"slug":"/windows-subsystem-for-linux/"}},{"headings":[{"value":"Windows"}],"fields":{"slug":"/windows/"}},{"headings":[{"value":"추론 애플리케이션"}],"fields":{"slug":"/인공지능/용어/추론 애플리케이션/"}}]},"site":{"siteMetadata":{"gitHubRepositoryUrl":"https://github.com/edunga1/cat-logic"}}},"pageContext":{"id":"cefc15e5-54cf-5fa9-92ed-2c732bd358ea"}},"staticQueryHashes":[],"slicesMap":{}}