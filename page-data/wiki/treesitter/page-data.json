{"componentChunkName":"component---src-components-gatsby-templates-wiki-tsx","path":"/wiki/treesitter/","result":{"data":{"file":{"fields":{"gitLogs":[{"hash":"cdda1ee166e467880e92fd01d313a336ecc6d228","date":"2024-09-23T14:08:51Z"}]},"childMarkdownRemark":{"headings":[{"value":"Treesitter"}],"fields":{"slug":"/treesitter/","relatedDocs":[{"slug":"javascript","similarity":0.4181619431},{"slug":"web","similarity":0.4159269321},{"slug":"2016-08-27-gdg-webtech-workshop-nnn","similarity":0.3335109428},{"slug":"crontab","similarity":0.3476961978},{"slug":"gradle","similarity":0.4403644007},{"slug":"idea-methodology","similarity":0.4076843581},{"slug":"podman","similarity":0.2175204934},{"slug":"2016-11-16-google-campus-two-things-you-must-keep-in-google-play","similarity":0.3822182489},{"slug":"spring-framework","similarity":0.4008134344},{"slug":"aws","similarity":0.3462619273},{"slug":"git","similarity":0.4253523967},{"slug":"algorithm-practice","similarity":0.3767370677},{"slug":"docker","similarity":0.3274378478},{"slug":"scp","similarity":0.3066720752},{"slug":"mac-os","similarity":0.4421259754},{"slug":"testing","similarity":0.4186863157},{"slug":"machine-learning","similarity":0.3797614985},{"slug":"devops","similarity":0.3005392098},{"slug":"python","similarity":0.408588921},{"slug":"object-oriented-programming","similarity":0.4685107575},{"slug":"linux","similarity":0.2335291298},{"slug":"sfml","similarity":0.3938135274},{"slug":"windows","similarity":0.3366422677},{"slug":"markdown","similarity":0.4620355451},{"slug":"cat-logic","similarity":0.525641308},{"slug":"vuejs","similarity":0.3946926211},{"slug":"shell","similarity":0.4231553814},{"slug":"html","similarity":0.374764666},{"slug":"vimenter-2023","similarity":0.5301268482},{"slug":"data-analysis","similarity":0.4127134221},{"slug":"hardware","similarity":0.2641112972},{"slug":"programming-convention","similarity":0.3768873994},{"slug":"webgl","similarity":0.3440066948},{"slug":"sentry","similarity":0.3802067436},{"slug":"valve","similarity":0.2564588808},{"slug":"security","similarity":0.241472894},{"slug":"reactjs","similarity":0.4619139912},{"slug":"airflow","similarity":0.2780621473},{"slug":"computer-graphics","similarity":0.2678737946},{"slug":"elasticsearch","similarity":0.4531583435},{"slug":"unicode","similarity":0.3982211825},{"slug":"logging","similarity":0.3096643595},{"slug":"tools","similarity":0.3966736885},{"slug":"programming-paradigm","similarity":0.4536006911},{"slug":"system-failures","similarity":0.2077716542},{"slug":"company","similarity":0.2406256339},{"slug":"amazon-redshift","similarity":0.2643074466},{"slug":"inspiration","similarity":0.3577075146},{"slug":"gatsbyjs","similarity":0.4089797228},{"slug":"design-pattern","similarity":0.4669739018},{"slug":"tmux","similarity":0.4522290166},{"slug":"game","similarity":0.2898114116},{"slug":"kubernetes","similarity":0.227523464},{"slug":"nodejs","similarity":0.5073885386},{"slug":"continuous-integration-and-deployment","similarity":0.2770617234},{"slug":"rust","similarity":0.4078800754},{"slug":"book","similarity":0.304829379},{"slug":"jetbrains","similarity":0.4916777026},{"slug":"quotation","similarity":0.3661469372},{"slug":"postgresql","similarity":0.4388900642},{"slug":"jira","similarity":0.320716753},{"slug":"large-language-model","similarity":0.388975611},{"slug":"swagger","similarity":0.3486281802},{"slug":"architecture","similarity":0.4252504423},{"slug":"godot","similarity":0.5123013406},{"slug":"curl","similarity":0.4323120713},{"slug":"unity3d","similarity":0.3942451588},{"slug":"jargon","similarity":0.4388925974},{"slug":"language-server-protocol","similarity":0.4761603723},{"slug":"clean-code","similarity":0.451458172},{"slug":"java","similarity":0.4763896745},{"slug":"windows-subsystem-for-linux","similarity":0.3991013241},{"slug":"test-driven-development","similarity":0.2840066983},{"slug":"philosophy","similarity":0.4097951894},{"slug":"github","similarity":0.4504434783},{"slug":"network","similarity":0.3018242992},{"slug":"ollama","similarity":0.4371238181},{"slug":"kotlin","similarity":0.4936156306},{"slug":"c-sharp","similarity":0.3562612716},{"slug":"angularjs","similarity":0.4219935473},{"slug":"treesitter","similarity":1},{"slug":"vim","similarity":0.6120644459},{"slug":"ionic-framework","similarity":0.2982212941},{"slug":"physics","similarity":0.3122492822},{"slug":"html-canvas","similarity":0.3108020299},{"slug":"reverse-engineering","similarity":0.2710783161},{"slug":"space","similarity":0.1848524185},{"slug":"css","similarity":0.4125117063},{"slug":"code-review","similarity":0.4103331869},{"slug":"software-development","similarity":0.4425400273},{"slug":"database","similarity":0.3998184914},{"slug":"reactive-extensions","similarity":0.2326716159},{"slug":"redis","similarity":0.4138594853},{"slug":"mail","similarity":0.2920159591},{"slug":"experience-review","similarity":0.355850179},{"slug":"google-analytics","similarity":0.2017946955},{"slug":"data-structure","similarity":0.4359734432},{"slug":"vimwiki","similarity":0.5278912889},{"slug":"embeddings","similarity":0.4087606292},{"slug":"추론 애플리케이션","similarity":0.2476259936}]},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#treesitter\">Treesitter</a></p>\n<ul>\n<li><a href=\"#query\">Query</a></li>\n</ul>\n</li>\n</ul>","html":"<h1 id=\"treesitter\" style=\"position:relative;\"><a href=\"#treesitter\" aria-label=\"treesitter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Treesitter</h1>\n<p><a href=\"https://tree-sitter.github.io/tree-sitter/\">https://tree-sitter.github.io/tree-sitter/</a></p>\n<p><a href=\"../vim\">nvim</a>에서 플러그인으로 사용하고 있다.\n문법 강조나 Text Object 확장을 제공한다.</p>\n<h2 id=\"query\" style=\"position:relative;\"><a href=\"#query\" aria-label=\"query permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Query</h2>\n<p>Treesitter의 표현식은 Scheme을 통해 정의되며, <code class=\"language-text\">.scm</code> 확장자를 가진다.</p>\n<blockquote>\n<p>... The default names for the query files use the <code class=\"language-text\">.scm</code> file. We chose this extension because it commonly used for files written in <a href=\"https://en.wikipedia.org/wiki/Scheme_%28programming_language%29\">Scheme</a>, a popular dialect of Lisp, and these query files use a Lisp-like syntax.</p>\n<p>Alternatively, you can think of .scm as an acronym for “Source Code Matching”.</p>\n<p><a href=\"https://tree-sitter.github.io/tree-sitter/syntax-highlighting#queries\">Queries</a> 중에서</p>\n</blockquote>\n<p>nvim에서 treesitter textobject 쿼리를 추가하려면 <code class=\"language-text\">&lt;nvim-config>/queries/&lt;language>/textobjects.scm</code>을 생성한다.</p>\n<p>다음은 javascript에서 Object의 key를 <code class=\"language-text\">@property</code>로, value를 <code class=\"language-text\">@value</code>로 지정하는 쿼리이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">pair</span>\n  key: <span class=\"token punctuation\">(</span><span class=\"token function\">property_identifier</span><span class=\"token punctuation\">)</span> @property\n  value: <span class=\"token punctuation\">(</span><span class=\"token function\">_</span><span class=\"token punctuation\">)</span> @value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>내 설정 기준으로 <code class=\"language-text\">~/.config/nvim/queries/javascript/textobjects.scm</code>에 저장하였다.</p>\n<p>이제 nvim-treesitter 플러그인 설정에 다음을 추가한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\">require<span class=\"token string\">'nvim-treesitter.configs'</span><span class=\"token punctuation\">.</span><span class=\"token function\">setup</span> <span class=\"token punctuation\">{</span>\n  textobjects <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    select <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      enable <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span>\n      lookahead <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span>\n      keymaps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">\"ap\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"@property\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">\"av\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"@value\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이제 <code class=\"language-text\">vap</code>로 <code class=\"language-text\">key</code>를 선택하고, <code class=\"language-text\">vav</code>로 <code class=\"language-text\">'value'</code>를 선택할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">key</span><span class=\"token operator\">:</span> <span class=\"token string\">'value'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>nvim-treesitter-textobjects 플러그인에서 미리 제공하는 쿼리를 활용할 수도 있다. 이 편이 편리하다.</p>\n<p>다음은 javascript, typescript에서 공통으로 사용하는 ecma 쿼리다.</p>\n<p><a href=\"https://github.com/nvim-treesitter/nvim-treesitter-textobjects/blob/master/queries/ecma/textobjects.scm\">https://github.com/nvim-treesitter/nvim-treesitter-textobjects/blob/master/queries/ecma/textobjects.scm</a></p>\n<p>Object에 대한 쿼리는 다음과 같이 정의되어 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token function\">object</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">pair</span>\n    key: <span class=\"token punctuation\">(</span><span class=\"token function\">_</span><span class=\"token punctuation\">)</span> @assignment.lhs\n    value: <span class=\"token punctuation\">(</span><span class=\"token function\">_</span><span class=\"token punctuation\">)</span> @assignment.inner @assignment.rhs<span class=\"token punctuation\">)</span> @assignment.outer<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">@assignment.lhs</code>로 key를 선택하고, <code class=\"language-text\">@assignment.rhs</code>로 value를 선택할 수 있다.\n<code class=\"language-text\">@assignment.outer</code>로 key, value 모두 선택한다.</p>\n<p>주의할 점은 다음과 같이 다른 문맥에서 같은 이름을 사용하고 있어서, 커서 위치에 따라 선택되는 대상이 달라진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token function\">lexical_declaration</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">variable_declarator</span>\n    name: <span class=\"token punctuation\">(</span><span class=\"token function\">_</span><span class=\"token punctuation\">)</span> @assignment.lhs\n    value: <span class=\"token punctuation\">(</span><span class=\"token function\">_</span><span class=\"token punctuation\">)</span> @assignment.inner @assignment.rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> @assignment.outer</code></pre></div>\n<p>커서 위치가 변수 선언문에 있으면 <code class=\"language-text\">@assignment.lhs</code>로 변수명을 선택하고 <code class=\"language-text\">@assignment.rhs</code>로 변수값을 선택하게 된다.</p>"}},"site":{"siteMetadata":{"gitHubRepositoryUrl":"https://github.com/edunga1/cat-logic"}}},"pageContext":{"id":"5c2000e4-5b0b-5298-b3b3-d2d429a74fdb"}},"staticQueryHashes":[],"slicesMap":{}}