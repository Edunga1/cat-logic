{"componentChunkName":"component---src-pages-wiki-markdown-remark-fields-slug-tsx","path":"/wiki/mac-os/","result":{"data":{"markdownRemark":{"tableOfContents":"<ul>\n<li>\n<p><a href=\"#mac-os\">Mac OS</a></p>\n</li>\n<li>\n<p><a href=\"#ngrok%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-%EB%A7%A5%EC%97%90%EC%84%9C-remote-login-%ED%95%98%EA%B8%B0\"><code>ngrok</code>을 이용하여 맥에서 Remote Login 하기</a></p>\n<ul>\n<li><a href=\"#1-%EB%A7%A5%EB%B6%81%EC%84%9C%EB%B2%84%EC%97%90%EC%84%9C-ssh-%EB%A6%AC%EB%AA%A8%ED%8A%B8-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%ED%97%88%EC%9A%A9\">1. 맥북(서버)에서 SSH 리모트 로그인 허용</a></li>\n<li><a href=\"#2-ngrok%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-%EB%A7%A5%EB%B6%81%EC%84%9C%EB%B2%84-forwading\">2. <code>ngrok</code>을 이용하여 맥북(서버) forwading</a></li>\n<li><a href=\"#3-%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8%EC%97%90%EC%84%9C-%EC%A0%91%EC%86%8D%ED%95%98%EA%B8%B0\">3. 클라이언트에서 접속하기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#secretive---ssh-key%EB%A5%BC-secure-enclave%EC%97%90-%EC%A0%80%EC%9E%A5%ED%95%98%EB%8A%94-%EC%95%B1\">Secretive - SSH Key를 Secure Enclave에 저장하는 앱</a></p>\n<ul>\n<li><a href=\"#multiple-hosts-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">Multiple Hosts 사용하기</a></li>\n</ul>\n</li>\n</ul>","html":"<h1 id=\"mac-os\" style=\"position:relative;\"><a href=\"#mac-os\" aria-label=\"mac os permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mac OS</h1>\n<h1 id=\"ngrok을-이용하여-맥에서-remote-login-하기\" style=\"position:relative;\"><a href=\"#ngrok%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-%EB%A7%A5%EC%97%90%EC%84%9C-remote-login-%ED%95%98%EA%B8%B0\" aria-label=\"ngrok을 이용하여 맥에서 remote login 하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>ngrok</code>을 이용하여 맥에서 Remote Login 하기</h1>\n<p>공인 IP없이 맥북에 ssh로 접속하기 위해선 중계자가 필수적이다.\n<code>ngrok</code>이 <code>hole punching</code>을 통해서 서버와 클라이언트를 연결하는지는 모르겠지만,\n<code>ngrok</code>을 사용하면 쉽게 해결할 수 있다.</p>\n<h2 id=\"1-맥북서버에서-ssh-리모트-로그인-허용\" style=\"position:relative;\"><a href=\"#1-%EB%A7%A5%EB%B6%81%EC%84%9C%EB%B2%84%EC%97%90%EC%84%9C-ssh-%EB%A6%AC%EB%AA%A8%ED%8A%B8-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%ED%97%88%EC%9A%A9\" aria-label=\"1 맥북서버에서 ssh 리모트 로그인 허용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 맥북(서버)에서 SSH 리모트 로그인 허용</h2>\n<p>먼저, 서버가 되는 맥북은 ssh 연결을 허용해야 한다.\n<code>System Preference</code> -> <code>Sharing</code>에서 <code>Remote Login</code>을 체크하면,\n초록불이 들어오면서 <code>Remote Login: On</code>으로 상태가 출력된다.\n그리고 <code>Allow access for</code>에서 외부 연결에서 사용할 계정을 추가하거나 모두 허용하면 된다.</p>\n<h2 id=\"2-ngrok을-이용하여-맥북서버-forwading\" style=\"position:relative;\"><a href=\"#2-ngrok%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-%EB%A7%A5%EB%B6%81%EC%84%9C%EB%B2%84-forwading\" aria-label=\"2 ngrok을 이용하여 맥북서버 forwading permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. <code>ngrok</code>을 이용하여 맥북(서버) forwading</h2>\n<p>접\u001e속하려는 PC든 서버가되는 맥북이든 공유기를 사용하여 Private Network 내에 있을거기 때문에,\n공인 IP를 가진 누군가를 통해서 연결해야 한다. <code>ngrok</code>은 그런 일을 도와준다.\n무료고 유용하다.</p>\n<p>여기에서 어떤 일들이 가능한지 알 수 있다:<br>\n<a href=\"https://ngrok.com/product\">https://ngrok.com/product</a></p>\n<p>맥북(서버)만 설치하면 된다. Homebrew로 쉽게 설치할 수 있다.</p>\n<pre><code class=\"language-bash\">$ brew cask install ngrok\n</code></pre>\n<p>처음 설치했다면, ngrok 서비스에 로그인이 필요할 수 있다.\n일단 진행해보고 인증받으라고 한다면, 로그인 페이지로 들어가서:<br>\n<a href=\"https://dashboard.ngrok.com/user/login\">https://dashboard.ngrok.com/user/login</a></p>\n<p>로그인하면, 인증 방법이 나온다. <code>ngrok authtoken ...</code>이 나오는 부분을 찾으면 된다.</p>\n<p>설치 했으면 ssh port를 ngrok을 통해서 forwarding 되도록 한다.</p>\n<pre><code class=\"language-bash\">$ ngrok tcp 22\nngrok by @inconshreveable\n\nSession Status                online\nAccount                       username (Plan: Free)\nVersion                       2.3.25\nRegion                        United States (us)\nWeb Interface                 http://127.0.0.1:4040\nForwarding                    tcp://0.tcp.ngrok.io:18844 -> localhost:22\n\nConnections                   ttl     opn     rt1     rt5     p50     p90\n                              0       0       0.00    0.00    0.00    0.00\n</code></pre>\n<p>위 화면이 나오면 성공이다.</p>\n<p>만약 위에서 ssh remote login 옵션을 허용하지 않았으면 에러가 난다.</p>\n<h2 id=\"3-클라이언트에서-접속하기\" style=\"position:relative;\"><a href=\"#3-%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8%EC%97%90%EC%84%9C-%EC%A0%91%EC%86%8D%ED%95%98%EA%B8%B0\" aria-label=\"3 클라이언트에서 접속하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 클라이언트에서 접속하기</h2>\n<p><code>ssh</code> 명령어로 접속할 수 있다.</p>\n<pre><code class=\"language-bash\">$ ssh username@0.tcp.ngrok.io -p18844\n</code></pre>\n<p><code>username</code>은 1번에서 sharing에 허용한 사용자 이름을 입력하면 된다.\n<code>$ whoami</code> 명령어로도 알 수 있지만.</p>\n<p><code>18844</code>는 포트 번호인데, <code>$ ngroc tcp 22</code> 출력되는 화면에서 포트번호를 확인할 수 있다.</p>\n<pre><code class=\"language-bash\">...\nForwarding                    tcp://0.tcp.ngrok.io:18844 -> localhost:22\n...\n</code></pre>\n<h1 id=\"secretive---ssh-key를-secure-enclave에-저장하는-앱\" style=\"position:relative;\"><a href=\"#secretive---ssh-key%EB%A5%BC-secure-enclave%EC%97%90-%EC%A0%80%EC%9E%A5%ED%95%98%EB%8A%94-%EC%95%B1\" aria-label=\"secretive   ssh key를 secure enclave에 저장하는 앱 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Secretive - SSH Key를 Secure Enclave에 저장하는 앱</h1>\n<p><a href=\"https://github.com/maxgoedjen/secretive\">https://github.com/maxgoedjen/secretive</a></p>\n<p>설치:</p>\n<pre><code class=\"language-bash\">brew install secretive\n</code></pre>\n<p><img src=\"https://github.com/maxgoedjen/secretive/raw/main/.github/readme/app-light.png\" alt=\"main\"></p>\n<p><a href=\"https://support.apple.com/ko-kr/guide/security/sec59b0b31ff/web\">Secure Enclave</a>는 메인 프로세서와 별도로 격리되어 저장되는 추가적인 보안 계층을 제공한다.</p>\n<p>맥북 프로의 경우 T1 칩에 Secure Enclave가 내장되어 있어, 2016년 이후에 출시된 T1, T2 칩을 제공하는 모델에서만 사용할 수 있다.\n자세한 동작 원리는 모르지만, 메인 프로세서와 격리된 메모리 영역에 데이터를 저장해서 더 안전하다고 한다.</p>\n<p>Secretive는 SSH Key를 Secure Encalve에 저장하는 앱이다.\nSSH Key는 앱에서 직접 생성해주는데, 비대칭 암호화 방식의 경우 ECDSA를 사용하고, <strong>개인키는 Secure Enclave에 저장하면서 사용자에게 보여주지 않는다.</strong></p>\n<p>개인키를 보여주지 않는 특징과 함께 수정할 수도 없다.</p>\n<p>개발하면서 더 이상 키를 확인할 이유는 왠만하면 없기 때문에 하드디스크 <code>~/.ssh</code>에 저장하기 보다는 Secure Enclave에 저장해 둔다면 보안상 더 좋아 보인다.</p>\n<p>나같은 경우 GitHub, BitBucket 등에서 사용하는 키를 Secretive로 생성 및 관리하고 있다.</p>\n<p>설치하고 <code>~/.ssh/config</code>에 아래 내용을 추가해야 한다.</p>\n<pre><code class=\"language-bash\">Host *\n  IdentityAgent /Users/johndoe/Library/Containers/com.maxgoedjen.Secretive.SecretAgent/Data/socket.ssh\n</code></pre>\n<p><code>man ssh_config</code>에 <code>IdentityAgent</code>에 대해 설명되어 있다.\nssh 연결이 발생하면 설정으로 인해 Secretive가 동작하나 보다.</p>\n<p>SSH Key에 접근이 필요하면 Touch ID로 인증하거나 알림 배지로 노티를 받거나 설정할 수 있다. 이 기능 때문에 더 안전하다고 느낀다.\n인증 방식을 변경하고 싶다면 키를 다시 생성해야 한다. 위에서 언급한 수정할 수 없는 특징 때문이다.\n<a href=\"https://github.com/maxgoedjen/secretive/issues/424#issuecomment-1465047137\">관련 이슈</a></p>\n<h2 id=\"multiple-hosts-사용하기\" style=\"position:relative;\"><a href=\"#multiple-hosts-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"multiple hosts 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Multiple Hosts 사용하기</h2>\n<p>회사에서 GitHub 개인 계정과 회사 계정을 ssh config로 분리하여 사용하고 있었다:</p>\n<pre><code class=\"language-bash\">Host github.com-edunga\n  HostName github.com\n  User git\n  PreferredAuthentications publickey\n  IdentityFile ~/.ssh/id_rsa_github_edunga\n</code></pre>\n<p>개인 프로젝트의 remote url을 <code>git@github.com-edunga</code>로 설정하고 있다.\nSecretive 사용하면서 <code>IdentityFile</code>만 제외하면 Secretive와 함께 동작한다.</p>\n<pre><code class=\"language-bash\">Host github.com-edunga\n  HostName github.com\n  User git\n  PreferredAuthentications publickey\n</code></pre>"}},"pageContext":{"id":"553a3281-18ba-558f-b917-64ca8ca94b06","fields__slug":"/mac-os/","__params":{"fields__slug":"mac-os"}}},"staticQueryHashes":[],"slicesMap":{}}