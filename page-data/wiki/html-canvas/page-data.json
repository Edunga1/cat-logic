{"componentChunkName":"component---src-pages-wiki-markdown-remark-fields-slug-tsx","path":"/wiki/html-canvas/","result":{"data":{"markdownRemark":{"headings":[{"value":"Canvas"}],"tableOfContents":"<ul>\n<li>\n<p><a href=\"#canvas\">Canvas</a></p>\n<ul>\n<li><a href=\"#coroutine\">Coroutine</a></li>\n</ul>\n</li>\n</ul>","html":"<h1 id=\"canvas\" style=\"position:relative;\"><a href=\"#canvas\" aria-label=\"canvas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Canvas</h1>\n<p>HTML Canvas.</p>\n<h2 id=\"coroutine\" style=\"position:relative;\"><a href=\"#coroutine\" aria-label=\"coroutine permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Coroutine</h2>\n<p>게임 엔진이나 프레임워크 없이 순수하게 Canvas 앱을 만들다 보면 페인포인트가 있다.\n특히 객체 제어에 대한 부분이다.</p>\n<p>여러개의 객체를 관리한다고 가정하고, 어느 객체는 10초 후에 업데이트하고 싶다.\n더 나아가서 객체를 특정 이벤트 후에 업데이트하고 싶다.\n특정 객체만 sleep 시키고 싶지만 다른 객체는 계속 업데이트하고 싶다.</p>\n<p>Unity의 경우 Coroutine을 이용하여 이러한 문제를 해결한다.</p>\n<p>Unity의 <a href=\"https://docs.unity3d.com/ScriptReference/WaitForSeconds.html\">WaitForSeconds</a>는 X초 후에 그 다음 코드를 실행한다.</p>\n<pre><code class=\"language-csharp\">void Start()\n{\n    StartCoroutine(waiter());\n}\n\nIEnumerator waiter()\n{\n    //Rotate 90 deg\n    transform.Rotate(new Vector3(90, 0, 0), Space.World);\n\n    //Wait for 4 seconds\n    yield return new WaitForSeconds(4);\n\n    //Rotate 40 deg\n    transform.Rotate(new Vector3(40, 0, 0), Space.World);\n\n    //Wait for 2 seconds\n    yield return new WaitForSeconds(2);\n\n    //Rotate 20 deg\n    transform.Rotate(new Vector3(20, 0, 0), Space.World);\n}\n</code></pre>\n<p>처음에는 90도 회전을 하고, 4초 후에 40도 회전을 하고, 2초 후에 20도 회전을 하는 <a href=\"https://stackoverflow.com/questions/30056471/how-to-make-the-script-wait-sleep-in-a-simple-way-in-unity\">예시</a>이다.</p>\n<p><code>yield</code> 구문에서 X초간 suspend 되고, 그 후 다음 코드를 실행하고 있어서 매우 직관적인 코드를 작성할 수 있다.\n이러한 Coroutine은 <code>WaitForSeconds</code> 이외에도 프레임 기반이나 실제 시간 기반으로 suspend하는 등 여러가지가 있다.</p>\n<p>이 방식을 비슷하게 구현해 보았다.</p>\n<p><a href=\"https://github.com/Edunga1/practice-canvas-coroutine\">https://github.com/Edunga1/practice-canvas-coroutine</a></p>\n<pre><code class=\"language-javscript\">*_update() {\n  this.x += 1\n  this.y += 1\n  yield* waitForSeconds(1)\n  this.y -= 1\n  yield* waitForSeconds(2)\n  this.x -= 1\n  this.y += 1\n  yield* waitForSeconds(1)\n  this.y -= 1\n  yield* waitForSeconds(3)\n}\n</code></pre>"}},"pageContext":{"id":"99f06dbf-df66-5baa-9cb8-515d9b361b9e","fields__slug":"/html-canvas/","__params":{"fields__slug":"html-canvas"}}},"staticQueryHashes":[],"slicesMap":{}}