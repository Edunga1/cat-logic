{"componentChunkName":"component---src-pages-wiki-markdown-remark-id-tsx","path":"/wiki/94032db8-6661-58c3-8c26-2829e09b06fd/","result":{"data":{"markdownRemark":{"tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EC%B1%85\">책</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%88%84%EC%9B%8C%EC%84%9C-%EC%9D%BD%EB%8A%94-%ED%8D%BC%EC%A6%90%EB%B6%81---%EC%B4%88%EC%BD%9C%EB%A6%BF-%EB%AC%B8%EC%A0%9C\">누워서 읽는 퍼즐북 - 초콜릿 문제</a></p>\n<ul>\n<li><a href=\"#%EC%A0%95%EB%8B%B5\">정답</a></li>\n<li><a href=\"#%EA%B0%90%EC%83%81\">감상</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#implementation-patterns-aka-smalltalk-best-practice-patterns-kent-beck\">Implementation patterns (a.k.a smalltalk best practice patterns, kent beck)</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%A7%8C%EB%93%A4%EB%A9%B4%EC%84%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%ED%81%B4%EB%A6%B0-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98\">만들면서 배우는 클린 아키텍처</a></p>\n</li>\n</ul>","html":"<h1>책</h1>\n<h1>누워서 읽는 퍼즐북 - 초콜릿 문제</h1>\n<blockquote>\n<p>가로 3칸, 세로 8칸, 모두 24개의 조각으로 이루어진 초콜릿이 있다. 당신은 24명의 아이로 이루어진 학급을 맡은 선생님이다. 초콜릿이 먹고 싶은아이들은 당신에게 빨리 그것을 24개의 조각으로 나누어서 하나씩 달라고성화를 부리고 있다. 이 초콜릿을 잘라서 24개의 조각으로 나누는 방법은여러 가지가 있다. 길게 세로로 한 번씩 쪼갠 다음 각 조각을 가로로 쪼갤수 있고, 먼저 가로로 쪼갠 다음 세로로 쪼개는 방법을 취할 수도 있다. 혹은 가로와 세로로 쪼개는 방향을 혼합해서 다소 복잡하게 나누어갈 수도 있다. 성화를 부리는 아이들 앞에서 당신은 잠시 생각에 잠겼다.이 초콜릿을 가장 빠르게 24개의 조각으로 나누는 길은 무엇일까? 그 방법을 찾아보기 바란다. 잘라낸 초콜릿을 겹쳐서 한꺼번에 쪼개거나 하는 방법은 허용되지 않는다.</p>\n</blockquote>\n<p><em>-- 누워서 읽는 퍼즐북 중에서</em></p>\n<h2>정답</h2>\n<p>초콜릿을 어떤 방법으로 쪼개도 전체적으로 쪼개야 하는 횟수는 항상 일정하다. 그 횟수는 반드시 전체 조각의 수에서 1을 뺀 값이다. 즉, 23.</p>\n<h2>감상</h2>\n<p>처음 이 문제를 접했을 때 매우 당황했다.\n분량을 채우기 위한 꼼수가 아닐까 생각했다.</p>\n<p>하지만 이 문제의 의도를 알면서 생각이 달라졌다.\n의도는 '문제의 원리를 얼마나 빨리 깨닫고 수긍하느냐'다.</p>\n<p>...</p>\n<p>프레임워크에서 작업하는데 문제가 발생했다.\n내가 생각하기에 가장 깔끔할 거 같은 방법을 찾고 있었다.\n몇 시간씩 검색하고 시도해도 해결되지 않았다.\n방법이 없는건 아니었다. 그런데 더 좋은 방법이 있다고 생각했다.\n한참 지나서야 다른 방법으로 해결했다.</p>\n<p>초콜릿 문제가 떠올랐다.</p>\n<p>너무 늘어지는 문제가 생기면 이 것은 '초콜릿 문제'가 아닌가 생각해본다.</p>\n<p>내가 문제를 정확히 이해하고 있는지 다시 한 번 고민해봐야 할 때다.</p>\n<h1>Implementation patterns (a.k.a smalltalk best practice patterns, kent beck)</h1>\n<p>직접 읽은 것은 아니고, 보고 싶은 책. 내용은 패턴에 대해서 이야기한다.</p>\n<p><a href=\"https://curlunit.sourceforge.net/doc/cookstour/cookstour.htm\">JUnit의 구현을 설명하는 글</a>에서 언급된 책이다:</p>\n<blockquote>\n<p>The Smalltalk Best Practice Patterns (see Beck, K. Smalltalk Best Practice Patterns, Prentice Hall, 1996) has a pattern that is applicable. It is called Collecting Parameter.</p>\n</blockquote>\n<p><em>Collecting Parameter</em> 라는 단순한 개념에 관심이 생겼다가, 어떤 이야기를 하는 책인가 후기를 찾아보게 되었다.</p>\n<p><a href=\"http://m.egloos.zum.com/gyumee/v/2263191\">http://m.egloos.zum.com/gyumee/v/2263191</a></p>\n<blockquote>\n<p>Code for others as well as myself and my buddy the CPU. (원서)\n자기 자신과 CPU뿐 아니라, 자신의 코드를 보고 사용할 다른 사람들을 배려해서 코딩해야 한다. (번역서)</p>\n</blockquote>\n<p>단순히 패턴만 설명하는 책은 아닌가 보다.</p>\n<h1>만들면서 배우는 클린 아키텍처</h1>\n<blockquote>\n<p>데이터베이스 중심적인 아키텍처가 만들어지는 가장 큰 원인은 ORM을 쓰기 때문이다.</p>\n</blockquote>\n<blockquote>\n<p>불변 커맨드 객체의 필드에 대해서 null을 유효한 상태로 받아들이는 것은 그 자체로 코드 냄새(code smell)다.\ncode smell: 코드에 더 깊은 문제가 있을 수도 있음을 암시하는 특성들</p>\n</blockquote>\n<p>44p.</p>\n<p>\"계좌 등록\" 기능과 \"계좌 변경\" 기능에 같은 입력 모델을 사용하는 경우 문제에 대해서 설명한다.\n등록 기능은 소유자ID 필요하고 계좌ID는 null 이지만, 변경 기능은 소유자ID가 null이고 계좌ID를 필요로 한다.\n각 기능에서 입력 모델은 소유자ID와 계좌ID가 각각 한 쪽이 null이어야 한다.\n만약 null이 아닌 값이 들어왔을 때 이를 에러로 볼 것인지 무시할 것인지 결정해야 하는데 어떤 방법이든 명확한 것은 아니다.\n모호성을 없애기 위해서 각각 입력 모델을 관리하는게 좋다.\n다만 매핑하는데 비용이 든다.\n이 비용을 줄이는 방법에 대해서 다른 장에서 설명한다.</p>"}},"pageContext":{"id":"94032db8-6661-58c3-8c26-2829e09b06fd","__params":{"id":"94032db8-6661-58c3-8c26-2829e09b06fd"}}},"staticQueryHashes":[],"slicesMap":{}}