{"componentChunkName":"component---src-pages-wiki-markdown-remark-fields-slug-tsx","path":"/wiki/rust/","result":{"data":{"markdownRemark":{"headings":[{"value":"Rust Programming Language"}],"tableOfContents":"<ul>\n<li>\n<p><a href=\"#rust-programming-language\">Rust Programming Language</a></p>\n<ul>\n<li><a href=\"#installation\">Installation</a></li>\n<li><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0\">프로젝트 시작하기</a></li>\n<li><a href=\"#sfml-for-rust\">SFML for Rust</a></li>\n</ul>\n</li>\n</ul>","html":"<h1 id=\"rust-programming-language\" style=\"position:relative;\"><a href=\"#rust-programming-language\" aria-label=\"rust programming language permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rust Programming Language</h1>\n<p><a href=\"https://www.rust-lang.org/\">https://www.rust-lang.org/</a></p>\n<p>SFML을 Rust에서 사용하는 것으로 처음 접해본다.</p>\n<h2 id=\"installation\" style=\"position:relative;\"><a href=\"#installation\" aria-label=\"installation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Installation</h2>\n<p>Ubuntu on WSL, OSX 사용중이라 편의상 Homebrew로 설치했다.</p>\n<pre><code class=\"language-bash\">$ brew install rust\n</code></pre>\n<p><code>rustc</code>, <code>cargo</code>가 설치되었는지 확인한다.</p>\n<pre><code class=\"language-bash\">❯ rustc --version\nrustc 1.72.1 (d5c2e9c34 2023-09-13) (Homebrew)\n\n\n❯ cargo --version\ncargo 1.72.1\n</code></pre>\n<p>cargo는 패키지 매니저이다.</p>\n<p>패키지는 몇 개 사이트에서 찾을 수 있는 것으로 보인다.\nSFML을 기준으로는 다음 2개 사이트에서 찾을 수 있었다.</p>\n<ul>\n<li><a href=\"https://docs.rs/crate/sfml/latest\">https://docs.rs/crate/sfml/latest</a></li>\n<li><a href=\"https://crates.io/crates/sfml\">https://crates.io/crates/sfml</a></li>\n</ul>\n<p>docs.rs는 라이브러리 문서화에 특화되어 있는 것으로 보인다.\ncrates.io처럼 <code>cargo add sfml</code>와 같은 설치 명령어 안내 문구가 없다.</p>\n<h2 id=\"프로젝트-시작하기\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0\" aria-label=\"프로젝트 시작하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로젝트 시작하기</h2>\n<p><code>cargo</code> 명령어로 프로젝트를 생성하거나 패키지를 설치할 수 있다.</p>\n<p>다음은 <code>hell_world</code> 프로젝트를 생성하는 명령어이다.</p>\n<pre><code class=\"language-bash\">$ cargo new sfml-rust-start\n     Created binary (application) `sfml-rust-start` package\n\n$ cd sfml-rust-start\n\n$ tree -a .\n.\n├── Cargo.toml\n├── .git\n├── .gitignore\n└── src\n    └── main.rs\n</code></pre>\n<p><code>Cargo.toml</code> 파일과 함께 git 저장소가 생성된다.\nhello world를 출력하는 기본적인 코드가 <code>src/main.rs</code>에 작성되어 있다.</p>\n<p>현재 디렉토리를 프로젝트로 만들고 싶다면 <code>cargo init</code> 명령어를 사용한다.</p>\n<p>Rust 코드를 실행해보자. <code>rustc</code>로 컴파일하면 실행 파일이 생성된다:</p>\n<pre><code class=\"language-bash\">$ rustc src/main.rs\n$ ./main\nHello, world!\n</code></pre>\n<h2 id=\"sfml-for-rust\" style=\"position:relative;\"><a href=\"#sfml-for-rust\" aria-label=\"sfml for rust permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SFML for Rust</h2>\n<p><a href=\"https://github.com/jeremyletang/rust-sfml\">https://github.com/jeremyletang/rust-sfml</a></p>\n<ol>\n<li>SFML 설치가 필요하다: <code>brew install sfml</code> \\</li>\n</ol>\n<p>Homebrew로 설치하면 저장되는 위치를 알고 있어야 한다. osx 기준으로 <code>/opt/homebrew/Cellar/sfml/&#x3C;version></code>에 설치되었다.</p>\n<p>brew 문서에 이에 대한 내용이 전무해서, 일반적으로 설치 후 안내 문구가 뜨는 다른 패키지와 달리 사용 방법을 따로 찾아봐야 했다.</p>\n<ol start=\"2\">\n<li>\n<p><code>cargo add sfml</code>로 sfml crate 추가한다.</p>\n</li>\n<li>\n<p><code>main.rs</code>를 작성하는데, rust-sfml에 있는 예제 코드를 가져왔다:</p>\n</li>\n</ol>\n<pre><code class=\"language-rust\">extern crate sfml;\n\nuse sfml::{\n    graphics::{Color, CustomShape, CustomShapePoints, RenderTarget, RenderWindow, Shape},\n    system::Vector2f,\n    window::{Event, Key, Style},\n};\n\n#[derive(Clone, Copy)]\npub struct TriangleShape;\n\nimpl CustomShapePoints for TriangleShape {\n    fn point_count(&#x26;self) -> usize {\n        3\n    }\n\n    fn point(&#x26;self, point: usize) -> Vector2f {\n        match point {\n            0 => Vector2f { x: 20., y: 580. },\n            1 => Vector2f { x: 400., y: 20. },\n            2 => Vector2f { x: 780., y: 580. },\n            p => panic!(\"Non-existent point: {p}\"),\n        }\n    }\n}\n\nfn main() {\n    let mut window = RenderWindow::new(\n        (800, 600),\n        \"Custom shape\",\n        Style::CLOSE,\n        &#x26;Default::default(),\n    );\n    window.set_vertical_sync_enabled(true);\n\n    let mut shape = CustomShape::new(Box::new(TriangleShape));\n    shape.set_fill_color(Color::RED);\n    shape.set_outline_color(Color::GREEN);\n    shape.set_outline_thickness(3.);\n\n    loop {\n        while let Some(event) = window.poll_event() {\n            match event {\n                Event::Closed\n                | Event::KeyPressed {\n                    code: Key::Escape, ..\n                } => return,\n                _ => {}\n            }\n        }\n\n        window.clear(Color::BLACK);\n        window.draw(&#x26;shape);\n        window.display();\n    }\n}\n</code></pre>\n<ol start=\"4\">\n<li>빌드 시 SFML 환경 변수<code>SFML_INCLUDE_DIR</code>, <code>SFML_LIBS_DIR</code> 2개를 전달해야 한다. \\</li>\n</ol>\n<p>Homebrew로 설치했기 때문에 해당 경로를 전달했다.</p>\n<pre><code class=\"language-bash\">$ SFML_INCLUDE_DIR=/opt/homebrew/Cellar/sfml/2.6.0/include SFML_LIBS_DIR=/opt/homebrew/Cellar/sfml/2.6.0/lib/ cargo build\n</code></pre>\n<ol start=\"5\">\n<li>실행 파일을 실행해 본다: <code>./target/debug/&#x3C;project-name></code></li>\n</ol>\n<p>cargo build 대신 삐르게 실핼하는 방법을 좀 찾아봐야겠다.</p>"}},"pageContext":{"id":"67067683-2f05-5fbd-9de4-75f417ed6fc8","fields__slug":"/rust/","__params":{"fields__slug":"rust"}}},"staticQueryHashes":[],"slicesMap":{}}