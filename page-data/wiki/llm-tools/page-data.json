{"componentChunkName":"component---src-components-gatsby-templates-wiki-tsx","path":"/wiki/llm-tools/","result":{"data":{"markdownRemark":{"headings":[{"value":"LLM 도구"}],"fields":{"slug":"/llm-tools/","relatedDocs":[{"slug":"javascript","similarity":0.5670641516},{"slug":"web","similarity":0.5893096259},{"slug":"2016-08-27-gdg-webtech-workshop-nnn","similarity":0.5648763246},{"slug":"crontab","similarity":0.4703870429},{"slug":"gradle","similarity":0.4613377619},{"slug":"idea-methodology","similarity":0.4620747486},{"slug":"2016-11-16-google-campus-two-things-you-must-keep-in-google-play","similarity":0.5209737851},{"slug":"spring-framework","similarity":0.4900783478},{"slug":"aws","similarity":0.4629944113},{"slug":"git","similarity":0.5019543415},{"slug":"algorithm-practice","similarity":0.3683354976},{"slug":"docker","similarity":0.6131978352},{"slug":"scp","similarity":0.319289762},{"slug":"mac-os","similarity":0.5198302493},{"slug":"testing","similarity":0.5001641326},{"slug":"machine-learning","similarity":0.6851341311},{"slug":"devops","similarity":0.3899380293},{"slug":"python","similarity":0.6062532058},{"slug":"object-oriented-programming","similarity":0.5250297909},{"slug":"linux","similarity":0.3492419733},{"slug":"sfml","similarity":0.4627113608},{"slug":"windows","similarity":0.5011565459},{"slug":"markdown","similarity":0.4458631405},{"slug":"cat-logic","similarity":0.4714945587},{"slug":"vuejs","similarity":0.2919857375},{"slug":"shell","similarity":0.6054202963},{"slug":"html","similarity":0.385935206},{"slug":"vimenter-2023","similarity":0.4995189927},{"slug":"data-analysis","similarity":0.4788177691},{"slug":"hardware","similarity":0.3582780764},{"slug":"programming-convention","similarity":0.3961346744},{"slug":"webgl","similarity":0.3886606884},{"slug":"sentry","similarity":0.2978908332},{"slug":"valve","similarity":0.3270161403},{"slug":"security","similarity":0.402890797},{"slug":"reactjs","similarity":0.4542117136},{"slug":"airflow","similarity":0.4505070461},{"slug":"computer-graphics","similarity":0.3063391526},{"slug":"elasticsearch","similarity":0.4913750953},{"slug":"unicode","similarity":0.35179944},{"slug":"logging","similarity":0.3711670351},{"slug":"tools","similarity":0.6012659453},{"slug":"programming-paradigm","similarity":0.5750143131},{"slug":"system-failures","similarity":0.3647915126},{"slug":"amazon-redshift","similarity":0.2479052619},{"slug":"inspiration","similarity":0.413899177},{"slug":"gatsbyjs","similarity":0.5284225582},{"slug":"design-pattern","similarity":0.4803973978},{"slug":"game","similarity":0.5527847075},{"slug":"kubernetes","similarity":0.4044061317},{"slug":"llm-tools","similarity":1},{"slug":"nodejs","similarity":0.6214682468},{"slug":"continuous-integration-and-deployment","similarity":0.3576081803},{"slug":"rust","similarity":0.5295684225},{"slug":"book","similarity":0.3770383092},{"slug":"jetbrains","similarity":0.5153967438},{"slug":"quotation","similarity":0.3089571142},{"slug":"postgresql","similarity":0.4099988723},{"slug":"jira","similarity":0.3278439443},{"slug":"swagger","similarity":0.3272431244},{"slug":"architecture","similarity":0.5060007457},{"slug":"unity3d","similarity":0.5200944999},{"slug":"jargon","similarity":0.470267054},{"slug":"language-server-protocol","similarity":0.396901857},{"slug":"clean-code","similarity":0.4057706263},{"slug":"java","similarity":0.5481385702},{"slug":"windows-subsystem-for-linux","similarity":0.5499539839},{"slug":"test-driven-development","similarity":0.2810771554},{"slug":"philosophy","similarity":0.5628599459},{"slug":"github","similarity":0.5866070276},{"slug":"network","similarity":0.3619188487},{"slug":"kotlin","similarity":0.534483994},{"slug":"c-sharp","similarity":0.3242506179},{"slug":"angularjs","similarity":0.4593384274},{"slug":"vim","similarity":0.4604378713},{"slug":"ionic-framework","similarity":0.3730135006},{"slug":"physics","similarity":0.4446525152},{"slug":"html-canvas","similarity":0.3689728192},{"slug":"reverse-engineering","similarity":0.3713753361},{"slug":"space","similarity":0.3839011555},{"slug":"css","similarity":0.3884706019},{"slug":"code-review","similarity":0.4266851131},{"slug":"software-development","similarity":0.4735441967},{"slug":"database","similarity":0.5489981463},{"slug":"reactive-extensions","similarity":0.2774980292},{"slug":"redis","similarity":0.2663535581},{"slug":"mail","similarity":0.2539745796},{"slug":"experience-review","similarity":0.3407508094},{"slug":"google-analytics","similarity":0.3411695003},{"slug":"data-structure","similarity":0.3293651232},{"slug":"vimwiki","similarity":0.4070940486},{"slug":"embeddings","similarity":0.548184294},{"slug":"추론 애플리케이션","similarity":0.5957404247}]},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#llm-%EB%8F%84%EA%B5%AC\">LLM 도구</a></p>\n<ul>\n<li>\n<p><a href=\"#phidata\">Phidata</a></p>\n<ul>\n<li><a href=\"#%EB%82%98%EB%A7%8C%EC%9D%98-%EB%8F%84%EA%B5%AC-%EB%A7%8C%EB%93%A4%EA%B8%B0\">나만의 도구 만들기</a></li>\n<li><a href=\"#%EB%A1%9C%EC%BB%AC-llm-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">로컬 LLM 사용하기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#ollama\">Ollama</a></p>\n</li>\n</ul>\n</li>\n</ul>","html":"<h1 id=\"llm-도구\" style=\"position:relative;\"><a href=\"#llm-%EB%8F%84%EA%B5%AC\" aria-label=\"llm 도구 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>LLM 도구</h1>\n<p>로컬 환경에서 LLM을 사용하자.</p>\n<p>GPT-4는 너무 비싸더라. 한글은 토큰으로 전환하면 분량이 영어보다 더 많다.<br>\n즉 비용이 더 많이 들고, 더 적은 내용을 모델에 전달할 수 있다.</p>\n<p>하지만 공개된 버전의 LLM보다 상용 LLM의 품질은 훨씬 좋다.</p>\n<h2 id=\"phidata\" style=\"position:relative;\"><a href=\"#phidata\" aria-label=\"phidata permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Phidata</h2>\n<p>phidata는 function call을 통한 AI Assistant를 만드는 toolkit이다.</p>\n<p><a href=\"https://github.com/phidatahq/phidata\">https://github.com/phidatahq/phidata</a></p>\n<p>AI가 사용할 수 있는 도구(function call)을 제공하고 사용자가 프롬프트로 요청하면, AI가 도구를 사용하여 답변을 생성한다.\n도구로는 웹 검색, 파이썬, DB가 있다.</p>\n<p>OPENAI_API_KEY 없이도 사용할 수 있다.\n실제 동작은 phidata의 API를 사용하여 phidata는 OpenAI의 ChatGPT-4 Turbo를 사용한다. 그래서 무료로 시도해볼 수 있다.\n다만 2024-02-22, 사용량이 너무 많아서 막았다. 무료로 사용하게 뒀던 것이 대단한데, 아마 조만간 영구히 막을 것 같다.</p>\n<p>OPENAI_API_KEY를 제공하면 해당 Key가 사용된다.\n두 번 사용한 후 OpenAI에서 사용량을 확인해보니 $0.10 사용되었다. 한글로 사용해서 그런지 비싸다.</p>\n<p>AI에게 도구를 쥐어주는 컨셉은 ChatGPT-4의 동작 원리와 비슷해 보인다.\nChatGPT-4의 프롬프트 유출 내용을 보면, browser와 dalle, python 등의 도구에 대한 사용법을 알려주었다.</p>\n<hr>\n<p>다음은 Phidata에서 소개하는 간단한 예제이다.<br>\n지금은 OpenAI API 키가 없으면 실행할 수 없다.</p>\n<p>poetry를 사용하고 있어서 <code class=\"language-text\">pyproject.toml</code>를 작성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"toml\"><pre class=\"language-toml\"><code class=\"language-toml\"><span class=\"token punctuation\">[</span><span class=\"token table class-name\">tool.poetry</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">name</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"phidata-start\"</span>\n<span class=\"token key property\">version</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"0.1.0\"</span>\n<span class=\"token key property\">description</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"\"</span>\n<span class=\"token key property\">authors</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">tool.poetry.dependencies</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">python</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"3.10.8\"</span>\n<span class=\"token key property\">phidata</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"^2.3.41\"</span>\n<span class=\"token key property\">openai</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"^1.12.0\"</span>\n\n\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">build-system</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">requires</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"poetry-core\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">build-backend</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"poetry.core.masonry.api\"</span></code></pre></div>\n<p><code class=\"language-text\">poetry shell</code>로 가상 환경을 만들고, <code class=\"language-text\">poetry install</code>로 의존성을 설치한다.\n<code class=\"language-text\">phidata</code>와 <code class=\"language-text\">openai</code> 단 두개만 설치하면 된다.</p>\n<p>이제 스크립트를 작성하자 <code class=\"language-text\">assistant.py</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> phi<span class=\"token punctuation\">.</span>assistant <span class=\"token keyword\">import</span> Assistant\n\nassistant <span class=\"token operator\">=</span> Assistant<span class=\"token punctuation\">(</span>description<span class=\"token operator\">=</span><span class=\"token string\">\"You help people with their health and fitness goals.\"</span><span class=\"token punctuation\">)</span>\nassistant<span class=\"token punctuation\">.</span>print_response<span class=\"token punctuation\">(</span><span class=\"token string\">\"Share a quick healthy breakfast recipe.\"</span><span class=\"token punctuation\">,</span> markdown<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>실행하면 OpenAI GPT-4 turbo 모델로 쿼리하여 응답을 받는다:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">phidata-start-G7rAPLlM-py3.10 ❯ python assistant.py\n╭──────────┬───────────────────────────────────────────────────────────╮\n│ Message  │ Share a quick healthy breakfast recipe.                   │\n├──────────┼───────────────────────────────────────────────────────────┤\n│ Response │ Certainly<span class=\"token operator\">!</span> Here's a simple and healthy breakfast recipe   │\n│ <span class=\"token punctuation\">(</span><span class=\"token number\">26</span>.2s<span class=\"token punctuation\">)</span>  │ <span class=\"token keyword\">for</span> an Avocado Toast with Poached Egg:                    │\n│          │                                                           │\n│          │                       Ingredients:                        │\n│          │                                                           │\n│          │  • <span class=\"token number\">1</span> slice of whole-grain bread                           │\n│          │  • <span class=\"token number\">1</span>/2 ripe avocado                                       │\n│          │  • <span class=\"token number\">1</span> egg                                                  │\n│          │  • Salt and pepper, to taste                              │\n│          │  • Red pepper flakes <span class=\"token punctuation\">(</span>optional<span class=\"token punctuation\">)</span>                           │\n│          │  • A few leaves of fresh spinach or arugula <span class=\"token punctuation\">(</span>optional<span class=\"token punctuation\">)</span>    │\n│          │  • A splash of vinegar <span class=\"token punctuation\">(</span>for poaching the egg<span class=\"token punctuation\">)</span>             │\n│          │                                                           │\n│          │                       Instructions:                       │\n│          │                                                           │\n│          │  <span class=\"token number\">1</span> Toast the Bread                                        │\n│          │     • Begin by toasting your whole-grain bread to your    │\n│          │       preferred level of crispiness.                      │\n│          │  <span class=\"token number\">2</span> Poach the Egg                                          │\n│          │     • Fill a pot with about <span class=\"token number\">3</span> inches of water, <span class=\"token function\">add</span> a      │\n│          │       splash of vinegar, and bring to a light simmer.     │\n│          │     • Crack the egg into a small bowl or cup.             │\n│          │     • Create a gentle whirlpool <span class=\"token keyword\">in</span> the pot by stirring    │\n│          │       with a spoon.                                       │\n│          │     • Carefully slide the egg into the center of the      │\n│          │       whirlpool. The swirling water will <span class=\"token builtin class-name\">help</span> the egg     │\n│          │       white wrap around the yolk.                         │\n│          │     • Let it cook <span class=\"token keyword\">for</span> about <span class=\"token number\">3</span>-4 minutes <span class=\"token keyword\">for</span> a soft poach, │\n│          │       or longer <span class=\"token keyword\">if</span> you prefer a firmer yolk.              │\n│          │     • Use a slotted spoon to remove the egg from the      │\n│          │       water and <span class=\"token builtin class-name\">set</span> aside to drain on a kitchen towel.    │\n│          │  <span class=\"token number\">3</span> Mash the Avocado                                       │\n│          │     • While the egg is poaching, slice the avocado <span class=\"token keyword\">in</span>     │\n│          │       half, remove the pit, scoop out the flesh, and mash │\n│          │       it with a fork.                                     │\n│          │     • Spread the mashed avocado onto your toasted bread.  │\n│          │     • Season with salt, pepper, and red pepper flakes <span class=\"token keyword\">if</span>  │\n│          │       desired.                                            │\n│          │  <span class=\"token number\">4</span> Assemble the Avocado Toast                             │\n│          │     • Place the poached egg on <span class=\"token function\">top</span> of the mashed avocado. │\n│          │     • Add a handful of fresh spinach or arugula on the    │\n│          │       side <span class=\"token keyword\">for</span> extra greens.                              │\n│          │     • Adjust seasoning to your taste.                     │\n│          │  <span class=\"token number\">5</span> Serve                                                  │\n│          │     • Serve immediately and enjoy your healthy and        │\n│          │       filling breakfast<span class=\"token operator\">!</span>                                  │\n│          │                                                           │\n│          │ This breakfast provides you with a good balance of        │\n│          │ protein, healthy fats, and whole grains to start your day │\n│          │ with energy.                                              │\n╰──────────┴───────────────────────────────────────────────────────────╯</code></pre></div>\n<p>다음은 duckduckgo를 이용해 AI가 검색하는 예시다.\n모델에게 함수를 사용하도록 지시하고, 함수 결과를 종합하여 답변하는 구조다.</p>\n<p><code class=\"language-text\">duckduckgo-search</code> 모듈이 필요하다: <code class=\"language-text\">poetry add duckduckgo-search</code></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> phi<span class=\"token punctuation\">.</span>assistant <span class=\"token keyword\">import</span> Assistant\n<span class=\"token keyword\">from</span> phi<span class=\"token punctuation\">.</span>tools<span class=\"token punctuation\">.</span>duckduckgo <span class=\"token keyword\">import</span> DuckDuckGo\n\n\nassistant <span class=\"token operator\">=</span> Assistant<span class=\"token punctuation\">(</span>tools<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>DuckDuckGo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> show_tools_calls<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\nassistant<span class=\"token punctuation\">.</span>print_response<span class=\"token punctuation\">(</span><span class=\"token string\">\"한국어로, poetry 사용법에 대해서 조사해 주세요.\"</span><span class=\"token punctuation\">,</span> markdown<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>결과는 다음과 같다:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">phidata-start-G7rAPLlM-py3.10 ❯ python assistant.py\n╭──────────┬───────────────────────────────────────────────────────────╮\n│ Message  │ 한국어로, poetry 사용법에 대해서 조사해 주세요.           │\n├──────────┼───────────────────────────────────────────────────────────┤\n│ Response │ 죄송합니다, 제가 잘못된 정보를 얻어왔습니다. poetry에     │\n│ <span class=\"token punctuation\">(</span><span class=\"token number\">49</span>.4s<span class=\"token punctuation\">)</span>  │ 대한 사용법 조사를 다시 시도하겠습니다. 조금만            │\n│          │ 기다려주십시오.죄송합니다, 결과가 부정확합니다. 다시      │\n│          │ 시도하겠습니다.죄송합니다, 제가 드린 정보가 poetry의      │\n│          │ 사용법과 관련이 없었습니다. 해당 도구에 대한 정보를 찾기  │\n│          │ 위해 다시 시도하겠습니다.Poetry는 파이썬 프로젝트를 위한  │\n│          │ 의존성 관리 및 패키징을 용이하게 하는 도구입니다. 여기  … │\n│          │ 가지 참고할 수 있는 자료입니다:                           │\n│          │                                                           │\n│          │  <span class=\"token number\">1</span> Poetry - Python dependency management and packaging    │\n│          │    made easy: Poetry의 공식 웹사이트에서는 Python         │\n│          │    패키징과 의존성 관리를 간편하게 만들어주며, 프로젝트 … │\n│          │    결정적인 방법으로 관리할 수 있는 모든 도구를           │\n│          │    제공합니다.                                            │\n│          │  <span class=\"token number\">2</span> Dependency Management With Python Poetry - Real        │\n│          │    Python: Real Python 웹사이트에서 제공하는 튜토리얼로   │\n│          │    Python 프로젝트에 필요한 외부 패키지를 지정, 설치 및   │\n│          │    해결하는 방법에 대해 배울 수 있습니다.                 │\n│          │  <span class=\"token number\">3</span> Poetry: Python packaging and dependency management     │\n│          │    made easy: GitHub의 Poetry 저장소 페이지에서는 Python  │\n│          │    프로젝트의 의존성을 선언, 관리 및 설치하는 데 도움을   │\n│          │    주며, 기존의 setup.py, requirements.txt 등을           │\n│          │    pyproject.toml 기반 프로젝트 형식으로 대체합니다.      │\n│          │  <span class=\"token number\">4</span> How to Use Poetry to Install Python Packages and       │\n│          │    Manage Dependencies: Data to Fish 웹사이트에서는       │\n│          │    pyproject.toml 파일에 패키지를 추가하고 관리하는       │\n│          │    방법을 단계별로 안내합니다.                            │\n│          │  <span class=\"token number\">5</span> Python Poetry: Package and venv Management Made Easy:  │\n│          │    Python Land에서는 Poetry가 가상 환경 관리와 Python     │\n│          │    패키지 설치, 의존성 관리에서 어떻게 편리한 도구인지를  │\n│          │    설명합니다.                                            │\n│          │                                                           │\n│          │ 위의 자료들을 통해 Poetry에 대해 충분한 정보를 얻을 수    │\n│          │ 있을 것입니다.                                            │\n╰──────────┴───────────────────────────────────────────────────────────╯</code></pre></div>\n<p>정보를 찾기위한 AI의 고뇌가 돋보인다.</p>\n<h3 id=\"나만의-도구-만들기\" style=\"position:relative;\"><a href=\"#%EB%82%98%EB%A7%8C%EC%9D%98-%EB%8F%84%EA%B5%AC-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"나만의 도구 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>나만의 도구 만들기</h3>\n<p>Phidata는 내가 만든 함수를 사용할 수 있도록 도와준다.</p>\n<p>간단한 예제로 웹페이지의 HTML을 가져오는 도구를 만들어보자.</p>\n<p><code class=\"language-text\">assistant.py</code>의 코드는 다음과 같다:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> phi<span class=\"token punctuation\">.</span>assistant <span class=\"token keyword\">import</span> Assistant\n<span class=\"token keyword\">from</span> requests <span class=\"token keyword\">import</span> get\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_html</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Get the HTML of a webpage.\n\n    Args:\n        url (str): The URL of the webpage.\n\n    Returns:\n        str: The HTML of the webpage.\n    \"\"\"</span>\n    <span class=\"token keyword\">return</span> get<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>text\n\n\nassistant <span class=\"token operator\">=</span> Assistant<span class=\"token punctuation\">(</span>tools<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>get_html<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> show_tools_calls<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\nassistant<span class=\"token punctuation\">.</span>print_response<span class=\"token punctuation\">(</span><span class=\"token string\">\"`https://news.hada.io/topic?id=13436` 사이트의 내용을 3줄 요약해 주세요.\"</span><span class=\"token punctuation\">,</span> markdown<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">tools=</code>에 함수를 제공하면 되는데, docstring을 잘 작성하면 AI가 알아서 사용한다.</p>\n<p>다음은 사용 결과:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">phidata-start-G7rAPLlM-py3.10 ❯ python assistant.py\n╭──────────┬───────────────────────────────────────────────────────────╮\n│          │ <span class=\"token variable\"><span class=\"token variable\">`</span>https://news.hada.io/topic?id<span class=\"token operator\">=</span><span class=\"token number\">13436</span><span class=\"token variable\">`</span></span> 사이트의 내용을 <span class=\"token number\">3</span> … │\n│ Message  │ 요약해 주세요.                                            │\n├──────────┼───────────────────────────────────────────────────────────┤\n│ Response │                                                           │\n│ <span class=\"token punctuation\">(</span><span class=\"token number\">12</span>.1s<span class=\"token punctuation\">)</span>  │  <span class=\"token number\">1</span> phidata는 인간처럼 문제를 해결하기 위해 LLM<span class=\"token punctuation\">(</span>Large      │\n│          │    Language Model<span class=\"token punctuation\">)</span>을 이용하여 함수를 호출하고, 그 응답을  │\n│          │    바탕으로 다음 단계를 지능적으로 선택하여 작업을        │\n│          │    수행하는 AI 비서를 만드는 도구입니다.                  │\n│          │  <span class=\"token number\">2</span> 이 툴킷을 사용하기 위해, 사용자는 Assistant를          │\n│          │    생성하고, Tools<span class=\"token punctuation\">(</span>Functions<span class=\"token punctuation\">)</span>, Knowledge<span class=\"token punctuation\">(</span>VectorDB<span class=\"token punctuation\">)</span>,       │\n│          │    Storage<span class=\"token punctuation\">(</span>DB<span class=\"token punctuation\">)</span>를 추가해야 합니다.                         │\n│          │  <span class=\"token number\">3</span> 이 툴킷은 Streamlit, FastAPI, Django와 같은            │\n│          │    프레임워크를 이용해 서빙함으로써 AI 애플리케이션을     │\n│          │    구축할 수 있도록 지원합니다.                           │\n╰──────────┴───────────────────────────────────────────────────────────╯</code></pre></div>\n<p>프롬프트를 개선하면 다양한 결과를 얻을 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">message <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"\"\"\n`$</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>url<span class=\"token punctuation\">}</span></span><span class=\"token string\">` 사이트의 내용을 요약해주세요.\n\nhorizontal line으로 총 4개 구역을 나눠주세요.\n\n첫 번째 구역은 본문 내용을 10줄 이내로 요약해주세요.\n두 번째 구역은 리액션이 많은 덧글을 최대 3개까지 원문 그대로 포함해주세요.\n세 번째 구역은 모든 덧글을 요약해 주세요. 원문은 포함하지 않아도 됩니다.\n마지막 구역은 URL에서 다음 시퀀스 정보를 찾아서 다음 글을 매우 간략하게 요약해주고, URL을 함께 포함해주세요.\n\"\"\"</span></span></code></pre></div>\n<p>이렇게 프롬프트를 작성하면, 본문을 위해 도구를 한 번 사용하고 다음 글을 요약하기 위해 도구를 한 번 더 사용한다.</p>\n<hr>\n<p>여기있는 코드도 copilot과 함께 작성하다보니, 내가 직접 짠 코드는 거의 없다.<br>\n인공지능의 발전이 새삼 대단하다고 느낀다.</p>\n<p>이 예제코드는 내 저장소에 올려두었다:<br>\n<a href=\"https://github.com/Edunga1/practice-phidata\">https://github.com/Edunga1/practice-phidata</a></p>\n<h3 id=\"로컬-llm-사용하기\" style=\"position:relative;\"><a href=\"#%EB%A1%9C%EC%BB%AC-llm-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"로컬 llm 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>로컬 LLM 사용하기</h3>\n<p>Ollama를 사용해서 로컬 LLM을 쉽게 띄우고, phidata로 도구를 쥐어주는 것이 아이디어다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">from</span> phi<span class=\"token punctuation\">.</span>llm<span class=\"token punctuation\">.</span>ollama<span class=\"token punctuation\">.</span>chat <span class=\"token keyword\">import</span> Ollama\n\n<span class=\"token keyword\">from</span> phi<span class=\"token punctuation\">.</span>tools<span class=\"token punctuation\">.</span>toolkit <span class=\"token keyword\">import</span> Toolkit\n<span class=\"token keyword\">from</span> phi<span class=\"token punctuation\">.</span>assistant<span class=\"token punctuation\">.</span>assistant <span class=\"token keyword\">import</span> Assistant\n<span class=\"token keyword\">from</span> requests <span class=\"token keyword\">import</span> get\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">WebpageVisitor</span><span class=\"token punctuation\">(</span>Toolkit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_html</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"Get the HTML of a webpage.\n\n        Args:\n            url (str): The URL of the webpage.\n\n        Returns:\n            str: The HTML of the webpage.\n        \"\"\"</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"============== Visiting </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>url<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> get<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>text\n\n\nurl <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\nmessage <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"\"\"\nPlease summarize the contents of the site: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>url<span class=\"token punctuation\">}</span></span><span class=\"token string\">.\n\nUse `get_html` to get the HTML of the webpage.\n\nIf the body content contains another link, visit it. And repeat this process up to five times.\n\nList all the links you visited in a bullet list.\n\"\"\"</span></span>\n\nassistant <span class=\"token operator\">=</span> Assistant<span class=\"token punctuation\">(</span>\n    run_id<span class=\"token operator\">=</span><span class=\"token string\">\"webpage_summarizer\"</span><span class=\"token punctuation\">,</span>\n    tools<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>WebpageVisitor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    llm<span class=\"token operator\">=</span>Ollama<span class=\"token punctuation\">(</span>model<span class=\"token operator\">=</span><span class=\"token string\">\"llama2\"</span><span class=\"token punctuation\">,</span> host<span class=\"token operator\">=</span><span class=\"token string\">\"localhost:11434\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\nassistant<span class=\"token punctuation\">.</span>print_response<span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> markdown<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>모델은 <code class=\"language-text\">llama2</code>를 사용했다. 기존처럼 <code class=\"language-text\">get_html</code> 함수를 사용해서 제공하면 이상하게도 오류가 난다.\n<code class=\"language-text\">Toolkit</code>을 구현하면 오류가 나지 않는다.</p>\n<p>Ollama는 docker로 띄우고 host로 제공했다.</p>\n<p>문제는 도구를 전혀 사용(function calling)하지 않는다. URL 자체를 기반한 답변을 하는데, 당연히 제대로된 답변을 못한다.\n아마도 모델 성능 문제인 거 같다. GPT-4의 경우에도 프롬프트의 해석에 따라서 도구를 사용하는 빈도가 달라졌기 때문.</p>\n<p><a href=\"https://github.com/phidatahq/phidata/issues/121#issuecomment-1963098829\">오픈소스 모델을 지원하는지?</a> 질문에\n기여자의 답변 내용을 보면, GPT-4 말고는 function calling을 제대로 사용할 수 없다고 한다:</p>\n<blockquote>\n<p>But only GPT4 can do function calling reliably. local/oss models are great for completion therefore most of the examples you'll see with OSS models will be of RAG</p>\n</blockquote>\n<hr>\n<p>OpenAI의 <code class=\"language-text\">GPT-3.5-turbo</code>도 잘 동작한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">get_html</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Get the HTML of a webpage.\n\n    Args:\n        url (str): The URL of the webpage.\n\n    Returns:\n        str: The HTML of the webpage.\n    \"\"\"</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Fetching HTML from </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>url<span class=\"token punctuation\">}</span></span><span class=\"token string\">...\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> get<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>text\n\n\nurl <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\nmessage <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"\"\"\n</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>url<span class=\"token punctuation\">}</span></span><span class=\"token string\"> 사이트의 내용을 요약해주세요. 다른 링크는 방문하지 마세요.\n\nhorizontal line으로 총 3개 구역을 나눠주세요.\n\n첫 번째 구역은 본문 내용을 10줄 이내로 요약해주세요.\n두 번째 구역은 리액션이 많은 덧글을 최대 3개까지 원문 그대로 포함해주세요.\n마지막 구역은 모든 덧글을 요약해 주세요. 원문은 포함하지 않아도 됩니다.\n\"\"\"</span></span>\n\n\nassistant <span class=\"token operator\">=</span> Assistant<span class=\"token punctuation\">(</span>\n    tools<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>get_html<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    llm<span class=\"token operator\">=</span>OpenAIChat<span class=\"token punctuation\">(</span>\n        model<span class=\"token operator\">=</span><span class=\"token string\">\"gpt-3.5-turbo-0125\"</span><span class=\"token punctuation\">,</span>\n        max_tokens<span class=\"token operator\">=</span><span class=\"token number\">4096</span><span class=\"token punctuation\">,</span>\n        temperature<span class=\"token operator\">=</span><span class=\"token number\">0.9</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\nassistant<span class=\"token punctuation\">.</span>print_response<span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> markdown<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">다른 링크는 방문하지 마세요.</code>라는 조건을 추가하지 않으면 엉뚱한 링크를 추가 방문하려고 한다.\n그러다 보니 토큰 초과로 실패하는 문제가 있었다. <code class=\"language-text\">GPT-3.5-turbo-0125</code>의 최대 토큰은 <code class=\"language-text\">16,385</code>.</p>\n<p>다음은 응답 결과이다:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ python assistant.py https://news.hada.io/topic<span class=\"token punctuation\">\\</span>?id<span class=\"token punctuation\">\\</span><span class=\"token operator\">=</span><span class=\"token number\">13464</span>\nFetching HTML from https://news.hada.io/topic?id<span class=\"token operator\">=</span><span class=\"token number\">13464</span><span class=\"token punctuation\">..</span>.\n╭──────────┬──────────────────────────────────────────────────────────────────────╮\n│          │                                                                      │\n│          │ https://news.hada.io/topic?id<span class=\"token operator\">=</span><span class=\"token number\">13464</span> 사이트의 내용을 요약해주세요.    │\n│          │ 다른 링크는 방문하지 마세요.                                         │\n│          │                                                                      │\n│          │ horizontal line으로 총 <span class=\"token number\">3</span>개 구역을 나눠주세요.                        │\n│          │                                                                      │\n│          │ 첫 번째 구역은 본문 내용을 <span class=\"token number\">10</span>줄 이내로 요약해주세요.                 │\n│          │ 두 번째 구역은 리액션이 많은 덧글을 최대 <span class=\"token number\">3</span>개까지 원문 그대로         │\n│          │ 포함해주세요.                                                        │\n│          │ 마지막 구역은 모든 덧글을 요약해 주세요. 원문은 포함하지 않아도      │\n│          │ 됩니다.                                                              │\n│ Message  │                                                                      │\n├──────────┼──────────────────────────────────────────────────────────────────────┤\n│ Response │ ──────────────────────────────────────────────────────────────────── │\n│ <span class=\"token punctuation\">(</span><span class=\"token number\">12</span>.7s<span class=\"token punctuation\">)</span>  │                                                                      │\n│          │                                 요약                                 │\n│          │                                                                      │\n│          │                              본문 내용                               │\n│          │                                                                      │\n│          │  • 개발자 생산성 측정 시 흔히 저지르는 실수는 <span class=\"token string\">'근무 시간'</span>과 같은     │\n│          │    투입물에 의존하는 것이며, 이는 잘못된 행동을 유발할 수 있음.      │\n│          │  • 기업 문화가 화면 앞 시간을 가치 있게 여기고 보상한다면, 개발자는  │\n│          │    시간을 너무 많이 쏟게 되어 작업 품질을 보장하기 어려워짐.         │\n│          │  • 더 엄한 환경에서는 <span class=\"token string\">'일찍 출근하고 늦게 퇴근하는'</span> 경쟁이 생김.     │\n│          │                                                                      │\n│          │ ──────────────────────────────────────────────────────────────────── │\n│          │                                                                      │\n│          │                             리액션 덧글                              │\n│          │                                                                      │\n│          │  <span class=\"token number\">1</span> *******                                                           │\n│          │     • <span class=\"token string\">\"아찔하네요. 매니저의 관점과 실무자의 관점이 차이가 있을 것    │\n│          │       같아요,,\"</span>                                                      │\n│          │  <span class=\"token number\">2</span> ********                                                          │\n│          │     • <span class=\"token string\">\"딱 llm이 필요한 부분인듯해요\"</span>                                 │\n│          │  <span class=\"token number\">3</span> ********                                                          │\n│          │     • <span class=\"token string\">\"저는 최근에는 이런 글에 대해서 좀 비판적으로 보는 것이        │\n│          │       사람들이 결국 이러한 글을 보고 내리는 결론이 아무 관리도       │\n│          │       안하는 것을 선택하는 것이라고 생각합니다.\"</span>                     │\n│          │                                                                      │\n│          │ ──────────────────────────────────────────────────────────────────── │\n│          │                                                                      │\n│          │                            전체 덧글 요약                            │\n│          │                                                                      │\n│          │  • 덧글들은 경영자와 실무자 사이의 관점 차이, 필요한 부분에 대한     │\n│          │    언급, 글의 비판적 시각 등 다양한 의견이 포함되어 있습니다.        │\n╰──────────┴──────────────────────────────────────────────────────────────────────╯</code></pre></div>\n<p><code class=\"language-text\">GPT-3.5-turbo-0125</code>로 2번 성공, 2번 토큰 초과 실패하여 든 비용은 $0.02.\nGPT-4와 비교하면 훨씬 저렴하기도 하지만, 사용 토큰 제한량에서 크게 차이가 나서 많이 사용할 수 없는 구조다.</p>\n<p>나중에 앱을 고도화 한다면 이 토큰 차이로 인해서 품질이 달라질 수도 있겠다.</p>\n<h2 id=\"ollama\" style=\"position:relative;\"><a href=\"#ollama\" aria-label=\"ollama permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ollama</h2>\n<p>ollama는 LLM을 로컬에서 쉽게 사용할 수 있게 만든 도구다.</p>\n<p><a href=\"https://github.com/ollama/ollama\">https://github.com/ollama/ollama</a></p>\n<p>실행은 Docker로 하자:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">-v</span> ollama:/root/.ollama <span class=\"token parameter variable\">-p</span> <span class=\"token number\">11434</span>:11434 <span class=\"token parameter variable\">--name</span> ollama ollama/ollama</code></pre></div>\n<p>GPU를 사용할 수 있지만 나는 WSL2 환경에서 실행하지 못하고 있다:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">--gpus</span><span class=\"token operator\">=</span>all <span class=\"token parameter variable\">-v</span> ollama:/root/.ollama <span class=\"token parameter variable\">-p</span> <span class=\"token number\">11434</span>:11434 <span class=\"token parameter variable\">--name</span> ollama ollama/ollama</code></pre></div>\n<p>백그라운드로 실행해 두고, <a href=\"../shell\">shell</a>에서 실행해보자:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-ti</span> ollama ollama run llama2\npulling manifest\npulling 8934d96d3f08<span class=\"token punctuation\">..</span>. <span class=\"token number\">100</span>% ▕█████████████████████████████████████████████████████▏ <span class=\"token number\">3.8</span> GB\npulling 8c17c2ebb0ea<span class=\"token punctuation\">..</span>. <span class=\"token number\">100</span>% ▕█████████████████████████████████████████████████████▏ <span class=\"token number\">7.0</span> KB\npulling 7c23fb36d801<span class=\"token punctuation\">..</span>. <span class=\"token number\">100</span>% ▕█████████████████████████████████████████████████████▏ <span class=\"token number\">4.8</span> KB\npulling 2e0493f67d0c<span class=\"token punctuation\">..</span>. <span class=\"token number\">100</span>% ▕█████████████████████████████████████████████████████▏   <span class=\"token number\">59</span> B\npulling fa304d675061<span class=\"token punctuation\">..</span>. <span class=\"token number\">100</span>% ▕█████████████████████████████████████████████████████▏   <span class=\"token number\">91</span> B\npulling 42ba7f8a01dd<span class=\"token punctuation\">..</span>. <span class=\"token number\">100</span>% ▕█████████████████████████████████████████████████████▏  <span class=\"token number\">557</span> B\nverifying sha256 digest\nwriting manifest\nremoving any unused layers\nsuccess\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> hi?\nHello<span class=\"token operator\">!</span> It's <span class=\"token function\">nice</span> to meet you. Is there something I can <span class=\"token builtin class-name\">help</span> you with or would you like to chat?</code></pre></div>\n<p><code class=\"language-text\">ollama run &lt;LLM></code>으로만 실행해도 모델 다운로드 후 바로 대화할 수 있다.</p>\n<p>로컬 LLM으로 <a href=\"https://github.com/phidatahq/phidata\">phidata</a>를 시작하는 것이 내 목표.</p>"}},"pageContext":{"id":"e45ab3f4-a6ae-5ff1-82ec-6680db69af50"}},"staticQueryHashes":[],"slicesMap":{}}