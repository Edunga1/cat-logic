{"componentChunkName":"component---src-pages-wiki-markdown-remark-id-tsx","path":"/wiki/6d32412f-2bfb-5ffb-aee8-07eeb3ce72b3/","result":{"data":{"markdownRemark":{"id":"6d32412f-2bfb-5ffb-aee8-07eeb3ce72b3","tableOfContents":"<ul>\n<li><a href=\"#sfml\">SFML</a></li>\n<li><a href=\"#sfml-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EB%B9%8C%EB%93%9C%ED%95%98%EA%B8%B0\">SFML 프로젝트 빌드하기</a></li>\n<li><a href=\"#lets-make-16-games-in-csfml\">Let's make 16 games in C++/SFML!</a></li>\n</ul>","html":"<h1>SFML</h1>\n<p>Simple and Fast Multimedia Library. 줄여서 SFML이라 한다.\nC++ 기반 멀티미디어를 가져오거나 그리고, Window를 만드는 API를 제공한다.</p>\n<p>SDL코드라는 그래픽 라이브러리가 유명한데, SFML은 나오지 얼마되지 않았지만, 좋다고 한다. 오픈헥사곤도 이것으로 만들어 졌다.</p>\n<p><a href=\"https://www.sfml-dev.org/tutorials/2.5/graphics-draw.php\">공식문서</a>에 나와있는 튜토리얼 중 하나:</p>\n<pre><code class=\"language-c++\">#include &#x3C;SFML/Graphics.hpp>\n\nint main()\n{\n    // create the window\n    sf::RenderWindow window(sf::VideoMode(800, 600), \"My window\");\n\n    // run the program as long as the window is open\n    while (window.isOpen())\n    {\n        // check all the window's events that were triggered since the last iteration of the loop\n        sf::Event event;\n        while (window.pollEvent(event))\n        {\n            // \"close requested\" event: we close the window\n            if (event.type == sf::Event::Closed)\n                window.close();\n        }\n\n        // clear the window with black color\n        window.clear(sf::Color::Black);\n\n        // draw everything here...\n        // window.draw(...);\n\n        // end the current frame\n        window.display();\n    }\n\n    return 0;\n}\n</code></pre>\n<p>윈도우를 생성하고, 반복문에서 이벤트를 계속 처리하는 구조다.</p>\n<h1>SFML 프로젝트 빌드하기</h1>\n<p>OSX 기준.</p>\n<ol>\n<li>SFML 라이브러리를 다운받는다. <strong>homebrew</strong>로 설치하면 간단하다. <code>$ brew install sfml</code></li>\n<li>빌드 도구 CMake를 다운받는다. <strong>homebrew</strong>는 <code>$ brew install cmake</code></li>\n</ol>\n<p><strong>아래부터는 <a href=\"https://github.com/SFML/SFML/wiki/Tutorial%3A-Build-your-SFML-project-with-CMake\">이 링크</a>에 따름</strong></p>\n<ol start=\"2\">\n<li>프로젝트 루트에 <code>cmake_modules</code> 폴더를 생성</li>\n<li><a href=\"https://github.com/SFML/SFML-Game-Development-Book/blob/master/CMake/FindSFML.cmake\">FindSFML.cmake</a> 작성하고, <code>cmake_modules</code> 안에 둔다.</li>\n<li><code>CmakeLists.txt</code> 작성하여 프로젝트 루트에 둔다. 위 폴더와는 관련 없다.\n<pre><code class=\"language-c++\">#Change this if you need to target a specific CMake version\ncmake_minimum_required(VERSION 2.6)\n\n\n# Enable debug symbols by default\n# must be done before project() statement\nif(NOT CMAKE_BUILD_TYPE)\n  set(CMAKE_BUILD_TYPE Debug CACHE STRING \"Choose the type of build (Debug or Release)\" FORCE)\nendif()\n# (you can also set it on the command line: -D CMAKE_BUILD_TYPE=Release)\n\nproject(myproject)\n\n# Set version information in a config.h file\nset(myproject_VERSION_MAJOR 1)\nset(myproject_VERSION_MINOR 0)\nconfigure_file(\n  \"${PROJECT_SOURCE_DIR}/config.h.in\"\n  \"${PROJECT_BINARY_DIR}/config.h\"\n  )\ninclude_directories(\"${PROJECT_BINARY_DIR}\")\n\n# Define sources and executable\nset(EXECUTABLE_NAME \"myproject\")\nadd_executable(${EXECUTABLE_NAME} main.cpp)\n\n\n# Detect and add SFML\nset(CMAKE_MODULE_PATH \"${CMAKE_SOURCE_DIR}/cmake_modules\" ${CMAKE_MODULE_PATH})\n#Find any version 2.X of SFML\n#See the FindSFML.cmake file for additional details and instructions\nfind_package(SFML 2 REQUIRED network audio graphics window system)\nif(SFML_FOUND)\n  include_directories(${SFML_INCLUDE_DIR})\n  target_link_libraries(${EXECUTABLE_NAME} ${SFML_LIBRARIES} ${SFML_DEPENDENCIES})\nendif()\n\n\n# Install target\ninstall(TARGETS ${EXECUTABLE_NAME} DESTINATION bin)\n\n\n# CPack packaging\ninclude(InstallRequiredSystemLibraries)\nset(CPACK_RESOURCE_FILE_LICENSE \"${CMAKE_SOURCE_DIR}/COPYING\")\nset(CPACK_PACKAGE_VERSION_MAJOR \"${myproject_VERSION_MAJOR}\")\nset(CPACK_PACKAGE_VERSION_MINOR \"${myproject_VERSION_MINOR}\")\ninclude(CPack)\n</code></pre>\n</li>\n<li>예제 코드 <code>main.cpp</code>는 다음과 같다.\n<pre><code class=\"language-c++\">#include \"config.h\"\n#include &#x3C;iostream>\n#include &#x3C;SFML/Graphics.hpp>\nusing namespace std;\n\nint main(int argc, char* argv[]) {\n\n  // Code adapted from the SFML 2 \"Window\" example.\n\n  cout &#x3C;&#x3C; \"Version \" &#x3C;&#x3C; myproject_VERSION_MAJOR &#x3C;&#x3C; \".\" &#x3C;&#x3C; myproject_VERSION_MINOR &#x3C;&#x3C; endl;\n\n  sf::Window App(sf::VideoMode(800, 600), \"myproject\");\n\n  while (App.isOpen()) {\n    sf::Event Event;\n    while (App.pollEvent(Event)) {\n      if (Event.type == sf::Event::Closed)\n        App.close();\n    }\n    App.display();\n  }\n}\n</code></pre>\n<ul>\n<li>여기서 알 수 있는것은 <code>config.h</code>에서 설정 정보를 읽어와 출력하는 것.</li>\n</ul>\n</li>\n<li><code>config.h.in</code> 파일을 다음과 같이 작성한다. <code>cmake</code>를 통해서 <code>config.h</code>를 생성할 것이다.\n<pre><code class=\"language-c++\">#define myproject_VERSION_MAJOR @myproject_VERSION_MAJOR@\n#define myproject_VERSION_MINOR @myproject_VERSION_MINOR@\n</code></pre>\n</li>\n<li><code>$ cmake .</code> 명령어로 빌드한다. <code>Makefile</code>, <code>config.h</code> 등이 생성된다.</li>\n<li><code>make</code> 명령어로 컴파일한다. <code>myproject</code> 이름으로 실행파일이 생성된다. <code>$ ./myproject</code>로 실행해볼 수 있다.</li>\n</ol>\n<h1>Let's make 16 games in C++/SFML!</h1>\n<p><a href=\"https://www.youtube.com/@FamTrinli\">https://www.youtube.com/@FamTrinli</a></p>\n<p>SFML을 이용해 테트리스, 레이싱 게임, 애니팡 like 게임을 만드는 시리즈.\n배속이지만, 5분이내로 짧게 요약하고 있다. 상세설명 란에 코드도 공개하고 있다.</p>"}},"pageContext":{"id":"6d32412f-2bfb-5ffb-aee8-07eeb3ce72b3","__params":{"id":"6d32412f-2bfb-5ffb-aee8-07eeb3ce72b3"}}},"staticQueryHashes":[],"slicesMap":{}}