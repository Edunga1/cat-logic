{"componentChunkName":"component---src-components-gatsby-templates-wiki-tsx","path":"/wiki/sfml/","result":{"data":{"file":{"fields":{"gitLogLatestHash":"d18e24981c169f315c34c27fc69175ac974ece77","gitLogLatestDate":"2024-04-02T14:35:53Z"},"childMarkdownRemark":{"headings":[{"value":"SFML"}],"fields":{"slug":"/sfml/","relatedDocs":[{"slug":"javascript","similarity":0.505395588},{"slug":"web","similarity":0.4848297348},{"slug":"2016-08-27-gdg-webtech-workshop-nnn","similarity":0.444500013},{"slug":"crontab","similarity":0.4247952499},{"slug":"gradle","similarity":0.4399619651},{"slug":"idea-methodology","similarity":0.3667881169},{"slug":"2016-11-16-google-campus-two-things-you-must-keep-in-google-play","similarity":0.4789288249},{"slug":"spring-framework","similarity":0.4836618539},{"slug":"aws","similarity":0.413826087},{"slug":"git","similarity":0.4946907683},{"slug":"algorithm-practice","similarity":0.4253722876},{"slug":"docker","similarity":0.4545574709},{"slug":"scp","similarity":0.346561647},{"slug":"mac-os","similarity":0.5387352669},{"slug":"testing","similarity":0.4577926128},{"slug":"machine-learning","similarity":0.4719830057},{"slug":"devops","similarity":0.3249050233},{"slug":"python","similarity":0.5251443182},{"slug":"object-oriented-programming","similarity":0.4747157213},{"slug":"linux","similarity":0.3059705317},{"slug":"sfml","similarity":1},{"slug":"windows","similarity":0.4992164073},{"slug":"markdown","similarity":0.4385234022},{"slug":"cat-logic","similarity":0.4536084916},{"slug":"vuejs","similarity":0.3591358732},{"slug":"shell","similarity":0.5503009621},{"slug":"html","similarity":0.3717161162},{"slug":"vimenter-2023","similarity":0.4864389134},{"slug":"data-analysis","similarity":0.4235752473},{"slug":"hardware","similarity":0.3306219204},{"slug":"programming-convention","similarity":0.3904327498},{"slug":"webgl","similarity":0.4156516655},{"slug":"sentry","similarity":0.3651968252},{"slug":"valve","similarity":0.3145323358},{"slug":"security","similarity":0.3752315948},{"slug":"reactjs","similarity":0.5133633011},{"slug":"airflow","similarity":0.3602139528},{"slug":"computer-graphics","similarity":0.3015088485},{"slug":"elasticsearch","similarity":0.3892205391},{"slug":"unicode","similarity":0.3870442622},{"slug":"logging","similarity":0.262460991},{"slug":"tools","similarity":0.5688854094},{"slug":"programming-paradigm","similarity":0.5081187275},{"slug":"system-failures","similarity":0.3246591316},{"slug":"amazon-redshift","similarity":0.2900075036},{"slug":"inspiration","similarity":0.3658787271},{"slug":"gatsbyjs","similarity":0.5239027158},{"slug":"design-pattern","similarity":0.483655147},{"slug":"game","similarity":0.3926448821},{"slug":"kubernetes","similarity":0.3710233086},{"slug":"nodejs","similarity":0.5473246673},{"slug":"continuous-integration-and-deployment","similarity":0.3928864107},{"slug":"rust","similarity":0.5888624256},{"slug":"book","similarity":0.3448981524},{"slug":"jetbrains","similarity":0.5189133957},{"slug":"quotation","similarity":0.303885191},{"slug":"postgresql","similarity":0.3841162448},{"slug":"jira","similarity":0.3288440277},{"slug":"large-language-model","similarity":0.4712388773},{"slug":"swagger","similarity":0.3461138729},{"slug":"architecture","similarity":0.4824190083},{"slug":"curl","similarity":0.4691857353},{"slug":"unity3d","similarity":0.5834696088},{"slug":"jargon","similarity":0.4269885636},{"slug":"language-server-protocol","similarity":0.3898363903},{"slug":"clean-code","similarity":0.4529177375},{"slug":"java","similarity":0.421239152},{"slug":"windows-subsystem-for-linux","similarity":0.549577354},{"slug":"test-driven-development","similarity":0.3075054126},{"slug":"philosophy","similarity":0.5068594322},{"slug":"github","similarity":0.5066194182},{"slug":"network","similarity":0.3317119876},{"slug":"kotlin","similarity":0.4699114714},{"slug":"c-sharp","similarity":0.4012355166},{"slug":"angularjs","similarity":0.4563352772},{"slug":"vim","similarity":0.507934601},{"slug":"ionic-framework","similarity":0.3739498282},{"slug":"physics","similarity":0.4717781986},{"slug":"html-canvas","similarity":0.3713519942},{"slug":"reverse-engineering","similarity":0.2966225034},{"slug":"space","similarity":0.3376126766},{"slug":"css","similarity":0.4135676975},{"slug":"code-review","similarity":0.3810601048},{"slug":"software-development","similarity":0.5364903481},{"slug":"database","similarity":0.487516161},{"slug":"reactive-extensions","similarity":0.1945193122},{"slug":"redis","similarity":0.3320419637},{"slug":"mail","similarity":0.2990951916},{"slug":"experience-review","similarity":0.3497545024},{"slug":"google-analytics","similarity":0.2495076733},{"slug":"data-structure","similarity":0.3795486612},{"slug":"vimwiki","similarity":0.4241835536},{"slug":"embeddings","similarity":0.3400766983},{"slug":"추론 애플리케이션","similarity":0.3037299287}]},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#sfml\">SFML</a></p>\n<ul>\n<li><a href=\"#sfml-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EB%B9%8C%EB%93%9C%ED%95%98%EA%B8%B0\">SFML 프로젝트 빌드하기</a></li>\n<li><a href=\"#lets-make-16-games-in-csfml\">Let's make 16 games in C++/SFML!</a></li>\n<li><a href=\"#sfml-for-rust\">SFML for Rust</a></li>\n</ul>\n</li>\n</ul>","html":"<h1 id=\"sfml\" style=\"position:relative;\"><a href=\"#sfml\" aria-label=\"sfml permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SFML</h1>\n<p>Simple and Fast Multimedia Library. 줄여서 SFML. C++ 멀티미디어 라이브러리다.</p>\n<p>도형이나 이미지를 렌더링하고, 어플리케이션을 만들 수 있다. 그러니까 게임을 만들 수 있다.</p>\n<p>이쪽에선 SDL코드라는 그래픽 라이브러리가 유명한데, SFML은 나오지 얼마되지 않았지만 인기가 있는 듯.</p>\n<p>오픈헥사곤도 SFML로 만들어 졌다.</p>\n<blockquote>\n<p>Hello folks!</p>\n<p>I've recently released my first complete game (powered by SFML) on Steam, Open Hexagon:\n<a href=\"https://store.steampowered.com/app/1358090/Open_Hexagon/\">https://store.steampowered.com/app/1358090/Open_Hexagon/</a></p>\n<p>-- <a href=\"https://en.sfml-dev.org/forums/index.php?topic=27414.0\">https://en.sfml-dev.org/forums/index.php?topic=27414.0</a></p>\n</blockquote>\n<p>Wikipedia에 SFML로 만들어진 게임 목록란이 있다: <a href=\"https://en.wikipedia.org/wiki/Simple_and_Fast_Multimedia_Library#Video_game_use_examples\">https://en.wikipedia.org/wiki/Simple_and_Fast_Multimedia_Library#Video_game_use_examples</a></p>\n<hr>\n<p>C++ 라이브러리로 사용하거나 다른 언어의 바인딩을 통해 사용할 수 있다.\n<a href=\"https://github.com/jeremyletang/rust-sfml\">rust</a>, <a href=\"https://github.com/intjelic/python-sfml\">python</a>, <a href=\"https://github.com/XadillaX/sfml.js\">Node.js</a> 등.</p>\n<p><a href=\"https://www.sfml-dev.org/tutorials/2.5/graphics-draw.php\">공식문서</a>에 나와있는 튜토리얼 중 하나:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;SFML/Graphics.hpp></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// create the window</span>\n    sf<span class=\"token double-colon punctuation\">::</span>RenderWindow <span class=\"token function\">window</span><span class=\"token punctuation\">(</span>sf<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">VideoMode</span><span class=\"token punctuation\">(</span><span class=\"token number\">800</span><span class=\"token punctuation\">,</span> <span class=\"token number\">600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"My window\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// run the program as long as the window is open</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span><span class=\"token function\">isOpen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// check all the window's events that were triggered since the last iteration of the loop</span>\n        sf<span class=\"token double-colon punctuation\">::</span>Event event<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span><span class=\"token function\">pollEvent</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// \"close requested\" event: we close the window</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>type <span class=\"token operator\">==</span> sf<span class=\"token double-colon punctuation\">::</span>Event<span class=\"token double-colon punctuation\">::</span>Closed<span class=\"token punctuation\">)</span>\n                window<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// clear the window with black color</span>\n        window<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span>sf<span class=\"token double-colon punctuation\">::</span>Color<span class=\"token double-colon punctuation\">::</span>Black<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// draw everything here...</span>\n        <span class=\"token comment\">// window.draw(...);</span>\n\n        <span class=\"token comment\">// end the current frame</span>\n        window<span class=\"token punctuation\">.</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>윈도우를 생성하고, 반복문에서 이벤트를 계속 처리하는 구조다.</p>\n<h2 id=\"sfml-프로젝트-빌드하기\" style=\"position:relative;\"><a href=\"#sfml-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EB%B9%8C%EB%93%9C%ED%95%98%EA%B8%B0\" aria-label=\"sfml 프로젝트 빌드하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SFML 프로젝트 빌드하기</h2>\n<p>OSX 기준.</p>\n<ol>\n<li>SFML 라이브러리를 다운받는다. <strong>homebrew</strong>로 설치하면 간단하다. <code class=\"language-text\">brew install sfml</code></li>\n<li>빌드 도구 CMake를 다운받는다. <strong>homebrew</strong>는 <code class=\"language-text\">$ brew install cmake</code></li>\n</ol>\n<p><strong>아래부터는 <a href=\"https://github.com/SFML/SFML/wiki/Tutorial%3A-Build-your-SFML-project-with-CMake\">이 링크</a>에 따름</strong></p>\n<ol start=\"2\">\n<li>프로젝트 루트에 <code class=\"language-text\">cmake_modules</code> 폴더를 생성</li>\n<li><a href=\"https://github.com/SFML/SFML-Game-Development-Book/blob/master/CMake/FindSFML.cmake\">FindSFML.cmake</a> 작성하고, <code class=\"language-text\">cmake_modules</code> 안에 둔다.</li>\n<li><code class=\"language-text\">CmakeLists.txt</code> 작성하여 프로젝트 루트에 둔다. 위 폴더와는 관련 없다.\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token expression\">Change <span class=\"token keyword\">this</span> <span class=\"token keyword\">if</span> you need to target a specific CMake version</span></span>\n<span class=\"token function\">cmake_minimum_required</span><span class=\"token punctuation\">(</span>VERSION <span class=\"token number\">2.6</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token expression\">Enable debug symbols by <span class=\"token keyword\">default</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token directive keyword\">must</span> <span class=\"token expression\">be done before <span class=\"token function\">project</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> statement</span></span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>NOT CMAKE_BUILD_TYPE<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>CMAKE_BUILD_TYPE Debug CACHE STRING <span class=\"token string\">\"Choose the type of build (Debug or Release)\"</span> FORCE<span class=\"token punctuation\">)</span>\n<span class=\"token function\">endif</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n# <span class=\"token punctuation\">(</span>you can also set it on the command line<span class=\"token operator\">:</span> <span class=\"token operator\">-</span>D CMAKE_BUILD_TYPE<span class=\"token operator\">=</span>Release<span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">project</span><span class=\"token punctuation\">(</span>myproject<span class=\"token punctuation\">)</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token expression\">Set version information in a config<span class=\"token punctuation\">.</span>h file</span></span>\n<span class=\"token function\">set</span><span class=\"token punctuation\">(</span>myproject_VERSION_MAJOR <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">set</span><span class=\"token punctuation\">(</span>myproject_VERSION_MINOR <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">configure_file</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"${PROJECT_SOURCE_DIR}/config.h.in\"</span>\n  <span class=\"token string\">\"${PROJECT_BINARY_DIR}/config.h\"</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token function\">include_directories</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${PROJECT_BINARY_DIR}\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token expression\">Define </span><span class=\"token macro-name\">sources</span> <span class=\"token expression\"><span class=\"token operator\">and</span> executable</span></span>\n<span class=\"token function\">set</span><span class=\"token punctuation\">(</span>EXECUTABLE_NAME <span class=\"token string\">\"myproject\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">add_executable</span><span class=\"token punctuation\">(</span>$<span class=\"token punctuation\">{</span>EXECUTABLE_NAME<span class=\"token punctuation\">}</span> main<span class=\"token punctuation\">.</span>cpp<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token expression\">Detect <span class=\"token operator\">and</span> add SFML</span></span>\n<span class=\"token function\">set</span><span class=\"token punctuation\">(</span>CMAKE_MODULE_PATH <span class=\"token string\">\"${CMAKE_SOURCE_DIR}/cmake_modules\"</span> $<span class=\"token punctuation\">{</span>CMAKE_MODULE_PATH<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token expression\">Find any version <span class=\"token number\">2.</span>X of SFML</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token expression\">See the FindSFML<span class=\"token punctuation\">.</span>cmake file <span class=\"token keyword\">for</span> additional details <span class=\"token operator\">and</span> instructions</span></span>\n<span class=\"token function\">find_package</span><span class=\"token punctuation\">(</span>SFML <span class=\"token number\">2</span> REQUIRED network audio graphics window system<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>SFML_FOUND<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">include_directories</span><span class=\"token punctuation\">(</span>$<span class=\"token punctuation\">{</span>SFML_INCLUDE_DIR<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">target_link_libraries</span><span class=\"token punctuation\">(</span>$<span class=\"token punctuation\">{</span>EXECUTABLE_NAME<span class=\"token punctuation\">}</span> $<span class=\"token punctuation\">{</span>SFML_LIBRARIES<span class=\"token punctuation\">}</span> $<span class=\"token punctuation\">{</span>SFML_DEPENDENCIES<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">endif</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token expression\">Install target</span></span>\n<span class=\"token function\">install</span><span class=\"token punctuation\">(</span>TARGETS $<span class=\"token punctuation\">{</span>EXECUTABLE_NAME<span class=\"token punctuation\">}</span> DESTINATION bin<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token expression\">CPack packaging</span></span>\n<span class=\"token function\">include</span><span class=\"token punctuation\">(</span>InstallRequiredSystemLibraries<span class=\"token punctuation\">)</span>\n<span class=\"token function\">set</span><span class=\"token punctuation\">(</span>CPACK_RESOURCE_FILE_LICENSE <span class=\"token string\">\"${CMAKE_SOURCE_DIR}/COPYING\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">set</span><span class=\"token punctuation\">(</span>CPACK_PACKAGE_VERSION_MAJOR <span class=\"token string\">\"${myproject_VERSION_MAJOR}\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">set</span><span class=\"token punctuation\">(</span>CPACK_PACKAGE_VERSION_MINOR <span class=\"token string\">\"${myproject_VERSION_MINOR}\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">include</span><span class=\"token punctuation\">(</span>CPack<span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>예제 코드 <code class=\"language-text\">main.cpp</code>는 다음과 같다.\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"config.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;SFML/Graphics.hpp></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// Code adapted from the SFML 2 \"Window\" example.</span>\n\n  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Version \"</span> <span class=\"token operator\">&lt;&lt;</span> myproject_VERSION_MAJOR <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\".\"</span> <span class=\"token operator\">&lt;&lt;</span> myproject_VERSION_MINOR <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n  sf<span class=\"token double-colon punctuation\">::</span>Window <span class=\"token function\">App</span><span class=\"token punctuation\">(</span>sf<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">VideoMode</span><span class=\"token punctuation\">(</span><span class=\"token number\">800</span><span class=\"token punctuation\">,</span> <span class=\"token number\">600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"myproject\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">.</span><span class=\"token function\">isOpen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    sf<span class=\"token double-colon punctuation\">::</span>Event Event<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">.</span><span class=\"token function\">pollEvent</span><span class=\"token punctuation\">(</span>Event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Event<span class=\"token punctuation\">.</span>type <span class=\"token operator\">==</span> sf<span class=\"token double-colon punctuation\">::</span>Event<span class=\"token double-colon punctuation\">::</span>Closed<span class=\"token punctuation\">)</span>\n        App<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    App<span class=\"token punctuation\">.</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>여기서 알 수 있는것은 <code class=\"language-text\">config.h</code>에서 설정 정보를 읽어와 출력하는 것.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">config.h.in</code> 파일을 다음과 같이 작성한다. <code class=\"language-text\">cmake</code>를 통해서 <code class=\"language-text\">config.h</code>를 생성할 것이다.\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">myproject_VERSION_MAJOR</span> <span class=\"token expression\">@myproject_VERSION_MAJOR@</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">myproject_VERSION_MINOR</span> <span class=\"token expression\">@myproject_VERSION_MINOR@</span></span></code></pre></div>\n</li>\n<li><code class=\"language-text\">$ cmake .</code> 명령어로 빌드한다. <code class=\"language-text\">Makefile</code>, <code class=\"language-text\">config.h</code> 등이 생성된다.</li>\n<li><code class=\"language-text\">make</code> 명령어로 컴파일한다. <code class=\"language-text\">myproject</code> 이름으로 실행파일이 생성된다. <code class=\"language-text\">$ ./myproject</code>로 실행해볼 수 있다.</li>\n</ol>\n<h2 id=\"lets-make-16-games-in-csfml\" style=\"position:relative;\"><a href=\"#lets-make-16-games-in-csfml\" aria-label=\"lets make 16 games in csfml permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Let's make 16 games in C++/SFML!</h2>\n<p><a href=\"https://www.youtube.com/@FamTrinli\">https://www.youtube.com/@FamTrinli</a></p>\n<p>SFML을 이용해 테트리스, 레이싱 게임, 애니팡 like 게임을 만드는 시리즈.\n배속이지만, 5분이내로 짧게 요약하고 있다. 상세설명 란에 코드도 공개하고 있다.</p>\n<h2 id=\"sfml-for-rust\" style=\"position:relative;\"><a href=\"#sfml-for-rust\" aria-label=\"sfml for rust permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SFML for Rust</h2>\n<p>SFML의 <a href=\"../rust\">Rust</a> binding.</p>\n<p><a href=\"https://github.com/jeremyletang/rust-sfml\">https://github.com/jeremyletang/rust-sfml</a></p>\n<ol>\n<li>SFML 설치가 필요하다: <code class=\"language-text\">brew install sfml</code> \\</li>\n</ol>\n<p>Homebrew로 설치하면 저장되는 위치를 알고 있어야 한다. osx 기준으로 <code class=\"language-text\">/opt/homebrew/Cellar/sfml/&lt;version></code>에 설치되었다.</p>\n<p>brew 문서에 이에 대한 내용이 전무해서, 일반적으로 설치 후 안내 문구가 뜨는 다른 패키지와 달리 사용 방법을 따로 찾아봐야 했다.</p>\n<ol start=\"2\">\n<li>\n<p><code class=\"language-text\">cargo add sfml</code>로 sfml crate 추가한다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">main.rs</code>를 작성하는데, rust-sfml에 있는 예제 코드를 가져왔다:</p>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">extern</span> <span class=\"token keyword\">crate</span> <span class=\"token module-declaration namespace\">sfml</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">sfml<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{</span>\n    <span class=\"token namespace\">graphics<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">CustomShape</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">CustomShapePoints</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">RenderTarget</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">RenderWindow</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Shape</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token namespace\">system<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Vector2f</span><span class=\"token punctuation\">,</span>\n    <span class=\"token namespace\">window<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{</span><span class=\"token class-name\">Event</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Key</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Style</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token attribute attr-name\">#[derive(Clone, Copy)]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">TriangleShape</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">CustomShapePoints</span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">TriangleShape</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">point_count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">usize</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token number\">3</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">point</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> point<span class=\"token punctuation\">:</span> <span class=\"token keyword\">usize</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Vector2f</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">match</span> point <span class=\"token punctuation\">{</span>\n            <span class=\"token number\">0</span> <span class=\"token operator\">=></span> <span class=\"token class-name\">Vector2f</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">580</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token number\">1</span> <span class=\"token operator\">=></span> <span class=\"token class-name\">Vector2f</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">:</span> <span class=\"token number\">400</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token number\">2</span> <span class=\"token operator\">=></span> <span class=\"token class-name\">Vector2f</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">:</span> <span class=\"token number\">780</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">580</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            p <span class=\"token operator\">=></span> <span class=\"token macro property\">panic!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Non-existent point: {p}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> window <span class=\"token operator\">=</span> <span class=\"token class-name\">RenderWindow</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">(</span><span class=\"token number\">800</span><span class=\"token punctuation\">,</span> <span class=\"token number\">600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"Custom shape\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Style</span><span class=\"token punctuation\">::</span><span class=\"token constant\">CLOSE</span><span class=\"token punctuation\">,</span>\n        <span class=\"token operator\">&amp;</span><span class=\"token class-name\">Default</span><span class=\"token punctuation\">::</span><span class=\"token function\">default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">set_vertical_sync_enabled</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> shape <span class=\"token operator\">=</span> <span class=\"token class-name\">CustomShape</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Box</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TriangleShape</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    shape<span class=\"token punctuation\">.</span><span class=\"token function\">set_fill_color</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">::</span><span class=\"token constant\">RED</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    shape<span class=\"token punctuation\">.</span><span class=\"token function\">set_outline_color</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">::</span><span class=\"token constant\">GREEN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    shape<span class=\"token punctuation\">.</span><span class=\"token function\">set_outline_thickness</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">loop</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">while</span> <span class=\"token keyword\">let</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">poll_event</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">match</span> event <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">Event</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Closed</span>\n                <span class=\"token operator\">|</span> <span class=\"token class-name\">Event</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">KeyPressed</span> <span class=\"token punctuation\">{</span>\n                    code<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Key</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Escape</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">..</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">,</span>\n                _ <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        window<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">::</span><span class=\"token constant\">BLACK</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        window<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        window<span class=\"token punctuation\">.</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"4\">\n<li>(필요 시)빌드 시 SFML 환경 변수<code class=\"language-text\">SFML_INCLUDE_DIR</code>, <code class=\"language-text\">SFML_LIBS_DIR</code> 2개를 전달이 필요할 수도 있다.</li>\n</ol>\n<p>Homebrew로 설치했기 때문에 해당 경로를 전달했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">SFML_INCLUDE_DIR</span><span class=\"token operator\">=</span>/opt/homebrew/Cellar/sfml/2.6.0/include <span class=\"token assign-left variable\">SFML_LIBS_DIR</span><span class=\"token operator\">=</span>/opt/homebrew/Cellar/sfml/2.6.0/lib/ <span class=\"token function\">cargo</span> build</code></pre></div>\n<ol start=\"5\">\n<li>실행 파일을 실행해 본다: <code class=\"language-text\">./target/debug/&lt;project-name></code></li>\n</ol>\n<p>cargo build 대신 빠르게 실핼하는 방법을 좀 찾아봐야겠다.</p>"}},"site":{"siteMetadata":{"gitHubRepositoryUrl":"https://github.com/edunga1/cat-logic"}}},"pageContext":{"id":"d83026bf-e23a-50dd-a4eb-5d0c357c54d0"}},"staticQueryHashes":[],"slicesMap":{}}