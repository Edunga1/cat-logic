{"componentChunkName":"component---src-components-gatsby-templates-wiki-tsx","path":"/wiki/sfml/","result":{"data":{"markdownRemark":{"headings":[{"value":"SFML"}],"fields":{"relatedDocs":[{"slug":"reverse-engineering","similarity":0.7564180908},{"slug":"design-pattern","similarity":0.7529998102},{"slug":"kubernetes","similarity":0.7676191684},{"slug":"markdown","similarity":0.7860657855},{"slug":"kotlin","similarity":0.7659540301},{"slug":"jira","similarity":0.7313730526},{"slug":"book","similarity":0.766435169},{"slug":"vim","similarity":0.8055138575},{"slug":"hardware","similarity":0.774863442},{"slug":"network","similarity":0.7489921591},{"slug":"architecture","similarity":0.8081077539},{"slug":"python","similarity":0.7914308117},{"slug":"physics","similarity":0.7699403439},{"slug":"experience-review","similarity":0.7694206629},{"slug":"2016-08-27-gdg-webtech-workshop-nnn","similarity":0.7825668247},{"slug":"css","similarity":0.7839717974},{"slug":"redis","similarity":0.7262148054},{"slug":"embeddings","similarity":0.7672481712},{"slug":"clean-code","similarity":0.7866505538},{"slug":"scp","similarity":0.7440455443},{"slug":"vimwiki","similarity":0.7876892548},{"slug":"cat-logic","similarity":0.7834110332},{"slug":"rust","similarity":0.8933049923},{"slug":"github","similarity":0.7596841448},{"slug":"2016-11-16-google-campus-two-things-you-must-keep-in-google-play","similarity":0.7983864454},{"slug":"jargon","similarity":0.7638555784},{"slug":"windows","similarity":0.7954846504},{"slug":"test-driven-development","similarity":0.77811623},{"slug":"javascript","similarity":0.7929595922},{"slug":"c-sharp","similarity":0.7440004847},{"slug":"linux","similarity":0.7977172375},{"slug":"testing","similarity":0.7598574806},{"slug":"valve","similarity":0.7620308372},{"slug":"sentry","similarity":0.7706722321},{"slug":"continuous-integration-and-deployment","similarity":0.7849574678},{"slug":"object-oriented-programming","similarity":0.781165908},{"slug":"angularjs","similarity":0.7577134668},{"slug":"webgl","similarity":0.7876014117},{"slug":"google-analytics","similarity":0.7206193604},{"slug":"quotation","similarity":0.7548515198},{"slug":"airflow","similarity":0.7666430995},{"slug":"reactjs","similarity":0.7940620648},{"slug":"unicode","similarity":0.7388893997},{"slug":"mac-os","similarity":0.8192421986},{"slug":"sfml","similarity":1},{"slug":"inspiration","similarity":0.7881773929},{"slug":"spring-framework","similarity":0.7707031452},{"slug":"data-structure","similarity":0.7512180482},{"slug":"java","similarity":0.7501279419},{"slug":"logging","similarity":0.7569653979},{"slug":"swagger","similarity":0.7388168979},{"slug":"vimenter-2023","similarity":0.7817318965},{"slug":"reactive-extensions","similarity":0.708857227},{"slug":"windows-subsystem-for-linux","similarity":0.7959012428},{"slug":"mail","similarity":0.7408088969},{"slug":"unity3d","similarity":0.8011943034},{"slug":"web","similarity":0.7902778501},{"slug":"code-review","similarity":0.7772788312},{"slug":"git","similarity":0.7969438398},{"slug":"language-server-protocol","similarity":0.784035009},{"slug":"algorithm-practice","similarity":0.7238571844},{"slug":"programming-paradigm","similarity":0.7786801664},{"slug":"elasticsearch","similarity":0.7822794569},{"slug":"idea-methodology","similarity":0.7617895042},{"slug":"software-development","similarity":0.8094300801},{"slug":"docker","similarity":0.8046188609},{"slug":"aws","similarity":0.7708152797},{"slug":"programming-convention","similarity":0.7742540739},{"slug":"devops","similarity":0.75085786},{"slug":"html-canvas","similarity":0.7498299575},{"slug":"programming-philosophy","similarity":0.8100693285},{"slug":"jetbrains","similarity":0.7883163401},{"slug":"ionic-framework","similarity":0.7549174234},{"slug":"data-analysis","similarity":0.7433618758},{"slug":"game","similarity":0.779390643},{"slug":"machine-learning","similarity":0.7889254476},{"slug":"nodejs","similarity":0.8028111319},{"slug":"shell","similarity":0.7925301263},{"slug":"gatsbyjs","similarity":0.8064011499},{"slug":"html","similarity":0.7783777955},{"slug":"computer-graphics","similarity":0.7535494646},{"slug":"vuejs","similarity":0.7585599253},{"slug":"tools","similarity":0.7949373436},{"slug":"crontab","similarity":0.7805482273},{"slug":"database","similarity":0.7976242552},{"slug":"추론 애플리케이션","similarity":0.796706999}]},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#sfml\">SFML</a></p>\n<ul>\n<li><a href=\"#sfml-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EB%B9%8C%EB%93%9C%ED%95%98%EA%B8%B0\">SFML 프로젝트 빌드하기</a></li>\n<li><a href=\"#lets-make-16-games-in-csfml\">Let's make 16 games in C++/SFML!</a></li>\n<li><a href=\"#sfml-for-rust\">SFML for Rust</a></li>\n</ul>\n</li>\n</ul>","html":"<h1 id=\"sfml\" style=\"position:relative;\"><a href=\"#sfml\" aria-label=\"sfml permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SFML</h1>\n<p>Simple and Fast Multimedia Library. 줄여서 SFML이라 한다.\n멀티미디어를 가져오거나 그리고, Window를 만드는 API를 제공한다.</p>\n<p>SDL코드라는 그래픽 라이브러리가 유명한데, SFML은 나오지 얼마되지 않았지만, 좋다고 한다. 오픈헥사곤도 SFML로 만들어 졌다.</p>\n<p>C++ 라이브러리로 사용하거나 다른 언어의 바인딩을 통해 사용할 수 있다.\n<a href=\"https://github.com/jeremyletang/rust-sfml\">rust</a>, <a href=\"https://github.com/intjelic/python-sfml\">python</a>, <a href=\"https://github.com/XadillaX/sfml.js\">Node.js</a> 등.</p>\n<p><a href=\"https://www.sfml-dev.org/tutorials/2.5/graphics-draw.php\">공식문서</a>에 나와있는 튜토리얼 중 하나:</p>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre class=\"language-c++\"><code class=\"language-c++\">#include &lt;SFML/Graphics.hpp&gt;\n\nint main()\n{\n    // create the window\n    sf::RenderWindow window(sf::VideoMode(800, 600), &quot;My window&quot;);\n\n    // run the program as long as the window is open\n    while (window.isOpen())\n    {\n        // check all the window&#39;s events that were triggered since the last iteration of the loop\n        sf::Event event;\n        while (window.pollEvent(event))\n        {\n            // &quot;close requested&quot; event: we close the window\n            if (event.type == sf::Event::Closed)\n                window.close();\n        }\n\n        // clear the window with black color\n        window.clear(sf::Color::Black);\n\n        // draw everything here...\n        // window.draw(...);\n\n        // end the current frame\n        window.display();\n    }\n\n    return 0;\n}</code></pre></div>\n<p>윈도우를 생성하고, 반복문에서 이벤트를 계속 처리하는 구조다.</p>\n<h2 id=\"sfml-프로젝트-빌드하기\" style=\"position:relative;\"><a href=\"#sfml-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EB%B9%8C%EB%93%9C%ED%95%98%EA%B8%B0\" aria-label=\"sfml 프로젝트 빌드하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SFML 프로젝트 빌드하기</h2>\n<p>OSX 기준.</p>\n<ol>\n<li>SFML 라이브러리를 다운받는다. <strong>homebrew</strong>로 설치하면 간단하다. <code class=\"language-text\">$ brew install sfml</code></li>\n<li>빌드 도구 CMake를 다운받는다. <strong>homebrew</strong>는 <code class=\"language-text\">$ brew install cmake</code></li>\n</ol>\n<p><strong>아래부터는 <a href=\"https://github.com/SFML/SFML/wiki/Tutorial%3A-Build-your-SFML-project-with-CMake\">이 링크</a>에 따름</strong></p>\n<ol start=\"2\">\n<li>프로젝트 루트에 <code class=\"language-text\">cmake_modules</code> 폴더를 생성</li>\n<li><a href=\"https://github.com/SFML/SFML-Game-Development-Book/blob/master/CMake/FindSFML.cmake\">FindSFML.cmake</a> 작성하고, <code class=\"language-text\">cmake_modules</code> 안에 둔다.</li>\n<li><code class=\"language-text\">CmakeLists.txt</code> 작성하여 프로젝트 루트에 둔다. 위 폴더와는 관련 없다.\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre class=\"language-c++\"><code class=\"language-c++\">#Change this if you need to target a specific CMake version\ncmake_minimum_required(VERSION 2.6)\n\n\n# Enable debug symbols by default\n# must be done before project() statement\nif(NOT CMAKE_BUILD_TYPE)\n  set(CMAKE_BUILD_TYPE Debug CACHE STRING &quot;Choose the type of build (Debug or Release)&quot; FORCE)\nendif()\n# (you can also set it on the command line: -D CMAKE_BUILD_TYPE=Release)\n\nproject(myproject)\n\n# Set version information in a config.h file\nset(myproject_VERSION_MAJOR 1)\nset(myproject_VERSION_MINOR 0)\nconfigure_file(\n  &quot;${PROJECT_SOURCE_DIR}/config.h.in&quot;\n  &quot;${PROJECT_BINARY_DIR}/config.h&quot;\n  )\ninclude_directories(&quot;${PROJECT_BINARY_DIR}&quot;)\n\n# Define sources and executable\nset(EXECUTABLE_NAME &quot;myproject&quot;)\nadd_executable(${EXECUTABLE_NAME} main.cpp)\n\n\n# Detect and add SFML\nset(CMAKE_MODULE_PATH &quot;${CMAKE_SOURCE_DIR}/cmake_modules&quot; ${CMAKE_MODULE_PATH})\n#Find any version 2.X of SFML\n#See the FindSFML.cmake file for additional details and instructions\nfind_package(SFML 2 REQUIRED network audio graphics window system)\nif(SFML_FOUND)\n  include_directories(${SFML_INCLUDE_DIR})\n  target_link_libraries(${EXECUTABLE_NAME} ${SFML_LIBRARIES} ${SFML_DEPENDENCIES})\nendif()\n\n\n# Install target\ninstall(TARGETS ${EXECUTABLE_NAME} DESTINATION bin)\n\n\n# CPack packaging\ninclude(InstallRequiredSystemLibraries)\nset(CPACK_RESOURCE_FILE_LICENSE &quot;${CMAKE_SOURCE_DIR}/COPYING&quot;)\nset(CPACK_PACKAGE_VERSION_MAJOR &quot;${myproject_VERSION_MAJOR}&quot;)\nset(CPACK_PACKAGE_VERSION_MINOR &quot;${myproject_VERSION_MINOR}&quot;)\ninclude(CPack)</code></pre></div>\n</li>\n<li>예제 코드 <code class=\"language-text\">main.cpp</code>는 다음과 같다.\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre class=\"language-c++\"><code class=\"language-c++\">#include &quot;config.h&quot;\n#include &lt;iostream&gt;\n#include &lt;SFML/Graphics.hpp&gt;\nusing namespace std;\n\nint main(int argc, char* argv[]) {\n\n  // Code adapted from the SFML 2 &quot;Window&quot; example.\n\n  cout &lt;&lt; &quot;Version &quot; &lt;&lt; myproject_VERSION_MAJOR &lt;&lt; &quot;.&quot; &lt;&lt; myproject_VERSION_MINOR &lt;&lt; endl;\n\n  sf::Window App(sf::VideoMode(800, 600), &quot;myproject&quot;);\n\n  while (App.isOpen()) {\n    sf::Event Event;\n    while (App.pollEvent(Event)) {\n      if (Event.type == sf::Event::Closed)\n        App.close();\n    }\n    App.display();\n  }\n}</code></pre></div>\n<ul>\n<li>여기서 알 수 있는것은 <code class=\"language-text\">config.h</code>에서 설정 정보를 읽어와 출력하는 것.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">config.h.in</code> 파일을 다음과 같이 작성한다. <code class=\"language-text\">cmake</code>를 통해서 <code class=\"language-text\">config.h</code>를 생성할 것이다.\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre class=\"language-c++\"><code class=\"language-c++\">#define myproject_VERSION_MAJOR @myproject_VERSION_MAJOR@\n#define myproject_VERSION_MINOR @myproject_VERSION_MINOR@</code></pre></div>\n</li>\n<li><code class=\"language-text\">$ cmake .</code> 명령어로 빌드한다. <code class=\"language-text\">Makefile</code>, <code class=\"language-text\">config.h</code> 등이 생성된다.</li>\n<li><code class=\"language-text\">make</code> 명령어로 컴파일한다. <code class=\"language-text\">myproject</code> 이름으로 실행파일이 생성된다. <code class=\"language-text\">$ ./myproject</code>로 실행해볼 수 있다.</li>\n</ol>\n<h2 id=\"lets-make-16-games-in-csfml\" style=\"position:relative;\"><a href=\"#lets-make-16-games-in-csfml\" aria-label=\"lets make 16 games in csfml permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Let's make 16 games in C++/SFML!</h2>\n<p><a href=\"https://www.youtube.com/@FamTrinli\">https://www.youtube.com/@FamTrinli</a></p>\n<p>SFML을 이용해 테트리스, 레이싱 게임, 애니팡 like 게임을 만드는 시리즈.\n배속이지만, 5분이내로 짧게 요약하고 있다. 상세설명 란에 코드도 공개하고 있다.</p>\n<h2 id=\"sfml-for-rust\" style=\"position:relative;\"><a href=\"#sfml-for-rust\" aria-label=\"sfml for rust permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SFML for Rust</h2>\n<p>SFML의 <a href=\"../rust\">Rust</a> binding.</p>\n<p><a href=\"https://github.com/jeremyletang/rust-sfml\">https://github.com/jeremyletang/rust-sfml</a></p>\n<ol>\n<li>SFML 설치가 필요하다: <code class=\"language-text\">brew install sfml</code> \\</li>\n</ol>\n<p>Homebrew로 설치하면 저장되는 위치를 알고 있어야 한다. osx 기준으로 <code class=\"language-text\">/opt/homebrew/Cellar/sfml/&lt;version></code>에 설치되었다.</p>\n<p>brew 문서에 이에 대한 내용이 전무해서, 일반적으로 설치 후 안내 문구가 뜨는 다른 패키지와 달리 사용 방법을 따로 찾아봐야 했다.</p>\n<ol start=\"2\">\n<li>\n<p><code class=\"language-text\">cargo add sfml</code>로 sfml crate 추가한다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">main.rs</code>를 작성하는데, rust-sfml에 있는 예제 코드를 가져왔다:</p>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">extern</span> <span class=\"token keyword\">crate</span> <span class=\"token module-declaration namespace\">sfml</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">sfml<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{</span>\n    <span class=\"token namespace\">graphics<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">CustomShape</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">CustomShapePoints</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">RenderTarget</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">RenderWindow</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Shape</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token namespace\">system<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Vector2f</span><span class=\"token punctuation\">,</span>\n    <span class=\"token namespace\">window<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{</span><span class=\"token class-name\">Event</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Key</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Style</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token attribute attr-name\">#[derive(Clone, Copy)]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">TriangleShape</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">CustomShapePoints</span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">TriangleShape</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">point_count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">usize</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token number\">3</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">point</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> point<span class=\"token punctuation\">:</span> <span class=\"token keyword\">usize</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Vector2f</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">match</span> point <span class=\"token punctuation\">{</span>\n            <span class=\"token number\">0</span> <span class=\"token operator\">=></span> <span class=\"token class-name\">Vector2f</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">580</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token number\">1</span> <span class=\"token operator\">=></span> <span class=\"token class-name\">Vector2f</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">:</span> <span class=\"token number\">400</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token number\">2</span> <span class=\"token operator\">=></span> <span class=\"token class-name\">Vector2f</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">:</span> <span class=\"token number\">780</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">580</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            p <span class=\"token operator\">=></span> <span class=\"token macro property\">panic!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Non-existent point: {p}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> window <span class=\"token operator\">=</span> <span class=\"token class-name\">RenderWindow</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">(</span><span class=\"token number\">800</span><span class=\"token punctuation\">,</span> <span class=\"token number\">600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"Custom shape\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Style</span><span class=\"token punctuation\">::</span><span class=\"token constant\">CLOSE</span><span class=\"token punctuation\">,</span>\n        <span class=\"token operator\">&amp;</span><span class=\"token class-name\">Default</span><span class=\"token punctuation\">::</span><span class=\"token function\">default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">set_vertical_sync_enabled</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> shape <span class=\"token operator\">=</span> <span class=\"token class-name\">CustomShape</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Box</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TriangleShape</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    shape<span class=\"token punctuation\">.</span><span class=\"token function\">set_fill_color</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">::</span><span class=\"token constant\">RED</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    shape<span class=\"token punctuation\">.</span><span class=\"token function\">set_outline_color</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">::</span><span class=\"token constant\">GREEN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    shape<span class=\"token punctuation\">.</span><span class=\"token function\">set_outline_thickness</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">loop</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">while</span> <span class=\"token keyword\">let</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">poll_event</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">match</span> event <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">Event</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Closed</span>\n                <span class=\"token operator\">|</span> <span class=\"token class-name\">Event</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">KeyPressed</span> <span class=\"token punctuation\">{</span>\n                    code<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Key</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Escape</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">..</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">,</span>\n                _ <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        window<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">::</span><span class=\"token constant\">BLACK</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        window<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        window<span class=\"token punctuation\">.</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"4\">\n<li>빌드 시 SFML 환경 변수<code class=\"language-text\">SFML_INCLUDE_DIR</code>, <code class=\"language-text\">SFML_LIBS_DIR</code> 2개를 전달해야 한다. \\</li>\n</ol>\n<p>Homebrew로 설치했기 때문에 해당 경로를 전달했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">SFML_INCLUDE_DIR</span><span class=\"token operator\">=</span>/opt/homebrew/Cellar/sfml/2.6.0/include <span class=\"token assign-left variable\">SFML_LIBS_DIR</span><span class=\"token operator\">=</span>/opt/homebrew/Cellar/sfml/2.6.0/lib/ <span class=\"token function\">cargo</span> build</code></pre></div>\n<ol start=\"5\">\n<li>실행 파일을 실행해 본다: <code class=\"language-text\">./target/debug/&lt;project-name></code></li>\n</ol>\n<p>cargo build 대신 삐르게 실핼하는 방법을 좀 찾아봐야겠다.</p>"}},"pageContext":{"id":"6d32412f-2bfb-5ffb-aee8-07eeb3ce72b3"}},"staticQueryHashes":[],"slicesMap":{}}