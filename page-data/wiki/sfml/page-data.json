{"componentChunkName":"component---src-pages-wiki-markdown-remark-fields-slug-tsx","path":"/wiki/sfml/","result":{"data":{"markdownRemark":{"headings":[{"value":"SFML"}],"tableOfContents":"<ul>\n<li>\n<p><a href=\"#sfml\">SFML</a></p>\n<ul>\n<li><a href=\"#sfml-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EB%B9%8C%EB%93%9C%ED%95%98%EA%B8%B0\">SFML 프로젝트 빌드하기</a></li>\n<li><a href=\"#lets-make-16-games-in-csfml\">Let's make 16 games in C++/SFML!</a></li>\n<li><a href=\"#sfml-for-rust\">SFML for Rust</a></li>\n</ul>\n</li>\n</ul>","html":"<h1 id=\"sfml\" style=\"position:relative;\"><a href=\"#sfml\" aria-label=\"sfml permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SFML</h1>\n<p>Simple and Fast Multimedia Library. 줄여서 SFML이라 한다.\n멀티미디어를 가져오거나 그리고, Window를 만드는 API를 제공한다.</p>\n<p>SDL코드라는 그래픽 라이브러리가 유명한데, SFML은 나오지 얼마되지 않았지만, 좋다고 한다. 오픈헥사곤도 SFML로 만들어 졌다.</p>\n<p>C++ 라이브러리로 사용하거나 다른 언어의 바인딩을 통해 사용할 수 있다.\n<a href=\"https://github.com/jeremyletang/rust-sfml\">rust</a>, <a href=\"https://github.com/intjelic/python-sfml\">python</a>, <a href=\"https://github.com/XadillaX/sfml.js\">Node.js</a> 등.</p>\n<p><a href=\"https://www.sfml-dev.org/tutorials/2.5/graphics-draw.php\">공식문서</a>에 나와있는 튜토리얼 중 하나:</p>\n<pre><code class=\"language-c++\">#include &#x3C;SFML/Graphics.hpp>\n\nint main()\n{\n    // create the window\n    sf::RenderWindow window(sf::VideoMode(800, 600), \"My window\");\n\n    // run the program as long as the window is open\n    while (window.isOpen())\n    {\n        // check all the window's events that were triggered since the last iteration of the loop\n        sf::Event event;\n        while (window.pollEvent(event))\n        {\n            // \"close requested\" event: we close the window\n            if (event.type == sf::Event::Closed)\n                window.close();\n        }\n\n        // clear the window with black color\n        window.clear(sf::Color::Black);\n\n        // draw everything here...\n        // window.draw(...);\n\n        // end the current frame\n        window.display();\n    }\n\n    return 0;\n}\n</code></pre>\n<p>윈도우를 생성하고, 반복문에서 이벤트를 계속 처리하는 구조다.</p>\n<h2 id=\"sfml-프로젝트-빌드하기\" style=\"position:relative;\"><a href=\"#sfml-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EB%B9%8C%EB%93%9C%ED%95%98%EA%B8%B0\" aria-label=\"sfml 프로젝트 빌드하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SFML 프로젝트 빌드하기</h2>\n<p>OSX 기준.</p>\n<ol>\n<li>SFML 라이브러리를 다운받는다. <strong>homebrew</strong>로 설치하면 간단하다. <code>$ brew install sfml</code></li>\n<li>빌드 도구 CMake를 다운받는다. <strong>homebrew</strong>는 <code>$ brew install cmake</code></li>\n</ol>\n<p><strong>아래부터는 <a href=\"https://github.com/SFML/SFML/wiki/Tutorial%3A-Build-your-SFML-project-with-CMake\">이 링크</a>에 따름</strong></p>\n<ol start=\"2\">\n<li>프로젝트 루트에 <code>cmake_modules</code> 폴더를 생성</li>\n<li><a href=\"https://github.com/SFML/SFML-Game-Development-Book/blob/master/CMake/FindSFML.cmake\">FindSFML.cmake</a> 작성하고, <code>cmake_modules</code> 안에 둔다.</li>\n<li><code>CmakeLists.txt</code> 작성하여 프로젝트 루트에 둔다. 위 폴더와는 관련 없다.\n<pre><code class=\"language-c++\">#Change this if you need to target a specific CMake version\ncmake_minimum_required(VERSION 2.6)\n\n\n# Enable debug symbols by default\n# must be done before project() statement\nif(NOT CMAKE_BUILD_TYPE)\n  set(CMAKE_BUILD_TYPE Debug CACHE STRING \"Choose the type of build (Debug or Release)\" FORCE)\nendif()\n# (you can also set it on the command line: -D CMAKE_BUILD_TYPE=Release)\n\nproject(myproject)\n\n# Set version information in a config.h file\nset(myproject_VERSION_MAJOR 1)\nset(myproject_VERSION_MINOR 0)\nconfigure_file(\n  \"${PROJECT_SOURCE_DIR}/config.h.in\"\n  \"${PROJECT_BINARY_DIR}/config.h\"\n  )\ninclude_directories(\"${PROJECT_BINARY_DIR}\")\n\n# Define sources and executable\nset(EXECUTABLE_NAME \"myproject\")\nadd_executable(${EXECUTABLE_NAME} main.cpp)\n\n\n# Detect and add SFML\nset(CMAKE_MODULE_PATH \"${CMAKE_SOURCE_DIR}/cmake_modules\" ${CMAKE_MODULE_PATH})\n#Find any version 2.X of SFML\n#See the FindSFML.cmake file for additional details and instructions\nfind_package(SFML 2 REQUIRED network audio graphics window system)\nif(SFML_FOUND)\n  include_directories(${SFML_INCLUDE_DIR})\n  target_link_libraries(${EXECUTABLE_NAME} ${SFML_LIBRARIES} ${SFML_DEPENDENCIES})\nendif()\n\n\n# Install target\ninstall(TARGETS ${EXECUTABLE_NAME} DESTINATION bin)\n\n\n# CPack packaging\ninclude(InstallRequiredSystemLibraries)\nset(CPACK_RESOURCE_FILE_LICENSE \"${CMAKE_SOURCE_DIR}/COPYING\")\nset(CPACK_PACKAGE_VERSION_MAJOR \"${myproject_VERSION_MAJOR}\")\nset(CPACK_PACKAGE_VERSION_MINOR \"${myproject_VERSION_MINOR}\")\ninclude(CPack)\n</code></pre>\n</li>\n<li>예제 코드 <code>main.cpp</code>는 다음과 같다.\n<pre><code class=\"language-c++\">#include \"config.h\"\n#include &#x3C;iostream>\n#include &#x3C;SFML/Graphics.hpp>\nusing namespace std;\n\nint main(int argc, char* argv[]) {\n\n  // Code adapted from the SFML 2 \"Window\" example.\n\n  cout &#x3C;&#x3C; \"Version \" &#x3C;&#x3C; myproject_VERSION_MAJOR &#x3C;&#x3C; \".\" &#x3C;&#x3C; myproject_VERSION_MINOR &#x3C;&#x3C; endl;\n\n  sf::Window App(sf::VideoMode(800, 600), \"myproject\");\n\n  while (App.isOpen()) {\n    sf::Event Event;\n    while (App.pollEvent(Event)) {\n      if (Event.type == sf::Event::Closed)\n        App.close();\n    }\n    App.display();\n  }\n}\n</code></pre>\n<ul>\n<li>여기서 알 수 있는것은 <code>config.h</code>에서 설정 정보를 읽어와 출력하는 것.</li>\n</ul>\n</li>\n<li><code>config.h.in</code> 파일을 다음과 같이 작성한다. <code>cmake</code>를 통해서 <code>config.h</code>를 생성할 것이다.\n<pre><code class=\"language-c++\">#define myproject_VERSION_MAJOR @myproject_VERSION_MAJOR@\n#define myproject_VERSION_MINOR @myproject_VERSION_MINOR@\n</code></pre>\n</li>\n<li><code>$ cmake .</code> 명령어로 빌드한다. <code>Makefile</code>, <code>config.h</code> 등이 생성된다.</li>\n<li><code>make</code> 명령어로 컴파일한다. <code>myproject</code> 이름으로 실행파일이 생성된다. <code>$ ./myproject</code>로 실행해볼 수 있다.</li>\n</ol>\n<h2 id=\"lets-make-16-games-in-csfml\" style=\"position:relative;\"><a href=\"#lets-make-16-games-in-csfml\" aria-label=\"lets make 16 games in csfml permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Let's make 16 games in C++/SFML!</h2>\n<p><a href=\"https://www.youtube.com/@FamTrinli\">https://www.youtube.com/@FamTrinli</a></p>\n<p>SFML을 이용해 테트리스, 레이싱 게임, 애니팡 like 게임을 만드는 시리즈.\n배속이지만, 5분이내로 짧게 요약하고 있다. 상세설명 란에 코드도 공개하고 있다.</p>\n<h2 id=\"sfml-for-rust\" style=\"position:relative;\"><a href=\"#sfml-for-rust\" aria-label=\"sfml for rust permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SFML for Rust</h2>\n<p>SFML의 <a href=\"../rust\">Rust</a> binding.</p>\n<p><a href=\"https://github.com/jeremyletang/rust-sfml\">https://github.com/jeremyletang/rust-sfml</a></p>\n<ol>\n<li>SFML 설치가 필요하다: <code>brew install sfml</code> \\</li>\n</ol>\n<p>Homebrew로 설치하면 저장되는 위치를 알고 있어야 한다. osx 기준으로 <code>/opt/homebrew/Cellar/sfml/&#x3C;version></code>에 설치되었다.</p>\n<p>brew 문서에 이에 대한 내용이 전무해서, 일반적으로 설치 후 안내 문구가 뜨는 다른 패키지와 달리 사용 방법을 따로 찾아봐야 했다.</p>\n<ol start=\"2\">\n<li>\n<p><code>cargo add sfml</code>로 sfml crate 추가한다.</p>\n</li>\n<li>\n<p><code>main.rs</code>를 작성하는데, rust-sfml에 있는 예제 코드를 가져왔다:</p>\n</li>\n</ol>\n<pre><code class=\"language-rust\">extern crate sfml;\n\nuse sfml::{\n    graphics::{Color, CustomShape, CustomShapePoints, RenderTarget, RenderWindow, Shape},\n    system::Vector2f,\n    window::{Event, Key, Style},\n};\n\n#[derive(Clone, Copy)]\npub struct TriangleShape;\n\nimpl CustomShapePoints for TriangleShape {\n    fn point_count(&#x26;self) -> usize {\n        3\n    }\n\n    fn point(&#x26;self, point: usize) -> Vector2f {\n        match point {\n            0 => Vector2f { x: 20., y: 580. },\n            1 => Vector2f { x: 400., y: 20. },\n            2 => Vector2f { x: 780., y: 580. },\n            p => panic!(\"Non-existent point: {p}\"),\n        }\n    }\n}\n\nfn main() {\n    let mut window = RenderWindow::new(\n        (800, 600),\n        \"Custom shape\",\n        Style::CLOSE,\n        &#x26;Default::default(),\n    );\n    window.set_vertical_sync_enabled(true);\n\n    let mut shape = CustomShape::new(Box::new(TriangleShape));\n    shape.set_fill_color(Color::RED);\n    shape.set_outline_color(Color::GREEN);\n    shape.set_outline_thickness(3.);\n\n    loop {\n        while let Some(event) = window.poll_event() {\n            match event {\n                Event::Closed\n                | Event::KeyPressed {\n                    code: Key::Escape, ..\n                } => return,\n                _ => {}\n            }\n        }\n\n        window.clear(Color::BLACK);\n        window.draw(&#x26;shape);\n        window.display();\n    }\n}\n</code></pre>\n<ol start=\"4\">\n<li>빌드 시 SFML 환경 변수<code>SFML_INCLUDE_DIR</code>, <code>SFML_LIBS_DIR</code> 2개를 전달해야 한다. \\</li>\n</ol>\n<p>Homebrew로 설치했기 때문에 해당 경로를 전달했다.</p>\n<pre><code class=\"language-bash\">$ SFML_INCLUDE_DIR=/opt/homebrew/Cellar/sfml/2.6.0/include SFML_LIBS_DIR=/opt/homebrew/Cellar/sfml/2.6.0/lib/ cargo build\n</code></pre>\n<ol start=\"5\">\n<li>실행 파일을 실행해 본다: <code>./target/debug/&#x3C;project-name></code></li>\n</ol>\n<p>cargo build 대신 삐르게 실핼하는 방법을 좀 찾아봐야겠다.</p>"}},"pageContext":{"id":"6d32412f-2bfb-5ffb-aee8-07eeb3ce72b3","fields__slug":"/sfml/","__params":{"fields__slug":"sfml"}}},"staticQueryHashes":[],"slicesMap":{}}