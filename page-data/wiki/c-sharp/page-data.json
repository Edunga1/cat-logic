{"componentChunkName":"component---src-pages-wiki-markdown-remark-fields-slug-tsx","path":"/wiki/c-sharp/","result":{"data":{"markdownRemark":{"tableOfContents":"<ul>\n<li><a href=\"#c\">C#</a></li>\n<li><a href=\"#event\">Event</a></li>\n<li><a href=\"#events-or-an-observer-interface-proscons\">events or an observer interface? Pros/cons?</a></li>\n</ul>","html":"<h1 id=\"c\" style=\"position:relative;\"><a href=\"#c\" aria-label=\"c permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>C#</h1>\n<h1 id=\"event\" style=\"position:relative;\"><a href=\"#event\" aria-label=\"event permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Event</h1>\n<p>C#에서 옵저버 패턴과 유사한 기능을 하는 event가 있다.</p>\n<p>이벤트 정의:</p>\n<pre><code class=\"language-c#\">public delegate void PositionEvent(Vector3 position);\npublic event PositionEvent onPositionChanged;\n</code></pre>\n<p>delegate는 함수를 표현하는 방법이다.</p>\n<p>이벤트 등록:</p>\n<pre><code class=\"language-c#\">onPositionChanged += SyncPosition;\n</code></pre>\n<p><code>SyncPosition</code>은 <code>PositionEvent</code>와 인터페이스가 같은 함수이어야 한다.\n<code>+</code> 연산자를 사용하여 이벤트에 함수를 등록한다.</p>\n<p>이벤트 발생:</p>\n<pre><code class=\"language-c#\">onPositionChanged(new Vector3(0, 0, 0));\n</code></pre>\n<p>이제 등록된 <code>SyncPosition</code>이 호출된다.</p>\n<h1 id=\"events-or-an-observer-interface-proscons\" style=\"position:relative;\"><a href=\"#events-or-an-observer-interface-proscons\" aria-label=\"events or an observer interface proscons permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>events or an observer interface? Pros/cons?</h1>\n<p><a href=\"https://stackoverflow.com/questions/550785\">https://stackoverflow.com/questions/550785</a></p>\n<p>첫 번째 답변은 이벤트를 사용함에 있어서 특징에 대해서 설명한다:</p>\n<blockquote>\n<p>Less maintenance\n적은 유지보수</p>\n<p>The pattern is built into the language so everybody knows how to use it\n패턴이 언어에 내장되어 있기 때문에, 누구나 사용하는 방법에 대해 알고 있습니다.</p>\n</blockquote>\n<p>두 번째 답변:</p>\n<blockquote>\n<p>Hmm, events can be used to implement the Observer pattern. In fact, using events can be regarded as another implementation of the observer-pattern imho.\n내 의견으로는, event를 이용하여 옵저버 패턴을 구현할 수 있습니다. 사실은, event를 사용하는 것은 옵저버 패턴을 구현했다고 볼 수 있습니다.</p>\n</blockquote>\n<p>두 번째 답변의 덧글 중:</p>\n<blockquote>\n<p>Absolutely. This is a bit like asking, \"Should I implement the iterator pattern or use foreach and IEnumerable?\n이건 이렇게 묻는 것과 같습니다. \"이터레이터 패턴을 구현해야 하나요? 아니면 foreach와 IEnumrable을 사용해야 하나요?\"</p>\n</blockquote>"}},"pageContext":{"id":"dda47636-ac01-532a-b8c5-c8ae24d9c39c","fields__slug":"/c-sharp/","__params":{"fields__slug":"c-sharp"}}},"staticQueryHashes":[],"slicesMap":{}}