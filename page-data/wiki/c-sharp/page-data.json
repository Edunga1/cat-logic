{"componentChunkName":"component---src-pages-wiki-markdown-remark-fields-slug-tsx","path":"/wiki/c-sharp/","result":{"data":{"markdownRemark":{"headings":[{"value":"C#"}],"fields":{"relatedDocs":[{"slug":"javascript","similarity":0.8083817226},{"slug":"web","similarity":0.7653351177},{"slug":"2016-08-27-gdg-webtech-workshop-nnn","similarity":0.7605699084},{"slug":"crontab","similarity":0.7434359043},{"slug":"idea-methodology","similarity":0.7474401029},{"slug":"2016-11-16-google-campus-two-things-you-must-keep-in-google-play","similarity":0.7727858238},{"slug":"spring-framework","similarity":0.7571760897},{"slug":"aws","similarity":0.7487885669},{"slug":"git","similarity":0.7591906235},{"slug":"algorithm-practice","similarity":0.7213525061},{"slug":"docker","similarity":0.7390300238},{"slug":"scp","similarity":0.7085198227},{"slug":"mac-os","similarity":0.7413981789},{"slug":"testing","similarity":0.756408629},{"slug":"machine-learning","similarity":0.7790126649},{"slug":"devops","similarity":0.7590211234},{"slug":"python","similarity":0.7310556572},{"slug":"object-oriented-programming","similarity":0.8026225677},{"slug":"linux","similarity":0.7579249729},{"slug":"sfml","similarity":0.7423589696},{"slug":"windows","similarity":0.7482927946},{"slug":"markdown","similarity":0.7350139928},{"slug":"cat-logic","similarity":0.7529452443},{"slug":"vuejs","similarity":0.7486494455},{"slug":"shell","similarity":0.7468239141},{"slug":"html","similarity":0.7420639326},{"slug":"data-analysis","similarity":0.7622943936},{"slug":"hardware","similarity":0.7333623025},{"slug":"programming-convention","similarity":0.7591601516},{"slug":"webgl","similarity":0.7569508089},{"slug":"sentry","similarity":0.7479588188},{"slug":"valve","similarity":0.745595248},{"slug":"reactjs","similarity":0.755572791},{"slug":"airflow","similarity":0.7120934741},{"slug":"computer-graphics","similarity":0.7428057338},{"slug":"programming-philosophy","similarity":0.7715224544},{"slug":"elasticsearch","similarity":0.7551148395},{"slug":"unicode","similarity":0.7210938474},{"slug":"logging","similarity":0.7492373915},{"slug":"tools","similarity":0.7460024664},{"slug":"programming-paradigm","similarity":0.7905886893},{"slug":"inspiration","similarity":0.7721889756},{"slug":"gatsbyjs","similarity":0.7377888791},{"slug":"design-pattern","similarity":0.8248121783},{"slug":"game","similarity":0.7528197855},{"slug":"kubernetes","similarity":0.7538468875},{"slug":"nodejs","similarity":0.7536255016},{"slug":"continuous-integration-and-deployment","similarity":0.7676361466},{"slug":"rust","similarity":0.7287788543},{"slug":"book","similarity":0.7685339001},{"slug":"jetbrains","similarity":0.7692988727},{"slug":"quotation","similarity":0.7471164752},{"slug":"jira","similarity":0.7469469358},{"slug":"swagger","similarity":0.7430058963},{"slug":"architecture","similarity":0.8019257385},{"slug":"unity3d","similarity":0.7905192267},{"slug":"jargon","similarity":0.773329289},{"slug":"language-server-protocol","similarity":0.7659141373},{"slug":"clean-code","similarity":0.760803329},{"slug":"java","similarity":0.7417644205},{"slug":"windows-subsystem-for-linux","similarity":0.7377552119},{"slug":"test-driven-development","similarity":0.7705502044},{"slug":"github","similarity":0.7197697918},{"slug":"network","similarity":0.7497215151},{"slug":"kotlin","similarity":0.7620503816},{"slug":"c-sharp","similarity":1},{"slug":"angularjs","similarity":0.75184793},{"slug":"vim","similarity":0.7505699216},{"slug":"ionic-framework","similarity":0.743441282},{"slug":"physics","similarity":0.7971018103},{"slug":"html-canvas","similarity":0.7649284195},{"slug":"reverse-engineering","similarity":0.740279563},{"slug":"css","similarity":0.7372375257},{"slug":"code-review","similarity":0.7601059365},{"slug":"software-development","similarity":0.7628308676},{"slug":"database","similarity":0.7760835341},{"slug":"reactive-extensions","similarity":0.7470414136},{"slug":"redis","similarity":0.7339735005},{"slug":"mail","similarity":0.7398668007},{"slug":"experience-review","similarity":0.7734234723},{"slug":"google-analytics","similarity":0.7393123917},{"slug":"data-structure","similarity":0.7596717491},{"slug":"vimwiki","similarity":0.7437733968}]},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#c\">C#</a></p>\n<ul>\n<li><a href=\"#event\">Event</a></li>\n<li><a href=\"#events-or-an-observer-interface-proscons\">events or an observer interface? Pros/cons?</a></li>\n</ul>\n</li>\n</ul>","html":"<h1 id=\"c\" style=\"position:relative;\"><a href=\"#c\" aria-label=\"c permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>C#</h1>\n<h2 id=\"event\" style=\"position:relative;\"><a href=\"#event\" aria-label=\"event permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Event</h2>\n<p>C#에서 옵저버 패턴과 유사한 기능을 하는 event가 있다.</p>\n<p>이벤트 정의:</p>\n<pre><code class=\"language-c#\">public delegate void PositionEvent(Vector3 position);\npublic event PositionEvent onPositionChanged;\n</code></pre>\n<p>delegate는 함수를 표현하는 방법이다.</p>\n<p>이벤트 등록:</p>\n<pre><code class=\"language-c#\">onPositionChanged += SyncPosition;\n</code></pre>\n<p><code>SyncPosition</code>은 <code>PositionEvent</code>와 인터페이스가 같은 함수이어야 한다.\n<code>+</code> 연산자를 사용하여 이벤트에 함수를 등록한다.</p>\n<p>이벤트 발생:</p>\n<pre><code class=\"language-c#\">onPositionChanged(new Vector3(0, 0, 0));\n</code></pre>\n<p>이제 등록된 <code>SyncPosition</code>이 호출된다.</p>\n<h2 id=\"events-or-an-observer-interface-proscons\" style=\"position:relative;\"><a href=\"#events-or-an-observer-interface-proscons\" aria-label=\"events or an observer interface proscons permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>events or an observer interface? Pros/cons?</h2>\n<p><a href=\"https://stackoverflow.com/questions/550785\">https://stackoverflow.com/questions/550785</a></p>\n<p>첫 번째 답변은 이벤트를 사용함에 있어서 특징에 대해서 설명한다:</p>\n<blockquote>\n<p>Less maintenance\n적은 유지보수</p>\n<p>The pattern is built into the language so everybody knows how to use it\n패턴이 언어에 내장되어 있기 때문에, 누구나 사용하는 방법에 대해 알고 있습니다.</p>\n</blockquote>\n<p>두 번째 답변:</p>\n<blockquote>\n<p>Hmm, events can be used to implement the Observer pattern. In fact, using events can be regarded as another implementation of the observer-pattern imho.\n내 의견으로는, event를 이용하여 옵저버 패턴을 구현할 수 있습니다. 사실은, event를 사용하는 것은 옵저버 패턴을 구현했다고 볼 수 있습니다.</p>\n</blockquote>\n<p>두 번째 답변의 덧글 중:</p>\n<blockquote>\n<p>Absolutely. This is a bit like asking, \"Should I implement the iterator pattern or use foreach and IEnumerable?\n이건 이렇게 묻는 것과 같습니다. \"이터레이터 패턴을 구현해야 하나요? 아니면 foreach와 IEnumrable을 사용해야 하나요?\"</p>\n</blockquote>"}},"pageContext":{"id":"dda47636-ac01-532a-b8c5-c8ae24d9c39c","fields__slug":"/c-sharp/","__params":{"fields__slug":"c-sharp"}}},"staticQueryHashes":[],"slicesMap":{}}