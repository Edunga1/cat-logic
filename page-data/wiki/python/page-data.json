{"componentChunkName":"component---src-components-gatsby-templates-wiki-tsx","path":"/wiki/python/","result":{"data":{"file":{"fields":{"gitLogs":[{"hash":"e342c754b5a8ff253b65a57da80d3d99c796cf76","date":"2025-03-09T15:49:31+09:00"},{"hash":"b2c698ffa2af5e55ee13197c86e48e4bba53ad9c","date":"2025-01-14T22:42:44+09:00"},{"hash":"ca5fc11dcc467adc0d9419ceaa308d4259dbd47d","date":"2025-01-14T21:47:05+09:00"},{"hash":"c89cb7ceb2f8b65385a121e3312c9df86838a6ee","date":"2025-01-14T21:30:34+09:00"},{"hash":"2bee406e3a4b908fa4616a7b0f28ccca948fe376","date":"2025-01-05T20:24:40+09:00"},{"hash":"8b70ae743c715e00cfb175ddbdd2fec46a1c4898","date":"2025-01-05T19:45:14+09:00"},{"hash":"bc07f775a1b086d2f7837213a8ae7ce874eac601","date":"2024-07-21T09:04:29Z"},{"hash":"36589996412b0e64fa94a06c76b7a32803eb54b9","date":"2024-07-20T20:32:42Z"},{"hash":"01f362ce91f0e0414e67ecb892f240fea084632a","date":"2024-07-16T12:11:00Z"},{"hash":"290b84c05100aa3b944830b7b67da6153102eb49","date":"2024-06-24T12:58:26Z"}]},"childMarkdownRemark":{"headings":[{"value":"Python Programming Language"}],"fields":{"slug":"/python/","relatedDocs":[{"slug":"sentry","similarity":0.2667619257},{"slug":"philosophy","similarity":0.375086205},{"slug":"python","similarity":1},{"slug":"chrome-browser","similarity":0.2729540802},{"slug":"phidata","similarity":0.377661903},{"slug":"2016-11-16-google-campus-two-things-you-must-keep-in-google-play","similarity":0.364524214},{"slug":"openai","similarity":0.3141140977},{"slug":"tmux","similarity":0.3171370052},{"slug":"git","similarity":0.4398139848},{"slug":"github","similarity":0.3629552793},{"slug":"podman","similarity":0.3960723778},{"slug":"airflow","similarity":0.3091469746},{"slug":"c-sharp","similarity":0.285223833},{"slug":"kotlin","similarity":0.3434936337},{"slug":"hardware","similarity":0.2068581498},{"slug":"test-driven-development","similarity":0.3164574536},{"slug":"data-analysis","similarity":0.311424753},{"slug":"markdown","similarity":0.3223277368},{"slug":"design-pattern","similarity":0.3876545392},{"slug":"vimenter-2023","similarity":0.3268437924},{"slug":"testing","similarity":0.4232175847},{"slug":"cat-logic","similarity":0.3457258274},{"slug":"tools","similarity":0.3460586131},{"slug":"webgl","similarity":0.2396679592},{"slug":"linux","similarity":0.3245446117},{"slug":"data-structure","similarity":0.2782796486},{"slug":"unity3d","similarity":0.3369392831},{"slug":"reactjs","similarity":0.3333778303},{"slug":"curl","similarity":0.2572156755},{"slug":"continuous-integration-and-deployment","similarity":0.3393624736},{"slug":"nodejs","similarity":0.4280140748},{"slug":"idea-methodology","similarity":0.3498068509},{"slug":"machine-learning","similarity":0.4355882244},{"slug":"ollama","similarity":0.4187028304},{"slug":"algorithm","similarity":0.3335592393},{"slug":"object-oriented-programming","similarity":0.3881480885},{"slug":"amazon-redshift","similarity":0.3047322948},{"slug":"code-review","similarity":0.4175334772},{"slug":"scp","similarity":0.286724685},{"slug":"ionic-framework","similarity":0.2641084722},{"slug":"large-language-model","similarity":0.3013673565},{"slug":"mail","similarity":0.2948240567},{"slug":"security","similarity":0.2770429431},{"slug":"shell","similarity":0.5570132344},{"slug":"crontab","similarity":0.2441461695},{"slug":"javascript","similarity":0.3814877788},{"slug":"logging","similarity":0.3035155277},{"slug":"jetbrains","similarity":0.3818391273},{"slug":"elasticsearch","similarity":0.3049190481},{"slug":"html","similarity":0.3369563615},{"slug":"kubernetes","similarity":0.3090441269},{"slug":"web","similarity":0.3826592768},{"slug":"windows","similarity":0.3507678172},{"slug":"quotation","similarity":0.3001352835},{"slug":"html-canvas","similarity":0.2221347485},{"slug":"programming-paradigm","similarity":0.3878266009},{"slug":"google-analytics","similarity":0.1962971288},{"slug":"java","similarity":0.3717388752},{"slug":"mac-os","similarity":0.3379790179},{"slug":"network","similarity":0.2899794506},{"slug":"reactive-extensions","similarity":0.2034421126},{"slug":"unicode","similarity":0.260560985},{"slug":"sfml","similarity":0.3611100858},{"slug":"system-failures","similarity":0.2646907621},{"slug":"language-server-protocol","similarity":0.3543941005},{"slug":"architecture","similarity":0.4283638227},{"slug":"database","similarity":0.3973551631},{"slug":"vimwiki","similarity":0.3234252248},{"slug":"godot","similarity":0.407614856},{"slug":"computer-graphics","similarity":0.2619706222},{"slug":"valve","similarity":0.3199511152},{"slug":"devops","similarity":0.3118224464},{"slug":"docker","similarity":0.4490226645},{"slug":"space","similarity":0.2151705323},{"slug":"jira","similarity":0.3080117962},{"slug":"book","similarity":0.32105493},{"slug":"vim","similarity":0.4575812162},{"slug":"programming-convention","similarity":0.469094848},{"slug":"embeddings","similarity":0.3247811241},{"slug":"clean-code","similarity":0.3868908323},{"slug":"redis","similarity":0.3213961637},{"slug":"angularjs","similarity":0.2947884579},{"slug":"apm","similarity":0.2950661909},{"slug":"2016-08-27-gdg-webtech-workshop-nnn","similarity":0.3189382234},{"slug":"company","similarity":0.3473899359},{"slug":"inspiration","similarity":0.2924159968},{"slug":"aws","similarity":0.3297860304},{"slug":"experience-review","similarity":0.3053341329},{"slug":"gatsbyjs","similarity":0.3881482664},{"slug":"css","similarity":0.3375279265},{"slug":"swagger","similarity":0.2710041346},{"slug":"reverse-engineering","similarity":0.2561484709},{"slug":"postgresql","similarity":0.3509240087},{"slug":"vuejs","similarity":0.2267066684},{"slug":"gradle","similarity":0.3326092726},{"slug":"game","similarity":0.3331607905},{"slug":"rust","similarity":0.4123944906},{"slug":"windows-subsystem-for-linux","similarity":0.3888157568},{"slug":"physics","similarity":0.2607824359},{"slug":"treesitter","similarity":0.2932534545},{"slug":"jargon","similarity":0.3207707934},{"slug":"software-development","similarity":0.4617769194},{"slug":"spring-framework","similarity":0.3277507494},{"slug":"bk","similarity":0.2485448748},{"slug":"추론 애플리케이션","similarity":0.3144919429}]},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#python-programming-language\">Python Programming Language</a></p>\n<ul>\n<li>\n<p><a href=\"#%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%84%B1\">개발환경 구성</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B0%9C%EB%B0%9C%EB%8F%84%EA%B5%AC\">개발도구</a></p>\n<ul>\n<li>\n<p><a href=\"#pyright\">pyright</a></p>\n</li>\n<li>\n<p><a href=\"#pylint\">pylint</a></p>\n</li>\n<li>\n<p><a href=\"#mypy\">mypy</a></p>\n<ul>\n<li><a href=\"#django-stubs\">Django Stubs</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#ruff\">Ruff</a></p>\n</li>\n<li>\n<p><a href=\"#python-code-formatter-autopep8-vs-black-vs-yapf\">python code formatter: autopep8 vs black vs yapf</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%A0%88%EA%B1%B0%EC%8B%9C%EB%A5%BC-%EC%9C%84%ED%95%9C-%EC%84%A4%EC%A0%95\">레거시를 위한 설정</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#python-mock\">Python mock</a></p>\n<ul>\n<li><a href=\"#decorator%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-mocking\">Decorator를 사용한 mocking.</a></li>\n<li><a href=\"#patch\">@patch</a></li>\n<li><a href=\"#patchobject\">@patch.object</a></li>\n<li><a href=\"#patchobject-new\">@patch.object new</a></li>\n<li><a href=\"#patchobject-return_value\">@patch.object return_value</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#package-manager\">Package manager</a></p>\n<ul>\n<li>\n<p><a href=\"#poetry\">poetry</a></p>\n<ul>\n<li><a href=\"#%EA%B0%80%EC%83%81-%ED%99%98%EA%B2%BD-%EA%B4%80%EB%A6%AC%ED%95%98%EA%B8%B0\">가상 환경 관리하기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#pipenv\">pipenv</a></p>\n</li>\n<li>\n<p><a href=\"#uv\">uv</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#packaging\">Packaging</a></p>\n<ul>\n<li><a href=\"#__all__\"><code class=\"language-text\">__all__</code></a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EA%B5%AC%EC%A1%B0\">프로젝트 구조</a></p>\n<ul>\n<li><a href=\"#pypa%EC%97%90%EC%84%9C-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EA%B5%AC%EC%A1%B0%EB%A5%BC-src-%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83%EC%9C%BC%EB%A1%9C-%EB%B0%94%EA%BE%B8%EB%8B%A4\">PyPA에서 프로젝트 구조를 <code class=\"language-text\">src/</code> 레이아웃으로 바꾸다.</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#object-converter-serialization--deserialization\">Object Converter (Serialization &#x26; Deserialization)</a></p>\n<ul>\n<li><a href=\"#django-rest-framework-serializer\">Django REST Framework Serializer</a></li>\n<li><a href=\"#wtforms\">WTForms</a></li>\n<li><a href=\"#marshmallow\">Marshmallow</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#rxpy\">Rxpy</a></p>\n<ul>\n<li><a href=\"#rxpy-example\">Rxpy example</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#redis-py\">redis-py</a></p>\n<ul>\n<li><a href=\"#redis-connection%EC%9D%84-%EC%A0%84%EC%97%AD-%EC%83%9D%EC%84%B1-vs-%EC%9A%94%EC%B2%AD%EB%A7%88%EB%8B%A4-%EC%83%9D%EC%84%B1\">redis connection을 전역 생성 vs 요청마다 생성</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#django-web-framework\">Django Web Framework</a></p>\n<ul>\n<li><a href=\"#onetoonefield-vs-foreignkeyfield\"><code class=\"language-text\">OneToOneField</code> vs <code class=\"language-text\">ForeignKeyField</code></a></li>\n<li><a href=\"#%EB%B3%B5%ED%95%A9%ED%82%A4%EB%A5%BC-foreignkey%EB%A1%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95-%EC%B0%BE%EA%B8%B0\">복합키를 ForeignKey로 사용하는 방법 찾기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%94%94%EB%B2%84%EA%B9%85\">디버깅</a></p>\n</li>\n</ul>\n</li>\n</ul>","html":"<h1 id=\"python-programming-language\" style=\"position:relative;\"><a href=\"#python-programming-language\" aria-label=\"python programming language permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Python Programming Language</h1>\n<p>파이썬은 Guido van Rossum이 1989년에 만든 프로그래밍 언어이다.<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup></p>\n<hr>\n<p><code class=\"language-text\">python</code> 명령어 도구를 제공한다.</p>\n<p>터미널에 <code class=\"language-text\">python -m this</code>를 입력하면 <code class=\"language-text\">Zen of Python</code>라 불리는 파이썬의 **핵심 철학*을 보여주는 이스터 에그이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ python <span class=\"token parameter variable\">-m</span> this\nThe Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren<span class=\"token string\">'t special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you'</span>re Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it<span class=\"token string\">'s a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let'</span>s <span class=\"token keyword\">do</span> <span class=\"token function\">more</span> of those<span class=\"token operator\">!</span></code></pre></div>\n<p>번역기의 도움을 받아보면..</p>\n<blockquote>\n<p>추한 것보다 아름다운 것이 낫습니다.<br>\n명시적인 것이 암시적인 것보다 낫습니다.<br>\n단순한 것이 복잡한 것보다 낫습니다.<br>\nComplex한 것이 Complicated한 것보다 낫습니다.<br>\n중첩된 것보다 펼쳐진 것이 낫습니다.<br>\n조밀한 것보다 드문드문한 것이 좋습니다.<br>\n가독성이 중요합니다.<br>\n특별한 경우라고 해서 규칙을 어길 만큼 특별하지 않습니다.<br>\n실용성이 순수성을 이긴다고 해도요.<br>\n오류는 결코 조용히 넘어가서는 안 됩니다.<br>\n명시적으로 침묵하지 않는 한 말입니다.<br>\n모호한 상황에 직면했을 때 추측의 유혹을 거부하세요.<br>\n분명한 방법이 하나, 가급적이면 단 하나만 있어야 합니다.<br>\n네덜란드인이 아니라면 처음에는 그 방법이 분명하지 않을 수도 있습니다.<br>\n지금이 안 하는 것보다 낫습니다.<br>\n안 하는 것이 지금 하는 것보다 낫긴 하지만요.<br>\n구현이 설명하기 어렵다면 나쁜 생각입니다.<br>\n구현이 설명하기 쉽다면 좋은 생각일 수 있습니다.<br>\n네임스페이스는 정말 좋은 아이디어입니다. 더 많이 만들어 봅시다!</p>\n</blockquote>\n<p>파이썬은 초보자가 배우기 쉬운 언어로 유명하다. 이는 철학에 투영된다.\n단순하고 읽기 쉬운 코드를 지향한다.</p>\n<h2 id=\"개발환경-구성\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%84%B1\" aria-label=\"개발환경 구성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개발환경 구성</h2>\n<p>pyenv, pyenv-virtualenv로 파이썬 가상환경을 관리하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">brew <span class=\"token function\">install</span> pyenv\nbrew <span class=\"token function\">install</span> pyenv-virtualenv</code></pre></div>\n<h2 id=\"개발도구\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EB%B0%9C%EB%8F%84%EA%B5%AC\" aria-label=\"개발도구 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개발도구</h2>\n<p>pyright + pylint or ruff + mypy 사용을 권장한다. python2 프로젝트도 타입이나 참조 문제를 잡아준다.\n에러가 너무 많다면 설정을 타협하자.</p>\n<p>nvim-lspconfig, null-ls 이용하여 다음과 같이 설정, 사용하고 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\">server <span class=\"token operator\">=</span> require <span class=\"token string\">'lspconfig'</span><span class=\"token punctuation\">.</span>pyright<span class=\"token punctuation\">,</span>\nsources <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    null_ls<span class=\"token punctuation\">.</span>builtins<span class=\"token punctuation\">.</span>diagnostics<span class=\"token punctuation\">.</span>pylint<span class=\"token punctuation\">,</span>\n    null_ls<span class=\"token punctuation\">.</span>builtins<span class=\"token punctuation\">.</span>diagnostics<span class=\"token punctuation\">.</span>mypy<span class=\"token punctuation\">.</span><span class=\"token function\">with</span> <span class=\"token punctuation\">{</span>\n        extra_args <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'--ignore-missing-imports'</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    null_ls<span class=\"token punctuation\">.</span>builtins<span class=\"token punctuation\">.</span>formatting<span class=\"token punctuation\">.</span>autopep8<span class=\"token punctuation\">,</span>\n    null_ls<span class=\"token punctuation\">.</span>builtins<span class=\"token punctuation\">.</span>formatting<span class=\"token punctuation\">.</span>isort<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<h3 id=\"pyright\" style=\"position:relative;\"><a href=\"#pyright\" aria-label=\"pyright permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>pyright</h3>\n<p><a href=\"../language-server-protocol\">language server</a> for python.</p>\n<p><a href=\"https://github.com/microsoft/pyright\">https://github.com/microsoft/pyright</a></p>\n<p>django 프로젝트라면 <a href=\"https://github.com/sbdchd/django-types\">django-types</a>를 설치하자.\nmypy와 django-stubs처럼 django model의 필드 타입을 제공한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n    age <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>IntegerField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nuser <span class=\"token operator\">=</span> User<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nuser<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">10</span>  <span class=\"token comment\"># should error</span></code></pre></div>\n<p><code class=\"language-text\">age</code> 필드는 <code class=\"language-text\">IntegerField</code>로 추정하기 때문에 <code class=\"language-text\">user.age = 10</code>에서 타입 문제가 있다고 알려준다.\ndjango-types는 이런 문제를 해결해준다.</p>\n<p>django-types는 django-stubs의 fork project이다.</p>\n<blockquote>\n<p>non-mypy type checkers like pyright will work better with Django.</p>\n</blockquote>\n<p>vim에서는 coc-nvim 또는 nvim-lspconfig를 사용하여 pyright를 설치할 수 있다.</p>\n<ul>\n<li>nvim-lspconfig은 <code class=\"language-text\">Mason</code>을 사용하자: <code class=\"language-text\">:MasonInstall pyright</code></li>\n<li><a href=\"https://github.com/fannheyward/coc-pyright\">coc-nvim</a>: <code class=\"language-text\">:CocInstall coc-pyright</code></li>\n</ul>\n<h3 id=\"pylint\" style=\"position:relative;\"><a href=\"#pylint\" aria-label=\"pylint permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>pylint</h3>\n<p>정적 분석 도구.</p>\n<p><a href=\"https://github.com/PyCQA/pylint\">https://github.com/PyCQA/pylint</a></p>\n<h3 id=\"mypy\" style=\"position:relative;\"><a href=\"#mypy\" aria-label=\"mypy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>mypy</h3>\n<p><a href=\"https://github.com/python/mypy\">https://github.com/python/mypy</a></p>\n<p>정적 타입 검사 도구.</p>\n<blockquote>\n<p>Optional static typing for Python</p>\n</blockquote>\n<p>타입 명세를 할 수 없는 경우에는 <code class=\"language-text\">Need type annotation for \"variable\"</code> 에러 메시지를 막기 위해 <code class=\"language-text\">my.ini</code> 생성하고 다음과 같이 설정하자:</p>\n<div class=\"gatsby-highlight\" data-language=\"toml\"><pre class=\"language-toml\"><code class=\"language-toml\"><span class=\"token punctuation\">[</span><span class=\"token table class-name\">mypy</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># disable error 'Need type annotation for \"variable\"'</span>\n<span class=\"token key property\">disallow_untyped_defs</span> <span class=\"token punctuation\">=</span> False</code></pre></div>\n<h4 id=\"django-stubs\" style=\"position:relative;\"><a href=\"#django-stubs\" aria-label=\"django stubs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Django Stubs</h4>\n<p>django는 <code class=\"language-text\">objects</code> 등 마법을 사용해서 타입 제공을 제대로 받을 수 없다.\ndjang-stubs는 django 매직과 관련된 타입 정보를 제공한다.</p>\n<p><a href=\"https://github.com/typeddjango/django-stubs\">https://github.com/typeddjango/django-stubs</a></p>\n<h3 id=\"ruff\" style=\"position:relative;\"><a href=\"#ruff\" aria-label=\"ruff permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ruff</h3>\n<p>rust로 작성된 python linter.</p>\n<p><a href=\"https://github.com/charliermarsh/ruff\">https://github.com/charliermarsh/ruff</a></p>\n<p>Pylint와 비교하여 매우 빠르다. README에 벤치마크가 있는데 Pylint로 > 60s 걸리는 코드베이스가 0.29s 걸린다고 한다.</p>\n<p>실제로 Pylint로 1분 6초 걸리는 프로젝트에서 명령어 입력 즉시 결과가 나왔다.</p>\n<p>단점은 아직 Pylint보다 많은 기능을 제공하지 않는다.\n예를들어 Pylint는 <a href=\"https://pylint.readthedocs.io/en/latest/user_guide/messages/warning/broad-exception-caught.html\">broad-exception-caught</a>와 <a href=\"https://pylint.readthedocs.io/en/latest/user_guide/messages/convention/consider-using-f-string.html\">consider-using-f-string</a>을 잡아주지만 Ruff는 그렇지 않다.</p>\n<p>아직 많이 사용해보지 않아서 대응하는 정도의 차이가 얼만큼인지 모르겠다.\n기능은 부족하지만 매우 빠른 장점으로 앞으로 자주 사용할 것 같다.</p>\n<p>nvim은 <a href=\"../BUILTINS#ruff\">null-ls</a>에서 제공한다. diagnostic, formatter 두 개 소스로 제공한다.\nPylint와 함께 사용해보면 Ruff의 반응이 빨라서 항상 Pylint보다 Ruff의 진단이 먼저 노출된다.</p>\n<p><strong>개발 환경 구성 시 주의해야 한다.</strong></p>\n<p>Ruff 설명대로 rust로 작성되어 있어서 로컬 개발 환경이나, 개발용 Docker 환경 구성을 위해서 Rust 런타임 환경을 구성이 필요할 수 있다.\nmacOS 기준으로는 별도 도구 없이 설치되었지만, python alpine 이미지 기준으로 설치에 실패한다.</p>\n<p>flake8, isort 등에서 <a href=\"https://beta.ruff.rs/docs/rules/\">lint rules</a>을 가져왔다. 500+개의 규칙이 있다.</p>\n<p>isort와 마찬가지로 사용되지 않는 import는 제거한단다. isort가 필요 없을지도.</p>\n<p><a href=\"https://github.com/apache/airflow/blob/main/pyproject.toml#L29\">Apache Airflow</a>,\n<a href=\"https://github.com/tiangolo/fastapi/blob/master/pyproject.toml#L164\">FastAPI</a>,\n<a href=\"https://github.com/huggingface/transformers/blob/main/pyproject.toml#L5\">Hugging Face</a>,\n<a href=\"../pyproject.toml#L194\">Pandas</a>\n<a href=\"../pyproject.toml#L121\">SciPy</a>\n등 대규모 프로젝트에서 ruff를 사용하고 있다. pylint와 함께 사용하는 곳도 아닌곳도 있다.</p>\n<blockquote>\n<p>Ruff can be used to replace Flake8 (plus dozens of plugins), isort, pydocstyle, yesqa, eradicate, pyupgrade, and autoflake, all while executing tens or hundreds of times faster than any individual tool.</p>\n</blockquote>\n<p>Flake8, isort 등 도구를 대체할 수 있다고 한다.</p>\n<h3 id=\"python-code-formatter-autopep8-vs-black-vs-yapf\" style=\"position:relative;\"><a href=\"#python-code-formatter-autopep8-vs-black-vs-yapf\" aria-label=\"python code formatter autopep8 vs black vs yapf permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>python code formatter: autopep8 vs black vs yapf</h3>\n<p>파이썬 코드 formatter 3종 비교.</p>\n<p><a href=\"https://github.com/neoclide/coc.nvim\">coc.nvim</a>에서는 파이썬 파일을 열 때 3개 중 하나를 선택하도록 한다:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">Formatter autopep8 is not installed. Install?:\n<span class=\"token number\">1</span>. Yes\n<span class=\"token number\">2</span>. Use black\n<span class=\"token number\">3</span>. Use yapf</code></pre></div>\n<p><a href=\"../blog_a_comparison_of_autopep8_black_and_yapf_code/\">Blog: A comparison of autopep8, black, and yapf - Code formatters for Python</a><br>\n3개를 비교한 다른 글. 덧글에는 black을 사용하고 만족했다나.</p>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>stars</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/hhatto/autopep8\">autopep8</a></td>\n<td>4.3k</td>\n<td>pep8 스타일 사용. 가장 많은 커밋</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/psf/black\">black</a></td>\n<td>31.2k</td>\n<td>가장 많은 star</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/google/yapf\">yapf</a></td>\n<td>13k</td>\n<td>구글이 maintainer</td>\n</tr>\n</tbody>\n</table>\n<p>원본 코드</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"refundDeposit\"</span><span class=\"token punctuation\">:</span> self<span class=\"token punctuation\">.</span>refund_deposit <span class=\"token keyword\">and</span> _deposit_to_dict<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>refund_deposit<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>black</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"refundDeposit\"</span><span class=\"token punctuation\">:</span> self<span class=\"token punctuation\">.</span>refund_deposit\n  <span class=\"token keyword\">and</span> _deposit_to_dict<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>refund_deposit<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>줄바꿈 후에 dict 필드와 같은 들여쓰기 레벨를 사용한다.</p>\n<p><strong>yapf</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"refundDeposit\"</span><span class=\"token punctuation\">:</span>\n  self<span class=\"token punctuation\">.</span>refund_deposit <span class=\"token keyword\">and</span> _deposit_to_dict<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>refund_deposit<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>줄바꿈 하면서 들여쓰기를 없애버렸다.</p>\n<p><strong>autopep8</strong>는 코드를 변경하지 않는다.</p>\n<p>개인적으로는 black, yapf의 스타일이 마음에 들지 않아서 autopep8을 사용하고 있다.</p>\n<h3 id=\"레거시를-위한-설정\" style=\"position:relative;\"><a href=\"#%EB%A0%88%EA%B1%B0%EC%8B%9C%EB%A5%BC-%EC%9C%84%ED%95%9C-%EC%84%A4%EC%A0%95\" aria-label=\"레거시를 위한 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>레거시를 위한 설정</h3>\n<p>pyright, mypy를 타입 명세하지 않는 등 레거시 프로젝트에서 사용하면 무수히 많은 에러 메시지가 출력된다.\ndisable 하는 편이 차라리 낫다.</p>\n<p>파이썬 도구는 <code class=\"language-text\">pyrightconfig.json</code>, <code class=\"language-text\">mypy.ini</code> 등 설정 파일을 사용하거나, 공통 설정 파일인 <code class=\"language-text\">pyproject.toml</code>을 사용한다.</p>\n<p>아래는 <code class=\"language-text\">pyproject.toml</code>에 설정한 내용이다:</p>\n<div class=\"gatsby-highlight\" data-language=\"toml\"><pre class=\"language-toml\"><code class=\"language-toml\"><span class=\"token punctuation\">[</span><span class=\"token table class-name\">tool.mypy</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">python_version</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"3.8\"</span>\n<span class=\"token key property\">plugins</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"mypy_django_plugin.main\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">disallow_untyped_defs</span> <span class=\"token punctuation\">=</span> <span class=\"token boolean\">false</span>\n\n\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">tool.django-stubs</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">django_settings_module</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"app.settings\"</span>\n\n\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">tool.pyright</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">reportGeneralTypeIssues</span> <span class=\"token punctuation\">=</span> <span class=\"token boolean\">false</span>\n<span class=\"token key property\">reportCallIssue</span> <span class=\"token punctuation\">=</span> <span class=\"token boolean\">false</span>\n<span class=\"token key property\">reportAttributeAccessIssue</span> <span class=\"token punctuation\">=</span> <span class=\"token boolean\">false</span>\n\n\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">tool.pylint.master</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">load-plugins</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token string\">\"pylint_django\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n<span class=\"token key property\">django-settings-module</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"app.settings\"</span>\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">tool.pylint.messages_control</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">disable</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token string\">\"missing-docstring\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"too-few-public-methods\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"too-many-instance-attributes\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"trailing-newlines\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"too-many-arguments\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"too-many-public-methods\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"invalid-name\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"too-many-locals\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"too-many-return-statements\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"too-many-lines\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">tool.pylint.format</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">max-line-length</span> <span class=\"token punctuation\">=</span> <span class=\"token number\">150</span></code></pre></div>\n<p>mypy, pyright, pylint 설정을 모두 <code class=\"language-text\">pyproject.toml</code>에 넣었다.</p>\n<p><code class=\"language-text\">reportGeneralTypeIssues = false</code>는 <code class=\"language-text\">Cannot access member \"id\" for type \"UserFactory\"   Member \"id\" is unknown</code> 같은 에러를 무시한다.\ndjango, factory-boy 등 파이썬 매직을 사용하는 경우 이런 문제가 발생하는데 무시하자. 최신 버전부터는 이런 문제가 없는지 확인하지 않았다.<br>\n타입을 잘 명세하는 경우, <code class=\"language-text\">Literal['foo', 'bar']</code> 와 같이 명세하고 에러를 정적 체크하는 것은 매우 유용한데, 이런 에러도 무시하게 된다.\n<code class=\"language-text\">cannot access member ~</code>만 무시하고 <code class=\"language-text\">Argument of type \"Literal['foo', 'bar']\" cannot be assigned to parameter \"param_name\" of type</code> 같은 에러는 리포트 받고 싶은데, 아직 방법을 찾지 못했다.<br>\n일단 <code class=\"language-text\">true</code>로 설정하여 번거롭지만 <code class=\"language-text\">Cannot access member ~</code> 에러도 리포트 받도록 했다.</p>\n<p>나머지 pyright의 <code class=\"language-text\">reportCallIssue</code>, <code class=\"language-text\">reportAttributeAccessIssue</code>도 무시한다. factory boy나 django model에서 에러로 간주되어서 비활성화하였다.</p>\n<p><code class=\"language-text\">disallow_untyped_defs</code>는 mypy에서 타입 명세하지 않으면 에러 메시지를 출력하는 옵션이다. 이것도 무시한다.</p>\n<p>pyproject.toml은 최근에서야 대부분 도구가 지원하는 것 같다.\n도구 버전이 낮으면 toml 양식을 인식하지 못하는 경우가 있어서 최신 버전인지 확인해야 한다.\n도구마다 설정 파일을 각각 관리하기 어려워서 pyproject.toml 하나로 여러 프로젝트에서 사용하고 있다.</p>\n<h2 id=\"python-mock\" style=\"position:relative;\"><a href=\"#python-mock\" aria-label=\"python mock permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Python mock</h2>\n<p><a href=\"https://docs.python.org/3/library/unittest.mock.html\">https://docs.python.org/3/library/unittest.mock.html</a></p>\n<p>설치: <code class=\"language-text\">pip install mock</code></p>\n<h3 id=\"decorator를-사용한-mocking\" style=\"position:relative;\"><a href=\"#decorator%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-mocking\" aria-label=\"decorator를 사용한 mocking permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Decorator를 사용한 mocking.</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> mock <span class=\"token keyword\">import</span> patch\n<span class=\"token keyword\">import</span> mymodule\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Mytest</span><span class=\"token punctuation\">(</span>unittest<span class=\"token punctuation\">.</span>TestCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token decorator annotation punctuation\">@patch<span class=\"token punctuation\">.</span>object</span><span class=\"token punctuation\">(</span>mymodule<span class=\"token punctuation\">,</span> <span class=\"token string\">'method'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">test_normal</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span></code></pre></div>\n<p>테스트는 주로 클래스로 하나의 테스트 슈트를 구성하고,\nMocking은 각 테스트(method)에 <code class=\"language-text\">@patch.object</code>나 <code class=\"language-text\">@patch</code> decorator를 주로 사용하고 있다.</p>\n<p><code class=\"language-text\">requests</code> 모듈을 mocking 한다고 가정하자.</p>\n<h3 id=\"patch\" style=\"position:relative;\"><a href=\"#patch\" aria-label=\"patch permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@patch</h3>\n<p><code class=\"language-text\">@patch('requests.get')</code></p>\n<p>어디서든 <code class=\"language-text\">requests.get()</code> 사용한다면, mock 객체를 반환한다.\n간단한 방법이지만, <code class=\"language-text\">mymodule</code>에서 <code class=\"language-text\">requests</code>를 사용함을 암시적으로 보여준다.</p>\n<h3 id=\"patchobject\" style=\"position:relative;\"><a href=\"#patchobject\" aria-label=\"patchobject permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@patch.object</h3>\n<p><code class=\"language-text\">@patch.object(mymodule, 'requests')</code></p>\n<p><code class=\"language-text\">mymodule</code> 내에서만 <code class=\"language-text\">requests</code>를 사용한다는 점을 명시적으로 표현한다.\n개인적으로 이 방법을 더 많이 사용한다.</p>\n<p><code class=\"language-text\">requests</code> 자체가 mock 객체이기 때문에, <code class=\"language-text\">requests</code>의 <code class=\"language-text\">get</code>, <code class=\"language-text\">post</code> 등 모든 함수들이\nmock 객체가 된다.</p>\n<p><code class=\"language-text\">get</code> 응답을 대체하고 싶으면, 테스트 안에서, 넘어오는 mock 객체를 변경해야 한다:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Mytest</span><span class=\"token punctuation\">(</span>unittest<span class=\"token punctuation\">.</span>TestCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token decorator annotation punctuation\">@patch<span class=\"token punctuation\">.</span>object</span><span class=\"token punctuation\">(</span>mymodule<span class=\"token punctuation\">,</span> <span class=\"token string\">'requests'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">test_normal</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> mock_requests<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    mock_requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">.</span>return_value <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span></code></pre></div>\n<p>테스트 내에서만 mocking 정보를 명시하기 때문에, 다른 테스트에서 재사용할 수 없다.</p>\n<h3 id=\"patchobject-new\" style=\"position:relative;\"><a href=\"#patchobject-new\" aria-label=\"patchobject new permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@patch.object new</h3>\n<p><code class=\"language-text\">@patch.object(mymodule, 'requests', new=MyRequests)</code></p>\n<p><code class=\"language-text\">requests</code>가 <code class=\"language-text\">MyRequests</code>로 대체된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyRequests</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token decorator annotation punctuation\">@staticmethod</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    res <span class=\"token operator\">=</span> Mock<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    res<span class=\"token punctuation\">.</span>headers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'content-type'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'text/html'</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> res</code></pre></div>\n<p>위와 같은 방법으로 <code class=\"language-text\">get</code> 함수만 내가 원하는 응답을 내려주게 하고,\n<code class=\"language-text\">post</code> 등 다른 함수는 기본 mock 객체를 내려준다.</p>\n<p>mocking 정보를 다른 테스트에서도 재사용할 수 있어서 유용하다.</p>\n<h3 id=\"patchobject-return_value\" style=\"position:relative;\"><a href=\"#patchobject-return_value\" aria-label=\"patchobject return_value permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@patch.object return_value</h3>\n<p><code class=\"language-text\">@patch.object(mymodule, 'method', return_value=None)</code></p>\n<p><code class=\"language-text\">mymodule.method()</code> 반환값을 <code class=\"language-text\">None</code>으로 대체한다.</p>\n<h2 id=\"package-manager\" style=\"position:relative;\"><a href=\"#package-manager\" aria-label=\"package manager permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Package manager</h2>\n<p>pipenv를 시범적으로 회사에서 사용하고 있다가, 최근에 개인 프로젝트에 poetry를 사용하고 있다.\n결론은 poetry가 조금 더 만족스럽다. <code class=\"language-text\">pyproject.toml</code>과 통합하는 부분에서 마음이 들었다.</p>\n<p><code class=\"language-text\">pipenv</code>나 <code class=\"language-text\">poetry</code> 모두 운영 환경을 위한 dockerizing 시 cli 도구나 가상환경은 필요하지 않기 때문에,\nmulti-stage build와 virtualenv를 사용하지 않는 프로세스를 구축해야 한다.</p>\n<p><a href=\"https://www.stuartellis.name/articles/python-modern-practices/\">Python 현대적 모범 사례</a>라는 글에서는\n<a href=\"https://github.com/jazzband/pip-tools\">pip-tools</a>와 <a href=\"https://github.com/astral-sh/uv\">uv</a>의 추천이 있다.\n두 도구 모두 이 글에서 처음 알게 되었다. 나중에 써보고 추가하자.</p>\n<p><strong>2024년 7월 기준 GitHub star 수</strong></p>\n<table>\n<thead>\n<tr>\n<th>package</th>\n<th>forks</th>\n<th>stars</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>poetry</td>\n<td>2.2k</td>\n<td>30.5k</td>\n</tr>\n<tr>\n<td>pipenv</td>\n<td>1.9k</td>\n<td>24.7k</td>\n</tr>\n<tr>\n<td>pip-tools</td>\n<td>0.6k</td>\n<td>7.6k</td>\n</tr>\n<tr>\n<td>uv</td>\n<td>0.4k</td>\n<td>15.1k</td>\n</tr>\n</tbody>\n</table>\n<p><strong>2025년 1월 기준 GitHub star 수</strong></p>\n<table>\n<thead>\n<tr>\n<th>package</th>\n<th>forks</th>\n<th>stars</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>poetry</td>\n<td>2.3k</td>\n<td>32.3k</td>\n</tr>\n<tr>\n<td>pipenv</td>\n<td>1.9k</td>\n<td>25k</td>\n</tr>\n<tr>\n<td>pip-tools</td>\n<td>0.6k</td>\n<td>7.8k</td>\n</tr>\n<tr>\n<td>uv</td>\n<td>0.9k</td>\n<td>35.8k</td>\n</tr>\n</tbody>\n</table>\n<p>uv의 성장 속도가 매우 빠르다.</p>\n<h3 id=\"poetry\" style=\"position:relative;\"><a href=\"#poetry\" aria-label=\"poetry permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>poetry</h3>\n<p><a href=\"https://github.com/python-poetry/poetry\">https://github.com/python-poetry/poetry</a></p>\n<p>pipenv 보다 star가 더 많다. <code class=\"language-text\">pyproject.toml</code>에 의존성이나, 환경 정보를 저장한다.</p>\n<p>Homebrew <code class=\"language-text\">brew install poetry</code>로 설치하자.</p>\n<p>자주사용하는 명령어:</p>\n<ol>\n<li><code class=\"language-text\">poetry shell</code>: 가상환경 진입. 현재 파이썬 바이너리 버전을 사용한다.\n2.0.0 버전부터는 <code class=\"language-text\">poetry env activate</code>로 <a href=\"https://github.com/python-poetry/poetry/releases/tag/2.0.0\">대체되었다</a>.</li>\n<li><code class=\"language-text\">poetry install</code>: 의존성 설치. <code class=\"language-text\">poetry.lock</code> 파일을 업데이트한다.</li>\n</ol>\n<p><code class=\"language-text\">poetry init --python=3.10 -q</code>로 초기화하면 <code class=\"language-text\">pypoject.toml</code> 파일이 생성된다.\n<code class=\"language-text\">-q</code> 옵션이 없으면 너무 많은 정보를 물어봐서 번거롭다.</p>\n<div class=\"gatsby-highlight\" data-language=\"toml\"><pre class=\"language-toml\"><code class=\"language-toml\"><span class=\"token punctuation\">[</span><span class=\"token table class-name\">tool.poetry</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">name</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"myproject\"</span>\n<span class=\"token key property\">version</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"0.1.0\"</span>\n<span class=\"token key property\">description</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"\"</span>\n<span class=\"token key property\">authors</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">tool.poetry.dependencies</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">python</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"^3.10\"</span>\n\n\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">build-system</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">requires</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"poetry-core\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">build-backend</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"poetry.core.masonry.api\"</span></code></pre></div>\n<p>위와같이 만들어 준다.</p>\n<p><code class=\"language-text\">poetry shell</code>을 입력하면 virtualenv으로 진입한다. 없으면 생성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">❯ poetry shell\nCreating virtualenv myproject-jPR28GGN-py3.11 <span class=\"token keyword\">in</span> /home/username/.cache/pypoetry/virtualenvs\nSpawning shell within /home/username/.cache/pypoetry/virtualenvs/myproject-jPR28GGN-py3.11</code></pre></div>\n<p>home에 가상환경 정보를 저장하므로, <code class=\"language-text\">pyenv versions</code>에 노출되지 않아서 괜찮아 보인다.\n프로젝트가 많으면 너무 많은 가상환경이 생성되기 때문이다.</p>\n<p><code class=\"language-text\">poetry add</code>로 의존 모듈을 추가한다. 알아서 <code class=\"language-text\">pyproject.toml</code>에 추가하고, lock file<code class=\"language-text\">poetry.lock</code>을 업데이트한다.</p>\n<p>파이썬의 패키지 매니저인 pip는 파이썬 설치 시 함께 제공된다.\n그러나 다른 언어의 패키지 매니저와 비교해 보면 안좋다.</p>\n<p><code class=\"language-text\">pip install PACKAGE_NAME</code>로 설치하고 <code class=\"language-text\">pip freeze > requirements.txt</code>로\n의존 모듈 목록을 저장하는데, 의존성의 의존성까지 저장하게 된다.\nDjango만 설치했는데, Django가 사용하는 다른 패키지도 포함된다.</p>\n<p>개발과 프로덕션 환경 관리도 애매하다. <code class=\"language-text\">pip freeze > requirements-dev.txt</code> 처럼\n수동으로 관리해야 하는데, 프로덕션만 업데이트 하려고 해도 이미 개발 환경의 모듈이\n포함되어 있다.</p>\n<p>아무튼, 간단하지만 그만큼 이런저런 불편함이 있는 기본 도구다.</p>\n<h4 id=\"가상-환경-관리하기\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EC%83%81-%ED%99%98%EA%B2%BD-%EA%B4%80%EB%A6%AC%ED%95%98%EA%B8%B0\" aria-label=\"가상 환경 관리하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가상 환경 관리하기</h4>\n<p><code class=\"language-text\">poetry shell</code>로 가상 환경을 생성할 때, 현재 시스템의 파이썬 버전을 사용하려고 한다.\n다만 <code class=\"language-text\">pyproject.toml</code>에 명시한 <a href=\"https://github.com/npm/node-semver#versions\">semver</a> 범위에 맞지 않으면 실패한다.</p>\n<p>pyenv를 사용한다면 맞는 버전을 직접 찾아서 변경해야 하는 것으로 보인다.</p>\n<blockquote>\n<p>For instance, if your project requires a newer Python than is available with your system, a standard workflow would be:</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">pyenv <span class=\"token function\">install</span> <span class=\"token number\">3.9</span>.8\npyenv <span class=\"token builtin class-name\">local</span> <span class=\"token number\">3.9</span>.8  <span class=\"token comment\"># Activate Python 3.9 for the current project</span>\npoetry <span class=\"token function\">install</span></code></pre></div>\n<blockquote>\n<p>poetry 문서 중: <a href=\"https://python-poetry.org/docs/managing-environments/#switching-between-environments\">https://python-poetry.org/docs/managing-environments/#switching-between-environments</a></p>\n</blockquote>\n<p>설치한 가상 환경은 <code class=\"language-text\">poetry env list</code>로 확인할 수 있다.\n여러개의 가상 환경을 사용할 수 있는 구조라서 목록으로 보여준다.</p>\n<p>위 예제에서 <code class=\"language-text\">pyenv local</code>을 사용했는데, <code class=\"language-text\">pyenv global</code>은 전역 설정인 반면에 <code class=\"language-text\">pyenv local</code>은 현재 디렉토리에만 적용된다.\n<code class=\"language-text\">.python-version</code> 파일을 생성하는데, pyenv는 이 파일을 읽어서 파이썬 버전을 결정하기 때문이다. 자세한 내용은 <code class=\"language-text\">pyenv local --help</code>를 참고하자.</p>\n<p>가상 환경을 삭제하려면 몇 가지 방법이 있다:</p>\n<ul>\n<li><code class=\"language-text\">rm -rf `poetry env info -p` </code> (가상 환경 경로를 찾아서 삭제한다.)</li>\n<li><code class=\"language-text\">poetry env remove 3.7</code></li>\n<li><code class=\"language-text\">poetry env remove test-O3eWbxRl-py3.7</code> (가상 환경 전체 이름이다.)</li>\n</ul>\n<hr>\n<p>Dockerize 한다면, 이 가상환경은 불필요하다.\n<code class=\"language-text\">poetry install</code>로 의존성 설치하면 가상 환경에 설치하기 때문에, docker 컨테이너에서 <code class=\"language-text\">pip list</code>로 의존성을 확인하면, <code class=\"language-text\">poetry</code> 의존성만 설치된 것을 확인할 수 있다.\n이를 피하기 위해서 <code class=\"language-text\">poetry config virtualenvs.create false</code>로 가상 환경을 생성하지 않도록 하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token instruction\"><span class=\"token keyword\">RUN</span> pip install poetry</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> poetry config virtualenvs.create false</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> poetry install --only main --no-root --no-directory</span></code></pre></div>\n<h3 id=\"pipenv\" style=\"position:relative;\"><a href=\"#pipenv\" aria-label=\"pipenv permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>pipenv</h3>\n<p><a href=\"https://github.com/pypa/pipenv\">https://github.com/pypa/pipenv</a></p>\n<p>이런 불편함을 알았는지 환경 분리도 가능하고, lock 파일도 별도로 관리할 수 있는\n<a href=\"https://github.com/pypa/pipenv\">pipenv</a>가 있다. <code class=\"language-text\">pyenv</code>와 좀 헷갈린다.</p>\n<p><a href=\"https://www.python.org/\">python.org</a>에서도 가상 <code class=\"language-text\">pipenv</code>를 이용하여 가상환경 사용을 추천하고 있다:</p>\n<blockquote>\n<p>For software that is not distributed with (or developed for) your system, we recommend using a virtual environment, possibly with an environment manager like conda or pipenv, to help avoid disrupting your system Python installation.</p>\n</blockquote>\n<p>link: <a href=\"https://packaging.python.org/guides/tool-recommendations/\">https://packaging.python.org/guides/tool-recommendations/</a></p>\n<h3 id=\"uv\" style=\"position:relative;\"><a href=\"#uv\" aria-label=\"uv permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>uv</h3>\n<p><a href=\"https://github.com/astral-sh/uv\">https://github.com/astral-sh/uv</a></p>\n<p>uv는 파이썬 패키지 관리 도구 기능 뿐만 아니라, 파이썬 관리 기능도 제공한다.</p>\n<ul>\n<li><code class=\"language-text\">uv venv</code>: 가상환경 생성. <code class=\"language-text\">.venv</code> 디렉토리가 생성된다. <code class=\"language-text\">source .venv/bin/activate</code>로 가상환경을 활성화한다.</li>\n<li><code class=\"language-text\">uv add PACKAGE_NAME</code>: 패키지 설치. <code class=\"language-text\">pyproject.toml</code>에 추가된다.\n<ul>\n<li><code class=\"language-text\">uv pip COMMAND</code>: <code class=\"language-text\">pip</code>의 인터페이스를 어느정도 제공한다. 실제로 <code class=\"language-text\">pip</code>를 사용하는 것은 아니라고. <code class=\"language-text\">pyproject.toml</code>을 업데이트하지 않는다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">uv tree</code>: 패키지 트리를 보여준다.</li>\n</ul>\n<p>uv로 설치한 패키지는 <code class=\"language-text\">pip</code> 명령어로 확인할 수 없다.</p>\n<p>다른 도구처럼 <code class=\"language-text\">uv shell</code> 같은 명령어를 제공하지 않는 것과 명령어를 모두 일일이 타이핑해야 하는 것이 조금 불편하다.\n그래서 <a href=\"https://github.com/astral-sh/uv/issues/1910\"><code class=\"language-text\">uv shell</code>를 추가를 제안하는 이슈</a>가 등록되어 있다.\n사용자가 빠르게 가상환경에 진입할 수 있고, 가상환경이 없으면 에러 문구를 출력할 수 있도록 하자는 것이 요지.</p>\n<h2 id=\"packaging\" style=\"position:relative;\"><a href=\"#packaging\" aria-label=\"packaging permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Packaging</h2>\n<p>파이썬의 모듈 단위인 패키지는 디렉토리로 구성된다.\n디렉토리 내에 <code class=\"language-text\">__init__.py</code> 파일이 있으면, 해당 디렉토리는 패키지로 인식된다.</p>\n<h3 id=\"__all__\" style=\"position:relative;\"><a href=\"#__all__\" aria-label=\"__all__ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">__all__</code></h3>\n<p><code class=\"language-text\">my_module.py</code>라는 파일이 있다고 하자:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">__all__ <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bar'</span><span class=\"token punctuation\">]</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">pass</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Bar</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">pass</span>\n\n\n_baz <span class=\"token operator\">=</span> <span class=\"token number\">1</span></code></pre></div>\n<p>파일 최상단에 <code class=\"language-text\">__all__</code>을 사용한다고 <code class=\"language-text\">my_module.py</code>을 임포트 했을 때 <code class=\"language-text\">_baz</code>에 접근하지 못하게 할 수는 없다.</p>\n<p><code class=\"language-text\">from my_module import _baz</code></p>\n<p>하지만 <code class=\"language-text\">__all__</code>을 사용하면 <code class=\"language-text\">__init__.py</code>를 사용했을 때 효과가 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">my_module/\n  __init__.py\n  my_module.py</code></pre></div>\n<p>위 구조로 만들어 두고 <code class=\"language-text\">__init__.py</code>에서 <code class=\"language-text\">my_module.py</code>를 asterisk를 이용하여 임포트한다:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> my_module<span class=\"token punctuation\">.</span>my_module <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>  <span class=\"token comment\"># NOQA</span></code></pre></div>\n<p>flake8이 경고를 출력하므로 <code class=\"language-text\"># NOQA</code>로 무시하도록 했다.</p>\n<p>이렇게하면 <code class=\"language-text\">my_module</code>을 사용하는 곳에선 <code class=\"language-text\">foo</code>, <code class=\"language-text\">bar</code>만 가져올 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> my_module <span class=\"token keyword\">import</span> foo<span class=\"token punctuation\">,</span> bar  <span class=\"token comment\"># 가능</span>\n<span class=\"token keyword\">from</span> my_module <span class=\"token keyword\">import</span> _baz  <span class=\"token comment\"># 불가능</span></code></pre></div>\n<h2 id=\"프로젝트-구조\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EA%B5%AC%EC%A1%B0\" aria-label=\"프로젝트 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로젝트 구조</h2>\n<h3 id=\"pypa에서-프로젝트-구조를-src-레이아웃으로-바꾸다\" style=\"position:relative;\"><a href=\"#pypa%EC%97%90%EC%84%9C-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EA%B5%AC%EC%A1%B0%EB%A5%BC-src-%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83%EC%9C%BC%EB%A1%9C-%EB%B0%94%EA%BE%B8%EB%8B%A4\" aria-label=\"pypa에서 프로젝트 구조를 src 레이아웃으로 바꾸다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PyPA에서 프로젝트 구조를 <code class=\"language-text\">src/</code> 레이아웃으로 바꾸다.</h3>\n<p>PR: <a href=\"https://github.com/pypa/sampleproject/pull/104\">https://github.com/pypa/sampleproject/pull/104</a></p>\n<p>PR 내용을 읽어보면 PyCon US 2019에서 src 레이아웃으로 전환하기로 했다고 한다.</p>\n<p>PyCon US Packaging Mini-Summit 2019 토론장: <a href=\"https://discuss.python.org/t/pycon-us-packaging-mini-summit-2019/833\">https://discuss.python.org/t/pycon-us-packaging-mini-summit-2019/833</a></p>\n<p>PyCon Us Packaging Mini-Summit 2019 토픽 추천 토론장: <a href=\"https://discuss.python.org/t/packaging-mini-summit-pycon-us-2019-topic-suggestions/1534/5\">https://discuss.python.org/t/packaging-mini-summit-pycon-us-2019-topic-suggestions/1534/5</a></p>\n<p>(토픽 추천 토론장에서) 2017년에 올라온 이슈로 인해서 논의하게 되었다 한다:</p>\n<blockquote>\n<p>Background: This issue is still unresolved, but a lot of people are converting to the src/ layout. The canonical reference for why is Hynek’s post , though I will refrain from at-messaging him because I don’t think he wants to be the poster-boy for src/ layout.</p>\n</blockquote>\n<p>해당 이슈: <a href=\"https://github.com/pypa/packaging.python.org/issues/320\">https://github.com/pypa/packaging.python.org/issues/320</a></p>\n<p><a href=\"https://hynek.me/articles/testing-packaging\">https://hynek.me/articles/testing-packaging</a> 글에서 src 레이아웃을 사용하는 이유를 말해준다고 한다.</p>\n<p><a href=\"https://github.com/pypa/packaging.python.org/issues/320#issuecomment-495990983\">https://github.com/pypa/packaging.python.org/issues/320#issuecomment-495990983</a><br>\n덧글에 논의 내용을 올려주었다.<br>\n<strong>싱글 모듈</strong>을 제외한 구조는 src 레이아웃을 따른다고 한다.</p>\n<blockquote>\n<p>This was discussed at the Packaging Mini Summit (<a href=\"https://docs.google.com/document/d/1Wz2-ECkicJgAmQDxMFivWmU2ZunKvPZ2UfQ59zDGj7g/edit#\">notes for that</a>). Here's my rough summary from memory + the notes:</p>\n<ul>\n<li>We should use a name for non-src/ layout that isn't negative-tone:\n<ul>\n<li>suggestions at the summit: flat / natural / root / simple (please bikeshed elsewhere)</li>\n</ul>\n</li>\n<li>Everyone agreed that there are benefits to the <code class=\"language-text\">src/</code> layout and that it should be documented.</li>\n<li>Final position after discussion:\n<ul>\n<li>single module packages should use flat layout.\n<ul>\n<li>REPL breaks when using <code class=\"language-text\">src/</code> (you can't <code class=\"language-text\">import module</code>) and we considered this to be an important detail for first-time packagers who only want to share a script.</li>\n</ul>\n</li>\n<li>Anything beyond a single module being packaged, should use the <code class=\"language-text\">src/</code> directory.</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p><a href=\"https://github.com/pypa/packaging.python.org/issues/320#issuecomment-496064900\">https://github.com/pypa/packaging.python.org/issues/320#issuecomment-496064900</a><br>\n싱글 모듈이란 <code class=\"language-text\">.py</code> 파일 하나만 있는 프로젝트가 싱글 모듈이라고 한다.</p>\n<blockquote>\n<p>A single module = single <code class=\"language-text\">.py</code> file.</p>\n<p>requests is not a single module project. It's a package, containing multiple modules. Using terms from <a href=\"https://packaging.python.org/glossary/\">https://packaging.python.org/glossary/</a>.</p>\n</blockquote>\n<p>구글 시트에서 토론 내용에 대해서 정리 해두었다.</p>\n<p><a href=\"https://docs.google.com/document/d/1Wz2-ECkicJgAmQDxMFivWmU2ZunKvPZ2UfQ59zDGj7g/edit#heading=h.2cgqnlxl8y3e\">https://docs.google.com/document/d/1Wz2-ECkicJgAmQDxMFivWmU2ZunKvPZ2UfQ59zDGj7g/edit#heading=h.2cgqnlxl8y3e</a></p>\n<blockquote>\n<p>Currently the \"non source\" or \"flat\" layout is documented in the Packaging documentation, specifically the section on Packaging Python Projects. The \"src\" layout is not documented in the Packaging documentation.</p>\n</blockquote>\n<p>(이전에는 src 레이아웃이 아닌 최상위에 컴포넌트별 폴더를 두었는데) non source 또는 flat 레이아웃이라고 불렀고, 패키징 관련 문서에 설명했다고 한다.</p>\n<blockquote>\n<p>Key Questions</p>\n</blockquote>\n<p>Should the src layout be documented?\nShould it be the default?</p>\n<p>논의 주제는 src 레이아웃을 명시할까? 그리고 기본 레이아웃으로 해도 될까?</p>\n<blockquote>\n<p>Nick's opinion is that the flat case should be the example case as it is the simplest</p>\n</blockquote>\n<p>Donald and others mention that there are problems with the flat layout and for these reasons the beginner guide should use the src layout</p>\n<p>몇 가지 문제점이 있기 때문에 시작 가이드에서 src 레이아웃을 사용한다고 주장함</p>\n<p>재밌는 점. Non-src 레이아웃에 대해서 뭐라고 부를지 의논했는데 후보 중..</p>\n<blockquote>\n<p>Flat (least-disliked option)</p>\n</blockquote>\n<p>Root (potentially non-obvious to beginners; potential confusion with, e.g., ‘filesystem root’)\n\"Bad\" (.....)\nNon-src (may imply unduly that “src” is preferred)\nNatural (may imply unduly that “src” is discouraged)</p>\n<p>Bad 레이아웃이 있다 ㅋㅋ</p>\n<h2 id=\"object-converter-serialization--deserialization\" style=\"position:relative;\"><a href=\"#object-converter-serialization--deserialization\" aria-label=\"object converter serialization  deserialization permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Object Converter (Serialization &#x26; Deserialization)</h2>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Nested Structure</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Django Form</td>\n<td>nope</td>\n</tr>\n<tr>\n<td>Django REST Framework Serializer</td>\n<td>yes</td>\n</tr>\n<tr>\n<td>WTForms</td>\n<td>yes</td>\n</tr>\n<tr>\n<td>Marshmallow</td>\n<td>yes</td>\n</tr>\n</tbody>\n</table>\n<p>객체를 변환하거나 검증하는 라이브러리 비교.</p>\n<h3 id=\"django-rest-framework-serializer\" style=\"position:relative;\"><a href=\"#django-rest-framework-serializer\" aria-label=\"django rest framework serializer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Django REST Framework Serializer</h3>\n<p><a href=\"https://www.django-rest-framework.org/api-guide/serializers/\">https://www.django-rest-framework.org/api-guide/serializers/</a></p>\n<p>Django Form은 HTML Form을 위한 기능이라 REST API의 중첩 구조 등 JSON을 대응하기엔 부족하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">UserSerializer</span><span class=\"token punctuation\">(</span>serializers<span class=\"token punctuation\">.</span>Serializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  email <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>EmailField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  username <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CommentSerializer</span><span class=\"token punctuation\">(</span>serializers<span class=\"token punctuation\">.</span>Serializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  user <span class=\"token operator\">=</span> UserSerializer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  content <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n  created <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nserializer <span class=\"token operator\">=</span> CommentSerializer<span class=\"token punctuation\">(</span>data<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'user'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'email'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'foobar'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'username'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'doe'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'content'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'baz'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nserializer<span class=\"token punctuation\">.</span>is_valid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># False</span>\nserializer<span class=\"token punctuation\">.</span>errors\n<span class=\"token comment\"># {'user': {'email': ['Enter a valid e-mail address.']}, 'created': ['This field is required.']}</span></code></pre></div>\n<h3 id=\"wtforms\" style=\"position:relative;\"><a href=\"#wtforms\" aria-label=\"wtforms permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WTForms</h3>\n<p><a href=\"https://github.com/wtforms/wtforms\">https://github.com/wtforms/wtforms</a></p>\n<p>Django Integration인 <a href=\"https://github.com/wtforms/wtforms-django\">WTForms-Django 프로젝트</a>가 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">LocationForm</span><span class=\"token punctuation\">(</span>Form<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> HiddenField<span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span>\n  title <span class=\"token operator\">=</span> StringField<span class=\"token punctuation\">(</span>_l<span class=\"token punctuation\">(</span><span class=\"token string\">'Title'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>Required<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  location <span class=\"token operator\">=</span> CoordinatesField<span class=\"token punctuation\">(</span>_l<span class=\"token punctuation\">(</span><span class=\"token string\">'Coordinates'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ProjectForm</span><span class=\"token punctuation\">(</span>Form<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  title <span class=\"token operator\">=</span> StringField<span class=\"token punctuation\">(</span>_l<span class=\"token punctuation\">(</span><span class=\"token string\">'Title'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  manager <span class=\"token operator\">=</span> StringField<span class=\"token punctuation\">(</span>_l<span class=\"token punctuation\">(</span><span class=\"token string\">'Manager'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  description <span class=\"token operator\">=</span> StringField<span class=\"token punctuation\">(</span>_l<span class=\"token punctuation\">(</span><span class=\"token string\">'Description'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  locations <span class=\"token operator\">=</span> FieldList<span class=\"token punctuation\">(</span>FormField<span class=\"token punctuation\">(</span>LocationForm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> min_entries<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\ndocument <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'title'</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">unicode</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'description'</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">unicode</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'manager'</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">unicode</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'locations'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'id'</span><span class=\"token punctuation\">:</span> uuid<span class=\"token punctuation\">.</span>UUID<span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'title'</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">unicode</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'location'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'coordinates'</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">:</span><span class=\"token builtin\">unicode</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n\nf <span class=\"token operator\">=</span> ProjectForm<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nf<span class=\"token punctuation\">.</span>process<span class=\"token punctuation\">(</span>data<span class=\"token operator\">=</span>document<span class=\"token punctuation\">)</span>\nf<span class=\"token punctuation\">.</span>locations<span class=\"token punctuation\">.</span>data</code></pre></div>\n<ul>\n<li>예제가 모두 HTML Form 기준으로 되어있다. HTML Form을 대응하는 용도인 거 같다.</li>\n<li>cleaned data를 얻을 수 없다. <code class=\"language-text\">StringField</code>에 숫자를 보내면? 숫자가 나옴. 문자열이 아님.</li>\n<li>Form의 인스턴스에 대해서 작업을 함. 코딩 실수 가능성 농후</li>\n</ul>\n<h3 id=\"marshmallow\" style=\"position:relative;\"><a href=\"#marshmallow\" aria-label=\"marshmallow permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Marshmallow</h3>\n<p><a href=\"https://github.com/marshmallow-code/marshmallow\">https://github.com/marshmallow-code/marshmallow</a></p>\n<p>Django가 아니라면 이 솔루션이 적절한 듯.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ArtistSchema</span><span class=\"token punctuation\">(</span>Schema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name <span class=\"token operator\">=</span> fields<span class=\"token punctuation\">.</span>Str<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AlbumSchema</span><span class=\"token punctuation\">(</span>Schema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    title <span class=\"token operator\">=</span> fields<span class=\"token punctuation\">.</span>Str<span class=\"token punctuation\">(</span>required<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    release_date <span class=\"token operator\">=</span> fields<span class=\"token punctuation\">.</span>Date<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    artist <span class=\"token operator\">=</span> fields<span class=\"token punctuation\">.</span>Nested<span class=\"token punctuation\">(</span>ArtistSchema<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nbowie <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"David Bowie\"</span><span class=\"token punctuation\">)</span>\nalbum <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>artist<span class=\"token operator\">=</span>bowie<span class=\"token punctuation\">,</span> title<span class=\"token operator\">=</span><span class=\"token string\">\"Hunky Dory\"</span><span class=\"token punctuation\">,</span> release_date<span class=\"token operator\">=</span>date<span class=\"token punctuation\">(</span><span class=\"token number\">1971</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nschema <span class=\"token operator\">=</span> AlbumSchema<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nresult <span class=\"token operator\">=</span> schema<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span>album<span class=\"token punctuation\">)</span>\npprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> indent<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># { 'artist': {'name': 'David Bowie'},</span>\n<span class=\"token comment\">#   'release_date': '1971-12-17',</span>\n<span class=\"token comment\">#   'title': 'Hunky Dory'}</span></code></pre></div>\n<h2 id=\"rxpy\" style=\"position:relative;\"><a href=\"#rxpy\" aria-label=\"rxpy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rxpy</h2>\n<p>Rxpy는 ReactiveX의 파이썬 구현체이다.</p>\n<p><code class=\"language-text\">pip install rx</code>로 설치. <code class=\"language-text\">rxpy</code>가 아니다.</p>\n<h3 id=\"rxpy-example\" style=\"position:relative;\"><a href=\"#rxpy-example\" aria-label=\"rxpy example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rxpy example</h3>\n<p><a href=\"https://www.tutorialspoint.com/rxpy/rxpy_concurrency_using_scheduler.htm\">https://www.tutorialspoint.com/rxpy/rxpy_concurrency_using_scheduler.htm</a></p>\n<p>위 문서에서 제공하는 예제이다.</p>\n<p>다음 코드는 rxpy를 사용하지만 병럴처리를 하지 않는 코드이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> random\n<span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">import</span> rx\n<span class=\"token keyword\">from</span> rx <span class=\"token keyword\">import</span> operators <span class=\"token keyword\">as</span> ops\n<span class=\"token keyword\">def</span> <span class=\"token function\">adding_delay</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n   time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">return</span> value\n<span class=\"token comment\"># Task 1</span>\nrx<span class=\"token punctuation\">.</span>of<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>pipe<span class=\"token punctuation\">(</span>\n   ops<span class=\"token punctuation\">.</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">:</span> adding_delay<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>subscribe<span class=\"token punctuation\">(</span>\n   <span class=\"token keyword\">lambda</span> s<span class=\"token punctuation\">:</span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"From Task 1: {0}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token keyword\">lambda</span> e<span class=\"token punctuation\">:</span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token keyword\">lambda</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Task 1 complete\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Task 2</span>\nrx<span class=\"token punctuation\">.</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>pipe<span class=\"token punctuation\">(</span>\n   ops<span class=\"token punctuation\">.</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">:</span> adding_delay<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>subscribe<span class=\"token punctuation\">(</span>\n   <span class=\"token keyword\">lambda</span> s<span class=\"token punctuation\">:</span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"From Task 2: {0}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token keyword\">lambda</span> e<span class=\"token punctuation\">:</span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token keyword\">lambda</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Task 2 complete\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Press any key to exit\\n\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>rxpy를 사용하더라도 쓰레드를 사용하지 않으면 병렬처리 되지 않는다. 결과를 보면 다음과 같다:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">From Task <span class=\"token number\">1</span>: <span class=\"token number\">1</span>\nFrom Task <span class=\"token number\">1</span>: <span class=\"token number\">2</span>\nFrom Task <span class=\"token number\">1</span>: <span class=\"token number\">3</span>\nFrom Task <span class=\"token number\">1</span>: <span class=\"token number\">4</span>\nFrom Task <span class=\"token number\">1</span>: <span class=\"token number\">5</span>\nTask <span class=\"token number\">1</span> complete\nFrom Task <span class=\"token number\">2</span>: <span class=\"token number\">1</span>\nFrom Task <span class=\"token number\">2</span>: <span class=\"token number\">2</span>\nFrom Task <span class=\"token number\">2</span>: <span class=\"token number\">3</span>\nFrom Task <span class=\"token number\">2</span>: <span class=\"token number\">4</span>\nTask <span class=\"token number\">2</span> complete</code></pre></div>\n<p>이 코드는 <a href=\"https://rxpy.readthedocs.io/en/latest/reference_scheduler.html#rx.scheduler.CurrentThreadScheduler\">CurrentThreadScheduler</a>를 사용하여 처리한다. 즉 하나의 스레드만 쓴다.</p>\n<p><strong>병렬처리 하기</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> multiprocessing\n<span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">from</span> threading <span class=\"token keyword\">import</span> current_thread\n\n<span class=\"token keyword\">import</span> rx\n<span class=\"token keyword\">from</span> rx <span class=\"token keyword\">import</span> operators <span class=\"token keyword\">as</span> ops\n<span class=\"token keyword\">from</span> rx<span class=\"token punctuation\">.</span>scheduler<span class=\"token punctuation\">.</span>threadpoolscheduler <span class=\"token keyword\">import</span> ThreadPoolScheduler\n\n<span class=\"token comment\"># calculate cpu count, using which will create a ThreadPoolScheduler</span>\nthread_count <span class=\"token operator\">=</span> multiprocessing<span class=\"token punctuation\">.</span>cpu_count<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nthread_pool_scheduler <span class=\"token operator\">=</span> ThreadPoolScheduler<span class=\"token punctuation\">(</span>thread_count<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'CPU count is {0}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>thread_count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">asyn</span><span class=\"token punctuation\">(</span>inp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> rx<span class=\"token punctuation\">.</span>from_callable<span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">lambda</span><span class=\"token punctuation\">:</span> adding_delay<span class=\"token punctuation\">(</span>inp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        scheduler<span class=\"token operator\">=</span>thread_pool_scheduler<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">adding_delay</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> value\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">generate_nums</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">yield</span> i\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">print_t</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>current_thread<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>it<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n\n\nrx<span class=\"token punctuation\">.</span>from_iterable<span class=\"token punctuation\">(</span>generate_nums<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\\\n    <span class=\"token punctuation\">.</span>pipe<span class=\"token punctuation\">(</span>\n        ops<span class=\"token punctuation\">.</span>flat_map<span class=\"token punctuation\">(</span>asyn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        ops<span class=\"token punctuation\">.</span>do_action<span class=\"token punctuation\">(</span>\n            on_next<span class=\"token operator\">=</span>print_t<span class=\"token punctuation\">,</span>\n            on_completed<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span><span class=\"token punctuation\">:</span> print_t<span class=\"token punctuation\">(</span><span class=\"token string\">'process done'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\\\n    <span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\nprint_t<span class=\"token punctuation\">(</span><span class=\"token string\">'program done'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">run()</code>으로 프로세스 종료를 기다릴 수 있다. <code class=\"language-text\">subscribe()</code> 사용하면 스레드를 기다리지 않고 즉시 끝난다.</p>\n<p>위 코드는 cpu 수인 12개 쓰레드로 25개의 아이템을 처리하는 예제다.\n각 아이템마다 3초 대기하므로, 12개의 쓰레드가 병렬처리하여 총 9초가 소요되어야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">❯ <span class=\"token function\">time</span> python test.py\nCPU count is <span class=\"token number\">12</span>\nThreadPoolExecutor-0_0: <span class=\"token number\">0</span>\nThreadPoolExecutor-0_3: <span class=\"token number\">3</span>\nThreadPoolExecutor-0_2: <span class=\"token number\">2</span>\nThreadPoolExecutor-0_5: <span class=\"token number\">5</span>\nThreadPoolExecutor-0_7: <span class=\"token number\">7</span>\nThreadPoolExecutor-0_9: <span class=\"token number\">9</span>\nThreadPoolExecutor-0_10: <span class=\"token number\">10</span>\nThreadPoolExecutor-0_1: <span class=\"token number\">1</span>\nThreadPoolExecutor-0_4: <span class=\"token number\">4</span>\nThreadPoolExecutor-0_8: <span class=\"token number\">8</span>\nThreadPoolExecutor-0_11: <span class=\"token number\">11</span>\nThreadPoolExecutor-0_6: <span class=\"token number\">6</span>             <span class=\"token comment\"># 여기서 3s</span>\nThreadPoolExecutor-0_2: <span class=\"token number\">13</span>\nThreadPoolExecutor-0_5: <span class=\"token number\">14</span>\nThreadPoolExecutor-0_7: <span class=\"token number\">15</span>\nThreadPoolExecutor-0_3: <span class=\"token number\">12</span>\nThreadPoolExecutor-0_9: <span class=\"token number\">16</span>\nThreadPoolExecutor-0_10: <span class=\"token number\">17</span>\nThreadPoolExecutor-0_4: <span class=\"token number\">19</span>\nThreadPoolExecutor-0_0: <span class=\"token number\">21</span>\nThreadPoolExecutor-0_8: <span class=\"token number\">20</span>\nThreadPoolExecutor-0_1: <span class=\"token number\">18</span>\nThreadPoolExecutor-0_11: <span class=\"token number\">22</span>\nThreadPoolExecutor-0_6: <span class=\"token number\">23</span>            <span class=\"token comment\"># 여기서 6s</span>\nThreadPoolExecutor-0_5: <span class=\"token number\">24</span>\nThreadPoolExecutor-0_5: process <span class=\"token keyword\">done</span>\nMainThread: program <span class=\"token keyword\">done</span>\npython test.py  <span class=\"token number\">0</span>.06s user <span class=\"token number\">0</span>.03s system <span class=\"token number\">0</span>% cpu <span class=\"token number\">9.169</span> total</code></pre></div>\n<p><code class=\"language-text\">ThreadPoolExecutor-0_N</code> 이름으로 0~11, 총 12개의 쓰레드가 보인다.\n주석으로 표기한 지점에서 3초, 6초 소요되었다. 마지막 24번까지 9초.</p>\n<p>RXPY 예제 프로젝트를 만들었다: <a href=\"https://github.com/edunga1/practice-rxpy\">https://github.com/edunga1/practice-rxpy</a> <br>\ndocker로 실행해볼 수 있다.</p>\n<h2 id=\"redis-py\" style=\"position:relative;\"><a href=\"#redis-py\" aria-label=\"redis py permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>redis-py</h2>\n<p><a href=\"https://github.com/redis/redis-py\">https://github.com/redis/redis-py</a></p>\n<h3 id=\"redis-connection을-전역-생성-vs-요청마다-생성\" style=\"position:relative;\"><a href=\"#redis-connection%EC%9D%84-%EC%A0%84%EC%97%AD-%EC%83%9D%EC%84%B1-vs-%EC%9A%94%EC%B2%AD%EB%A7%88%EB%8B%A4-%EC%83%9D%EC%84%B1\" aria-label=\"redis connection을 전역 생성 vs 요청마다 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>redis connection을 전역 생성 vs 요청마다 생성</h3>\n<p>SO <a href=\"https://stackoverflow.com/questions/18022767/python-redis-connection-should-be-closed-on-every-request-flask/18024593\">Python Redis connection should be closed on every request? (flask)</a> 질문이다.</p>\n<p>redis connection을 전역으로 하나만 생성해서 필요한 곳에서 import 하여 사용할 지, 매 요청마다 생성하고 닫을 지에 대한 질문이다.</p>\n<p>전자처럼 Top level 객체는 <a href=\"../nodejs\">Node.js</a>나 <a href=\"../python\">python</a>에서는 일반적인 방법이다.\n<a href=\"../spring-framework\">Spring Framework</a>의 경우 주입에 대한 문제에서 자유로우니 Bean으로 생성하고 프레임워크를 통해 주입받는 것이 일반적이다.\n그래서 node나 python을 처음 접하는 경우 의존 문제에 대해 난해할 수 있다.\nDI 라이브러리 사용하지 않고 이상적인 코드를 작성하려고 하면 인스턴스 생성하다가 지치게 된다.</p>\n<p>어쨌든 질문에 대한 답은 <code class=\"language-text\">redis-py</code>가 connection pool을 관리하기 때문에 후자를 선택하더라도 우려하는 성능 문제는 없다고 한다.</p>\n<p><code class=\"language-text\">redis-py</code>제작자의 추천은 Global Instance를 가지고 사용하는 것:</p>\n<blockquote>\n<p>a. create a global redis client instance and have your code use that.\nb. create a global connection pool and pass that to various redis instances throughout your code.</p>\n</blockquote>\n<p><a href=\"https://groups.google.com/g/redis-db/c/m9k2DN7GX-M/m/5i5HtXkbeBYJ?pli=1\">google groups에서 제작자의 원문</a>을 볼 수 있다.</p>\n<h2 id=\"django-web-framework\" style=\"position:relative;\"><a href=\"#django-web-framework\" aria-label=\"django web framework permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Django Web Framework</h2>\n<h3 id=\"onetoonefield-vs-foreignkeyfield\" style=\"position:relative;\"><a href=\"#onetoonefield-vs-foreignkeyfield\" aria-label=\"onetoonefield vs foreignkeyfield permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">OneToOneField</code> vs <code class=\"language-text\">ForeignKeyField</code></h3>\n<p>둘 다 related_name으로 역참조 할 수 있지만, <code class=\"language-text\">ForeignKey</code> 는 <code class=\"language-text\">QuerySet</code>을 반환하므로 <code class=\"language-text\">None</code> 체크를 하지 않아도 된다.\n반면에 <code class=\"language-text\">OneToOneField</code>는 <code class=\"language-text\">RelatedObjectDoesNotExist</code> 예외가 발생한다.</p>\n<p>따라서 좀 더 유연한 <code class=\"language-text\">ForeignKey</code> 를 사용하려고 했지만, <code class=\"language-text\">ForeignKey</code> + <code class=\"language-text\">unique</code> 또는 <code class=\"language-text\">primary_key</code> 속성을 사용하면 서버 시작 시 <code class=\"language-text\">Setting unique=True on a ForeignKey has the same effect as using a OneToOneField</code> warning을 출력한다.</p>\n<p>이 주의 문구에 대해서 이미 <a href=\"http://djangoproject.com\">djangoproject.com</a>에 보고되어 있다.</p>\n<p><a href=\"https://code.djangoproject.com/ticket/26044\">Misleading Warning \"HINT: ForeignKey(unique=True) is usually better served by a OneToOneField.\"</a></p>\n<p>답변은 \"설정을 통해 주의 문구를 감춰라\" 라는 뉘앙스라 매우 불편한 부분.</p>\n<h3 id=\"복합키를-foreignkey로-사용하는-방법-찾기\" style=\"position:relative;\"><a href=\"#%EB%B3%B5%ED%95%A9%ED%82%A4%EB%A5%BC-foreignkey%EB%A1%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95-%EC%B0%BE%EA%B8%B0\" aria-label=\"복합키를 foreignkey로 사용하는 방법 찾기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>복합키를 ForeignKey로 사용하는 방법 찾기</h3>\n<p>아직 해결하지 못했다.</p>\n<p><code class=\"language-text\">source_type='order', source_id=1234</code>와 같이 복합키의 <code class=\"language-text\">source_type</code>에 따라 관계되는 테이블이 달라진다.\n<code class=\"language-text\">source_id</code>는 관계 대상의 ID다.</p>\n<p>방법을 찾지 못해서 직접 prefetch하는 함수를 만드는 등, 복잡하게 처리하고 있다.</p>\n<p><a href=\"https://pypi.org/project/django-composite-foreignkey/\">django-composite-foreignkey</a></p>\n<p>2년동안 관리되지 않은 저장소. 이거 사용할 수 있을까?</p>\n<p><a href=\"https://stackoverflow.com/questions/12716970/get-contenttype-id-in-django-for-generic-relation\">Get ContentType id in Django for generic relation</a></p>\n<p><code class=\"language-text\">GenericForeignKey</code>와 <code class=\"language-text\">ForeignKey(ContentType) + choices</code>를 사용하면 될까?</p>\n<p><code class=\"language-text\">source_type</code> 이 <code class=\"language-text\">trade | order</code>로 테이블 이름 조합으로만 저장된다.\n원하는 포맷으로 저장할 수 있어야 한다.</p>\n<h2 id=\"디버깅\" style=\"position:relative;\"><a href=\"#%EB%94%94%EB%B2%84%EA%B9%85\" aria-label=\"디버깅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>디버깅</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pdb<span class=\"token punctuation\">;</span> pdb<span class=\"token punctuation\">.</span>set_trace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위 코드로 breakpoint를 설정할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">(</span>Pdb<span class=\"token punctuation\">)</span> ?\n\nDocumented commands <span class=\"token punctuation\">(</span>type <span class=\"token builtin class-name\">help</span> <span class=\"token operator\">&lt;</span>topic<span class=\"token operator\">></span><span class=\"token punctuation\">)</span>:\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span>\nEOF    bt         cont      <span class=\"token builtin class-name\">enable</span>  jump  pp       run      unt\na      c          <span class=\"token builtin class-name\">continue</span>  <span class=\"token builtin class-name\">exit</span>    l     q        s        <span class=\"token keyword\">until</span>\n<span class=\"token builtin class-name\">alias</span>  cl         d         h       list  quit     step     up\nargs   <span class=\"token function\">clear</span>      debug     <span class=\"token builtin class-name\">help</span>    n     r        tbreak   w\nb      commands   disable   ignore  next  restart  u        whatis\n<span class=\"token builtin class-name\">break</span>  condition  down      j       p     <span class=\"token builtin class-name\">return</span>   <span class=\"token builtin class-name\">unalias</span>  where\n\nMiscellaneous <span class=\"token builtin class-name\">help</span> topics:\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span>\n<span class=\"token builtin class-name\">exec</span>  pdb\n\nUndocumented commands:\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span>\nretval  rv</code></pre></div>\n<p>자주 사용하는 명령어:</p>\n<ul>\n<li><code class=\"language-text\">?</code> 도움말</li>\n<li><code class=\"language-text\">l</code> 코드를 출력한다. 라인 번호를 인자로 받으며, 인자가 없으면 현재 라인을 출력한다.\n<ul>\n<li>python 2에서는 <code class=\"language-text\">l</code> 연속 호출 시 다음 페이지를 출력해서, <code class=\"language-text\">l .</code> 처렴 명시적으로 현재 라인을 출력했던 거 같다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">c</code> 계속 진행한다.</li>\n<li><code class=\"language-text\">q</code> 종료한다.</li>\n<li><code class=\"language-text\">n</code> 다음 라인까지 진행한다.</li>\n</ul>\n<p>디버깅 명령어는 코드의 요소 이름과 충돌할 수 있는데, 이럴 때는 <code class=\"language-text\">!</code>를 붙여서 사용한다: <code class=\"language-text\">!l .</code></p>\n<p>디버깅할 때 <code class=\"language-text\">dir()</code>, <code class=\"language-text\">type()</code>는 특히 자주 사용한다.</p>\n<p><code class=\"language-text\">dir()</code> 객체의 속성을 출력한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">(</span>Pdb<span class=\"token punctuation\">)</span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span>datetime<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'__add__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__class__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__delattr__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__doc__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__eq__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__format__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__ge__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__getattribute__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__gt__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__hash__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__init__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__le__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__lt__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__ne__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__new__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__radd__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__reduce__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__reduce_ex__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__repr__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__rsub__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__setattr__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__sizeof__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__str__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__sub__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__subclasshook__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'astimezone'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'combine'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ctime'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'date'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'day'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'dst'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'fromordinal'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'fromtimestamp'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hour'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'isocalendar'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'isoformat'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'isoweekday'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'max'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'microsecond'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'min'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'minute'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'month'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'now'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'replace'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'resolution'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'second'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'strftime'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'strptime'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'time'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'timetuple'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'timetz'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'today'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'toordinal'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'tzinfo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'tzname'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utcfromtimestamp'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utcnow'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utcoffset'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utctimetuple'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'weekday'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'year'</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p><code class=\"language-text\">type()</code> 객체의 타입을 출력한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">(</span>Pdb<span class=\"token punctuation\">)</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span><span class=\"token builtin\">type</span> <span class=\"token string\">'datetime.datetime'</span><span class=\"token operator\">></span></code></pre></div>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\"><a href=\"https://en.wikipedia.org/wiki/Python_(programming_language)\">Python (programming language) - Wikipedia</a><a href=\"#fnref-1\" class=\"footnote-backref\">↩</a></li>\n</ol>\n</div>"}},"allMarkdownRemark":{"nodes":[{"headings":[{"value":"2016-11-16 캠퍼스 스타트업 스쿨의 \"구글 플레이에서 꼭 지켜야 할 두 가지\""}],"fields":{"slug":"/2016-11-16-google-campus-two-things-you-must-keep-in-google-play/"}},{"headings":[{"value":"2016-08-27 GDG WebTech Workshop \"측정하는 놈, 로딩하는 놈, 그리는 놈\""}],"fields":{"slug":"/2016-08-27-gdg-webtech-workshop-nnn/"}},{"headings":[{"value":"Airflow"}],"fields":{"slug":"/airflow/"}},{"headings":[{"value":"알고리즘"}],"fields":{"slug":"/algorithm/"}},{"headings":[{"value":"Amazon Redshift"}],"fields":{"slug":"/amazon-redshift/"}},{"headings":[{"value":"Angular JS"}],"fields":{"slug":"/angularjs/"}},{"headings":[{"value":"APM"}],"fields":{"slug":"/apm/"}},{"headings":[{"value":"Architecture"}],"fields":{"slug":"/architecture/"}},{"headings":[{"value":"Amazon Web Service"}],"fields":{"slug":"/aws/"}},{"headings":[{"value":"책"}],"fields":{"slug":"/book/"}},{"headings":[],"fields":{"slug":"/bk/"}},{"headings":[{"value":"C# Programming Language"}],"fields":{"slug":"/c-sharp/"}},{"headings":[{"value":"The Cat Logic"}],"fields":{"slug":"/cat-logic/"}},{"headings":[{"value":"크롬 브라우저"}],"fields":{"slug":"/chrome-browser/"}},{"headings":[{"value":"Clean Code"}],"fields":{"slug":"/clean-code/"}},{"headings":[{"value":"회사"}],"fields":{"slug":"/company/"}},{"headings":[{"value":"코드 리뷰"}],"fields":{"slug":"/code-review/"}},{"headings":[{"value":"Computer Graphics"}],"fields":{"slug":"/computer-graphics/"}},{"headings":[{"value":"CI/CD"}],"fields":{"slug":"/continuous-integration-and-deployment/"}},{"headings":[{"value":"CSS"}],"fields":{"slug":"/css/"}},{"headings":[{"value":"crontab"}],"fields":{"slug":"/crontab/"}},{"headings":[{"value":"CURL"}],"fields":{"slug":"/curl/"}},{"headings":[{"value":"자료구조"}],"fields":{"slug":"/data-structure/"}},{"headings":[{"value":"Data analysis"}],"fields":{"slug":"/data-analysis/"}},{"headings":[{"value":"Database"}],"fields":{"slug":"/database/"}},{"headings":[{"value":"DevOps"}],"fields":{"slug":"/devops/"}},{"headings":[{"value":"Design Pattern"}],"fields":{"slug":"/design-pattern/"}},{"headings":[{"value":"Elasticsearch"}],"fields":{"slug":"/elasticsearch/"}},{"headings":[{"value":"Docker"}],"fields":{"slug":"/docker/"}},{"headings":[{"value":"임베딩"}],"fields":{"slug":"/embeddings/"}},{"headings":[{"value":"세미나 및 컨퍼런스 후기"}],"fields":{"slug":"/experience-review/"}},{"headings":[{"value":"Game"}],"fields":{"slug":"/game/"}},{"headings":[{"value":"GatsbyJS"}],"fields":{"slug":"/gatsbyjs/"}},{"headings":[{"value":"Godot Engine"}],"fields":{"slug":"/godot/"}},{"headings":[{"value":"GitHub"}],"fields":{"slug":"/github/"}},{"headings":[{"value":"Git"}],"fields":{"slug":"/git/"}},{"headings":[{"value":"Google Analytics"}],"fields":{"slug":"/google-analytics/"}},{"headings":[{"value":"Gradle"}],"fields":{"slug":"/gradle/"}},{"headings":[{"value":"Hardware"}],"fields":{"slug":"/hardware/"}},{"headings":[{"value":"아이디어 방법론"}],"fields":{"slug":"/idea-methodology/"}},{"headings":[{"value":"Canvas"}],"fields":{"slug":"/html-canvas/"}},{"headings":[{"value":"HTML"}],"fields":{"slug":"/html/"}},{"headings":[{"value":"Ionic Framework"}],"fields":{"slug":"/ionic-framework/"}},{"headings":[{"value":"영감을 주는 것"}],"fields":{"slug":"/inspiration/"}},{"headings":[{"value":"개발 용어"}],"fields":{"slug":"/jargon/"}},{"headings":[{"value":"Java Programming Language"}],"fields":{"slug":"/java/"}},{"headings":[{"value":"JetBrains"}],"fields":{"slug":"/jetbrains/"}},{"headings":[{"value":"Javascript & Typescript Programming Language"}],"fields":{"slug":"/javascript/"}},{"headings":[{"value":"Jira"}],"fields":{"slug":"/jira/"}},{"headings":[{"value":"Kotlin Programming Language"}],"fields":{"slug":"/kotlin/"}},{"headings":[{"value":"Kubernetes"}],"fields":{"slug":"/kubernetes/"}},{"headings":[{"value":"Language Server Protocol"}],"fields":{"slug":"/language-server-protocol/"}},{"headings":[{"value":"Large Language Model"}],"fields":{"slug":"/large-language-model/"}},{"headings":[{"value":"Linux"}],"fields":{"slug":"/linux/"}},{"headings":[{"value":"Logging"}],"fields":{"slug":"/logging/"}},{"headings":[{"value":"Machine Learning"}],"fields":{"slug":"/machine-learning/"}},{"headings":[{"value":"Mac OS"}],"fields":{"slug":"/mac-os/"}},{"headings":[{"value":"Mail"}],"fields":{"slug":"/mail/"}},{"headings":[{"value":"Markdown"}],"fields":{"slug":"/markdown/"}},{"headings":[{"value":"Network"}],"fields":{"slug":"/network/"}},{"headings":[{"value":"Node JS"}],"fields":{"slug":"/nodejs/"}},{"headings":[{"value":"Object Oriented Programming"}],"fields":{"slug":"/object-oriented-programming/"}},{"headings":[{"value":"Ollama"}],"fields":{"slug":"/ollama/"}},{"headings":[{"value":"OpenAI"}],"fields":{"slug":"/openai/"}},{"headings":[{"value":"Phidata"}],"fields":{"slug":"/phidata/"}},{"headings":[{"value":"개인적인 철학"}],"fields":{"slug":"/philosophy/"}},{"headings":[{"value":"Physics"}],"fields":{"slug":"/physics/"}},{"headings":[{"value":"Podman"}],"fields":{"slug":"/podman/"}},{"headings":[{"value":"PostgreSQL"}],"fields":{"slug":"/postgresql/"}},{"headings":[{"value":"Programming Convention"}],"fields":{"slug":"/programming-convention/"}},{"headings":[{"value":"Programming Paradigm"}],"fields":{"slug":"/programming-paradigm/"}},{"headings":[{"value":"인용문"}],"fields":{"slug":"/quotation/"}},{"headings":[{"value":"Python Programming Language"}],"fields":{"slug":"/python/"}},{"headings":[{"value":"Reactive Extensions (Reactive X, RX)"}],"fields":{"slug":"/reactive-extensions/"}},{"headings":[{"value":"React JS"}],"fields":{"slug":"/reactjs/"}},{"headings":[{"value":"Redis"}],"fields":{"slug":"/redis/"}},{"headings":[{"value":"Reverse Engineering"}],"fields":{"slug":"/reverse-engineering/"}},{"headings":[{"value":"Rust Programming Language"}],"fields":{"slug":"/rust/"}},{"headings":[{"value":"SCP"}],"fields":{"slug":"/scp/"}},{"headings":[{"value":"보안"}],"fields":{"slug":"/security/"}},{"headings":[{"value":"Sentry - APM & Error Tracking"}],"fields":{"slug":"/sentry/"}},{"headings":[{"value":"SFML"}],"fields":{"slug":"/sfml/"}},{"headings":[{"value":"소프트웨어 개발"}],"fields":{"slug":"/software-development/"}},{"headings":[{"value":"Shell 명령어"}],"fields":{"slug":"/shell/"}},{"headings":[{"value":"우주"}],"fields":{"slug":"/space/"}},{"headings":[{"value":"Spring framework"}],"fields":{"slug":"/spring-framework/"}},{"headings":[{"value":"테스트 주도 개발 (Test Driven Development)"}],"fields":{"slug":"/test-driven-development/"}},{"headings":[{"value":"Swagger"}],"fields":{"slug":"/swagger/"}},{"headings":[{"value":"시스템 장애"}],"fields":{"slug":"/system-failures/"}},{"headings":[{"value":"Testing"}],"fields":{"slug":"/testing/"}},{"headings":[{"value":"Tmux"}],"fields":{"slug":"/tmux/"}},{"headings":[{"value":"개발/비개발 도구"}],"fields":{"slug":"/tools/"}},{"headings":[{"value":"Unicode"}],"fields":{"slug":"/unicode/"}},{"headings":[{"value":"Treesitter"}],"fields":{"slug":"/treesitter/"}},{"headings":[{"value":"Unity 3D"}],"fields":{"slug":"/unity3d/"}},{"headings":[{"value":"Valve사의 신규 입사자를 위한 핸드북"}],"fields":{"slug":"/valve/"}},{"headings":[{"value":"Vim"}],"fields":{"slug":"/vim/"}},{"headings":[{"value":"VimEnter 2023"}],"fields":{"slug":"/vimenter-2023/"}},{"headings":[{"value":"VimWiki"}],"fields":{"slug":"/vimwiki/"}},{"headings":[{"value":"Vue JS"}],"fields":{"slug":"/vuejs/"}},{"headings":[{"value":"웹 개발"}],"fields":{"slug":"/web/"}},{"headings":[{"value":"WebGL"}],"fields":{"slug":"/webgl/"}},{"headings":[{"value":"Windows"}],"fields":{"slug":"/windows/"}},{"headings":[{"value":"Windows Subsystem for Linux (WSL)"}],"fields":{"slug":"/windows-subsystem-for-linux/"}},{"headings":[{"value":"추론 애플리케이션"}],"fields":{"slug":"/인공지능/용어/추론 애플리케이션/"}}]},"site":{"siteMetadata":{"gitHubRepositoryUrl":"https://github.com/edunga1/cat-logic"}}},"pageContext":{"id":"4ad5a059-d340-5925-93e7-45a64b75260b"}},"staticQueryHashes":[],"slicesMap":{}}