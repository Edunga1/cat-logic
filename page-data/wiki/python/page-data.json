{"componentChunkName":"component---src-pages-wiki-markdown-remark-fields-slug-tsx","path":"/wiki/python/","result":{"data":{"markdownRemark":{"tableOfContents":"<ul>\n<li>\n<p><a href=\"#python\">Python</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B0%9C%EB%B0%9C%EB%8F%84%EA%B5%AC\">개발도구</a></p>\n<ul>\n<li>\n<p><a href=\"#pyright\">pyright</a></p>\n<ul>\n<li><a href=\"#pyright-%EC%84%A4%EC%B9%98\">pyright 설치</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#pylint\">pylint</a></p>\n</li>\n<li>\n<p><a href=\"#mypy\">mypy</a></p>\n<ul>\n<li><a href=\"#django-stubs\">Django Stubs</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#python-code-formatter-autopep8-vs-black-vs-yapf\">python code formatter: autopep8 vs black vs yapf</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%A0%88%EA%B1%B0%EC%8B%9C%EB%A5%BC-%EC%9C%84%ED%95%9C-%EC%84%A4%EC%A0%95\">레거시를 위한 설정</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#python-mock\">Python mock</a></p>\n<ul>\n<li><a href=\"#decorator%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-mocking\">Decorator를 사용한 mocking.</a></li>\n<li><a href=\"#patchrequestsget\"><code>@patch('requests.get')</code></a></li>\n<li><a href=\"#patchobjectmymodule-requests\"><code>@patch.object(mymodule, 'requests')</code></a></li>\n<li><a href=\"#patchobjectmymodule-requests-newmyrequests\"><code>@patch.object(mymodule, 'requests', new=MyRequests)</code></a></li>\n<li><a href=\"#patchobjectmymodule-method-return_valuenone\"><code>@patch.object(mymodule, 'method', return_value=None)</code></a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#package-manager\">Package manager</a></p>\n<ul>\n<li><a href=\"#pipenv\">pipenv</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#packaging\">Packaging</a></p>\n<ul>\n<li><a href=\"#__all__\"><code>__all__</code></a></li>\n</ul>\n</li>\n</ul>","html":"<h1 id=\"python\" style=\"position:relative;\"><a href=\"#python\" aria-label=\"python permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Python</h1>\n<h1 id=\"개발도구\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EB%B0%9C%EB%8F%84%EA%B5%AC\" aria-label=\"개발도구 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개발도구</h1>\n<p>vim 기본 설정으로는 텍스트에디터 역할밖에 못한다.</p>\n<p>최소한 pyright는 사용하자.</p>\n<p>nvim-lspconfig, null-ls 이용하여 다음과 같이 설정, 사용하고 있다.</p>\n<pre><code class=\"language-lua\">-- vim 설정 파일의 일부분\nserver = require 'lspconfig'.pyright,\nsources = {\n    null_ls.builtins.diagnostics.pylint,\n    null_ls.builtins.diagnostics.mypy.with {\n        extra_args = { '--ignore-missing-imports' }\n    },\n    null_ls.builtins.formatting.autopep8,\n    null_ls.builtins.formatting.isort,\n},\n</code></pre>\n<h2 id=\"pyright\" style=\"position:relative;\"><a href=\"#pyright\" aria-label=\"pyright permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>pyright</h2>\n<p><a href=\"https://github.com/microsoft/pyright\">https://github.com/microsoft/pyright</a></p>\n<p><a href=\"language-server-protocol.md\">language server</a> for python.</p>\n<h3 id=\"pyright-설치\" style=\"position:relative;\"><a href=\"#pyright-%EC%84%A4%EC%B9%98\" aria-label=\"pyright 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>pyright 설치</h3>\n<ul>\n<li>nvim-lspconfig은 <code>Mason</code>을 사용하자: <code>:MasonInstall pyright</code></li>\n<li><a href=\"https://github.com/fannheyward/coc-pyright\">coc-nvim</a>: <code>:CocInstall coc-pyright</code></li>\n</ul>\n<h2 id=\"pylint\" style=\"position:relative;\"><a href=\"#pylint\" aria-label=\"pylint permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>pylint</h2>\n<p><a href=\"https://github.com/PyCQA/pylint\">https://github.com/PyCQA/pylint</a>\n정적 분석 도구.</p>\n<h2 id=\"mypy\" style=\"position:relative;\"><a href=\"#mypy\" aria-label=\"mypy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>mypy</h2>\n<p><a href=\"https://github.com/python/mypy\">https://github.com/python/mypy</a></p>\n<blockquote>\n<p>Optional static typing for Python</p>\n</blockquote>\n<p>정적 타입 검사 도구.</p>\n<p>타입 명세를 할 수 없는 경우에는 <code>Need type annotation for \"variable\"</code> 에러 메시지를 막기 위해 <code>my.ini</code> 생성하고 다음과 같이 설정하자:</p>\n<pre><code>[mypy]\n\n# disable error 'Need type annotation for \"variable\"'\ndisallow_untyped_defs = False\n</code></pre>\n<h3 id=\"django-stubs\" style=\"position:relative;\"><a href=\"#django-stubs\" aria-label=\"django stubs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Django Stubs</h3>\n<p><a href=\"https://github.com/typeddjango/django-stubs\">https://github.com/typeddjango/django-stubs</a></p>\n<p>django는 <code>objects</code> 등 마법을 사용해서 타입 제공을 제대로 받을 수 없다.</p>\n<p>djang-stubs는 django 매직과 관련된 타입 정보를 제공한다.</p>\n<h2 id=\"python-code-formatter-autopep8-vs-black-vs-yapf\" style=\"position:relative;\"><a href=\"#python-code-formatter-autopep8-vs-black-vs-yapf\" aria-label=\"python code formatter autopep8 vs black vs yapf permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>python code formatter: autopep8 vs black vs yapf</h2>\n<p>파이썬 코드 formatter 3종 비교.</p>\n<p><a href=\"https://github.com/neoclide/coc.nvim\">coc.nvim</a>에서는 파이썬 파일을 열 때 3개 중 하나를 선택하도록 한다:</p>\n<pre><code class=\"language-sh\">Formatter autopep8 is not installed. Install?:\n1. Yes\n2. Use black\n3. Use yapf\n</code></pre>\n<p><a href=\"https://www.reddit.com/r/Python/comments/8oqy03/blog_a_comparison_of_autopep8_black_and_yapf_code/.md\">Blog: A comparison of autopep8, black, and yapf - Code formatters for Python</a><br>\n3개를 비교한 다른 글. 덧글에는 black을 사용하고 만족했다나.</p>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>stars</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/hhatto/autopep8\">autopep8</a></td>\n<td>4.3k</td>\n<td>pep8 스타일 사용. 가장 많은 커밋</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/psf/black\">black</a></td>\n<td>31.2k</td>\n<td>가장 많은 star</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/google/yapf\">yapf</a></td>\n<td>13k</td>\n<td>구글이 maintainer</td>\n</tr>\n</tbody>\n</table>\n<p><strong>실제 사용 비교</strong></p>\n<p>비교 대상 코드</p>\n<pre><code class=\"language-python\">{\n  \"refundDeposit\": self.refund_deposit and _deposit_to_dict(self.refund_deposit)\n}\n</code></pre>\n<p><strong>black</strong></p>\n<pre><code class=\"language-python\">{\n  \"refundDeposit\": self.refund_deposit\n  and _deposit_to_dict(self.refund_deposit)\n}\n</code></pre>\n<p>이게 맞나?</p>\n<p><strong>yapf</strong></p>\n<pre><code class=\"language-python\">{\n  \"refundDeposit\":\n  self.refund_deposit and _deposit_to_dict(self.refund_deposit)\n}\n</code></pre>\n<p>이게 맞나?2</p>\n<p><strong>autopep8</strong>\n코드를 변경하지 않는다.</p>\n<p>개인적으로는 black, yapf의 스타일이 별로라서 autopep8을 사용하고 있다.</p>\n<h2 id=\"레거시를-위한-설정\" style=\"position:relative;\"><a href=\"#%EB%A0%88%EA%B1%B0%EC%8B%9C%EB%A5%BC-%EC%9C%84%ED%95%9C-%EC%84%A4%EC%A0%95\" aria-label=\"레거시를 위한 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>레거시를 위한 설정</h2>\n<p>pyright, mypy를 타입 명세하지 않는 등 레거시 프로젝트에서 사용하면 무수히 많은 에러 메시지가 출력된다.\ndisable 하는 편이 차라리 낫다.</p>\n<p>파이썬 도구는 <code>pyrightconfig.json</code>, <code>mypy.ini</code> 등 설정 파일을 사용하거나, 공통 설정 파일인 <code>pyproject.toml</code>을 사용한다.</p>\n<p>아래는 <code>pyproject.toml</code>에 설정한 내용이다:</p>\n<pre><code class=\"language-toml\">[tool.mypy]\npython_version = \"3.8\"\nplugins = [\"mypy_django_plugin.main\"]\ndisallow_untyped_defs = false\n\n\n[tool.django-stubs]\ndjango_settings_module = \"app.settings\"\n\n\n[tool.pyright]\nreportGeneralTypeIssues = true\n\n\n[tool.pylint.master]\nload-plugins = [\n  \"pylint_django\",\n]\ndjango-settings-module = \"app.settings\"\n[tool.pylint.messages_control]\ndisable = [\n  \"missing-docstring\",\n  \"too-few-public-methods\",\n  \"too-many-instance-attributes\",\n  \"trailing-newlines\",\n  \"too-many-arguments\",\n  \"too-many-public-methods\",\n  \"invalid-name\",\n  \"too-many-locals\",\n  \"too-many-return-statements\",\n  \"too-many-lines\",\n]\n[tool.pylint.format]\nmax-line-length = 150\n</code></pre>\n<p>mypy, pyright, pylint 설정을 모두 <code>pyproject.toml</code>에 넣었다.</p>\n<p><code>reportGeneralTypeIssues = false</code>는 <code>Cannot access member \"id\" for type \"UserFactory\"   Member \"id\" is unknown</code> 같은 에러를 무시한다.\ndjango, factory-boy 등 파이썬 매직을 사용하는 경우 이런 문제가 발생하는데 무시하자. 최신 버전부터는 이런 문제가 없는지 확인하지 않았다.<br>\n타입을 잘 명세하는 경우, <code>Literal['foo', 'bar']</code> 와 같이 명세하고 에러를 정적 체크하는 것은 매우 유용한데, 이런 에러도 무시하게 된다.\n<code>cannot access member ~</code>만 무시하고 <code>Argument of type \"Literal['foo', 'bar']\" cannot be assigned to parameter \"param_name\" of type</code> 같은 에러는 리포트 받고 싶은데, 아직 방법을 찾지 못했다.<br>\n일단 <code>true</code>로 설정하여 번거롭지만 <code>Cannot access member ~</code> 에러도 리포트 받도록 했다.</p>\n<p><code>disallow_untyped_defs</code>는 mypy에서 타입 명세하지 않으면 에러 메시지를 출력하는 옵션이다. 이것도 무시한다.</p>\n<h1 id=\"python-mock\" style=\"position:relative;\"><a href=\"#python-mock\" aria-label=\"python mock permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Python mock</h1>\n<p><a href=\"https://docs.python.org/3/library/unittest.mock.html\">https://docs.python.org/3/library/unittest.mock.html</a></p>\n<p>설치: <code>pip install mock</code></p>\n<h2 id=\"decorator를-사용한-mocking\" style=\"position:relative;\"><a href=\"#decorator%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-mocking\" aria-label=\"decorator를 사용한 mocking permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Decorator를 사용한 mocking.</h2>\n<pre><code class=\"language-python\">from mock import patch\nimport mymodule\n\n\nclass Mytest(unittest.TestCase):\n  @patch.object(mymodule, 'method')\n  def test_normal(self):\n    pass\n</code></pre>\n<p>테스트는 주로 클래스로 하나의 테스트 슈트를 구성하고,\nMocking은 각 테스트(method)에 <code>@patch.object</code>나 <code>@patch</code> decorator를 주로 사용하고 있다.</p>\n<p><code>requests</code> 모듈을 mocking 한다고 가정하자.</p>\n<h2 id=\"patchrequestsget\" style=\"position:relative;\"><a href=\"#patchrequestsget\" aria-label=\"patchrequestsget permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>@patch('requests.get')</code></h2>\n<p>어디서든 <code>requests.get()</code> 사용한다면, mock 객체를 반환한다.\n간단한 방법이지만, <code>mymodule</code>에서 <code>requests</code>를 사용함을 암시적으로 보여준다.</p>\n<h2 id=\"patchobjectmymodule-requests\" style=\"position:relative;\"><a href=\"#patchobjectmymodule-requests\" aria-label=\"patchobjectmymodule requests permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>@patch.object(mymodule, 'requests')</code></h2>\n<p><code>mymodule</code> 내에서만 <code>requests</code>를 사용한다는 점을 명시적으로 표현한다.\n개인적으로 이 방법을 더 많이 사용한다.</p>\n<p><code>requests</code> 자체가 mock 객체이기 때문에, <code>requests</code>의 <code>get</code>, <code>post</code> 등 모든 함수들이\nmock 객체가 된다.</p>\n<p><code>get</code> 응답을 대체하고 싶으면, 테스트 안에서, 넘어오는 mock 객체를 변경해야 한다:</p>\n<pre><code class=\"language-python\">class Mytest(unittest.TestCase):\n  @patch.object(mymodule, 'requests')\n  def test_normal(self, mock_requests):\n    mock_requests.get.return_value = None\n</code></pre>\n<p>테스트 내에서만 mocking 정보를 명시하기 때문에, 다른 테스트에서 재사용할 수 없다.</p>\n<h2 id=\"patchobjectmymodule-requests-newmyrequests\" style=\"position:relative;\"><a href=\"#patchobjectmymodule-requests-newmyrequests\" aria-label=\"patchobjectmymodule requests newmyrequests permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>@patch.object(mymodule, 'requests', new=MyRequests)</code></h2>\n<p><code>requests</code>가 <code>MyRequests</code>로 대체된다.</p>\n<pre><code class=\"language-python\">class MyRequests(object):\n  @staticmethod\n  def get(*args, **kwargs):\n    res = Mock()\n    res.headers = {\n      'content-type': 'text/html'\n    }\n    return res\n</code></pre>\n<p>위와 같은 방법으로 <code>get</code> 함수만 내가 원하는 응답을 내려주게 하고,\n<code>post</code> 등 다른 함수는 기본 mock 객체를 내려준다.</p>\n<p>mocking 정보를 다른 테스트에서도 재사용할 수 있어서 유용하다.</p>\n<h2 id=\"patchobjectmymodule-method-return_valuenone\" style=\"position:relative;\"><a href=\"#patchobjectmymodule-method-return_valuenone\" aria-label=\"patchobjectmymodule method return_valuenone permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>@patch.object(mymodule, 'method', return_value=None)</code></h2>\n<p><code>mymodule.method()</code> 반환값을 <code>None</code>으로 대체한다.</p>\n<h1 id=\"package-manager\" style=\"position:relative;\"><a href=\"#package-manager\" aria-label=\"package manager permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Package manager</h1>\n<p>파이썬의 패키지 매니저인 pip는 파이썬 설치 시 함께 제공된다.\n그러나 다른 언어의 패키지 매니저와 비교해 보면 안좋다.</p>\n<p><code>pip install PACKAGE_NAME</code>로 설치하고 <code>pip freeze > requirements.txt</code>로\n의존 모듈 목록을 저장하는데, 의존성의 의존성까지 저장하게 된다.\nDjango만 설치했는데, Django가 사용하는 다른 패키지도 포함된다.</p>\n<p>개발과 프로덕션 환경 관리도 애매하다. <code>pip freeze > requirements-dev.txt</code> 처럼\n수동으로 관리해야 하는데, 프로덕션만 업데이트 하려고 해도 이미 개발 환경의 모듈이\n포함되어 있다.</p>\n<p>아무튼, 간단하지만 그만큼 이런저런 불편함이 있는 기본 도구다.</p>\n<h2 id=\"pipenv\" style=\"position:relative;\"><a href=\"#pipenv\" aria-label=\"pipenv permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>pipenv</h2>\n<p><a href=\"https://github.com/pypa/pipenv\">https://github.com/pypa/pipenv</a></p>\n<p>이런 불편함을 알았는지 환경 분리도 가능하고, lock 파일도 별도로 관리할 수 있는\n<a href=\"https://github.com/pypa/pipenv\">pipenv</a>가 있다. <code>pyenv</code>와 좀 헷갈린다.</p>\n<p><a href=\"https://www.python.org/\">python.org</a>에서도 가상 <code>pipenv</code>를 이용하여 가상환경 사용을 추천하고 있다:</p>\n<blockquote>\n<p>For software that is not distributed with (or developed for) your system, we recommend using a virtual environment, possibly with an environment manager like conda or pipenv, to help avoid disrupting your system Python installation.</p>\n</blockquote>\n<p>link: <a href=\"https://packaging.python.org/guides/tool-recommendations/\">https://packaging.python.org/guides/tool-recommendations/</a></p>\n<p>설치가 좀 애매한데, OSX는 Homebrew로 쉽게 설치가능해 보인다.</p>\n<p>ubuntu 14.04에서는 다른 선택지가 없어서 <code>pip install</code>로 설치해봤는데 <code>2018.11.26</code> 버전이 설치됐다.\n구버전 같아 보이는데 아직 제대로 사용해보지 않아서, 최적화된 버전 일지도 모르겠다.</p>\n<p>Dockerize 하는데 이슈가 있다. 빌드 할 때 pipenv를 결국 설치해야 하는데, 로직을 돌리는데 불필요한 존재기 때문이다.\n그래서 multi-stage build를 하는 것이 필요하다. 빌드 스테이지에서 pipenv를 설치하고, pipenv를 이용하여 requirements.txt를 생성하고,\nrequirements.txt를 가지고 실행 스테이지에서 의존 모듈을 설치한다. 그러면 프로덕션 레벨에서 pipenv를 감출 수 있다.</p>\n<h1 id=\"packaging\" style=\"position:relative;\"><a href=\"#packaging\" aria-label=\"packaging permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Packaging</h1>\n<h2 id=\"__all__\" style=\"position:relative;\"><a href=\"#__all__\" aria-label=\"__all__ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>__all__</code></h2>\n<p><code>my_module.py</code>라는 파일이 있다고 하자:</p>\n<pre><code class=\"language-python\">__all__ = ['foo', 'Bar']\n\n\ndef foo():\n  pass\n\n\nclass Bar:\n  pass\n\n\n_baz = 1\n</code></pre>\n<p>파일 최상단에 <code>__all__</code>을 사용한다고 <code>my_module.py</code>을 임포트 했을 때 <code>_baz</code>에 접근하지 못하게 할 수는 없다.</p>\n<p><code>from my_module import _baz</code></p>\n<p>하지만 <code>__all__</code>을 사용하면 <code>__init__.py</code>를 사용했을 때 효과가 있다.</p>\n<pre><code>my_module/\n  __init__.py\n  my_module.py\n</code></pre>\n<p>위 구조로 만들어 두고 <code>__init__.py</code>에서 <code>my_module.py</code>를 asterisk를 이용하여 임포트한다:</p>\n<pre><code class=\"language-python\">from my_module.my_module import *  # NOQA\n</code></pre>\n<p>flake8이 경고를 출력하므로 <code># NOQA</code>로 무시하도록 했다.</p>\n<p>이렇게하면 <code>my_module</code>을 사용하는 곳에선 <code>foo</code>, <code>bar</code>만 가져올 수 있다.</p>\n<pre><code class=\"language-python\">from my_module import foo, bar  # 가능\nfrom my_module import _baz  # 불가능\n</code></pre>"}},"pageContext":{"id":"457fcbe4-c8fa-545c-8821-db7825841f60","fields__slug":"/python/","__params":{"fields__slug":"python"}}},"staticQueryHashes":[],"slicesMap":{}}