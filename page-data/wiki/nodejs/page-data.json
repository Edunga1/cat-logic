{"componentChunkName":"component---src-components-gatsby-templates-wiki-tsx","path":"/wiki/nodejs/","result":{"data":{"file":{"fields":{"gitLogs":[{"hash":"63bd54c41accd8f5eb2b0fca9ec1a2ad5fb06280","date":"2025-04-19T21:29:58+09:00"},{"hash":"e4da7be6d9c8af7278f21950953330e13051c23e","date":"2024-09-01T11:01:32Z"},{"hash":"39b346835f69068924f3ecc0290172f0aeb6a429","date":"2024-09-01T11:00:22Z"},{"hash":"3eeede7d495f2fca827f5fd624c5cac34a71849e","date":"2024-08-15T10:35:26Z"},{"hash":"70eafc46ef17d81926eb9f9ed0688ff2faf4282c","date":"2024-07-14T07:44:01Z"},{"hash":"d234371b30e04a5a4d3ce4adf69ce651f153b601","date":"2024-07-13T13:03:22Z"},{"hash":"280928234a2830745bff03254d2d931cd2909ad7","date":"2024-07-11T13:59:14Z"},{"hash":"1f4bac13238b7dfc4354deebe1cb871976606b17","date":"2024-07-10T12:38:55Z"},{"hash":"96e1a33ec9b1d0df8b383d87e459e8552df0b1ed","date":"2024-06-14T14:58:13Z"},{"hash":"7d4c299f7f68de322e2627034f1252d5a41da952","date":"2024-06-14T14:16:17Z"}]},"childMarkdownRemark":{"headings":[{"value":"Node JS"}],"fields":{"slug":"/nodejs/","relatedDocs":[{"slug":"reverse-engineering","similarity":0.3214053803},{"slug":"kubernetes","similarity":0.3836844099},{"slug":"hardware","similarity":0.3472420842},{"slug":"network","similarity":0.4088350607},{"slug":"physics","similarity":0.3987375386},{"slug":"experience-review","similarity":0.3541954315},{"slug":"css","similarity":0.4271553899},{"slug":"gradle","similarity":0.3991685417},{"slug":"redis","similarity":0.367455904},{"slug":"apm","similarity":0.3668216371},{"slug":"embeddings","similarity":0.4327969675},{"slug":"clean-code","similarity":0.5204676485},{"slug":"scp","similarity":0.2592121084},{"slug":"vimwiki","similarity":0.3385433254},{"slug":"amazon-redshift","similarity":0.2987645862},{"slug":"github","similarity":0.3924510146},{"slug":"jargon","similarity":0.4927166063},{"slug":"windows","similarity":0.390856885},{"slug":"test-driven-development","similarity":0.3844430618},{"slug":"c-sharp","similarity":0.3710958675},{"slug":"linux","similarity":0.3078741137},{"slug":"valve","similarity":0.4203122442},{"slug":"sentry","similarity":0.2949212975},{"slug":"phidata","similarity":0.3949982839},{"slug":"continuous-integration-and-deployment","similarity":0.4007036865},{"slug":"object-oriented-programming","similarity":0.4453249662},{"slug":"webgl","similarity":0.4455437867},{"slug":"quotation","similarity":0.3660181224},{"slug":"airflow","similarity":0.3014406627},{"slug":"reactjs","similarity":0.4497363578},{"slug":"unicode","similarity":0.4019918923},{"slug":"sfml","similarity":0.4251511604},{"slug":"data-structure","similarity":0.369847312},{"slug":"java","similarity":0.3638825484},{"slug":"system-failures","similarity":0.3119438874},{"slug":"swagger","similarity":0.3423174447},{"slug":"postgresql","similarity":0.3451679398},{"slug":"reactive-extensions","similarity":0.2921121869},{"slug":"windows-subsystem-for-linux","similarity":0.4445841561},{"slug":"mail","similarity":0.2973261527},{"slug":"unity3d","similarity":0.446147609},{"slug":"code-review","similarity":0.4278292992},{"slug":"programming-paradigm","similarity":0.5018303742},{"slug":"elasticsearch","similarity":0.4151900772},{"slug":"idea-methodology","similarity":0.3840330668},{"slug":"software-development","similarity":0.6070984575},{"slug":"devops","similarity":0.4605123499},{"slug":"html-canvas","similarity":0.3980052722},{"slug":"podman","similarity":0.3763186745},{"slug":"ionic-framework","similarity":0.4265404537},{"slug":"data-analysis","similarity":0.3853258991},{"slug":"security","similarity":0.3853856037},{"slug":"html","similarity":0.3722678039},{"slug":"computer-graphics","similarity":0.3314295096},{"slug":"vuejs","similarity":0.3232969395},{"slug":"crontab","similarity":0.3253705858},{"slug":"database","similarity":0.517160811},{"slug":"인공지능/용어/추론 애플리케이션","similarity":0.4338422524},{"slug":"python","similarity":0.4737566518},{"slug":"tools","similarity":0.4982243549},{"slug":"nodejs","similarity":1},{"slug":"rust","similarity":0.4825291719},{"slug":"treesitter","similarity":0.4012784105},{"slug":"spring-framework","similarity":0.4311271706},{"slug":"chrome-browser","similarity":0.3999430317},{"slug":"markdown","similarity":0.3953674959},{"slug":"shell","similarity":0.4727930631},{"slug":"logging","similarity":0.3494094228},{"slug":"jetbrains","similarity":0.4210322901},{"slug":"google-analytics","similarity":0.3582521526},{"slug":"curl","similarity":0.3619687571},{"slug":"inspiration","similarity":0.407118593},{"slug":"philosophy","similarity":0.5709341649},{"slug":"programming-convention","similarity":0.4884882206},{"slug":"design-pattern","similarity":0.4286483898},{"slug":"algorithm","similarity":0.4036127346},{"slug":"javascript","similarity":0.6046407101},{"slug":"architecture","similarity":0.4325990655},{"slug":"jira","similarity":0.3832350785},{"slug":"book","similarity":0.4215552737},{"slug":"vim-plugins","similarity":0.3601141669},{"slug":"aws","similarity":0.4082677761},{"slug":"gatsbyjs","similarity":0.5099411352},{"slug":"game","similarity":0.4252378351},{"slug":"kotlin","similarity":0.409025242},{"slug":"bk","similarity":0.2046387355},{"slug":"cat-logic","similarity":0.4651049695},{"slug":"playwright","similarity":0.4300474452},{"slug":"vimenter-2023","similarity":0.3291441702},{"slug":"git","similarity":0.4017887736},{"slug":"language-server-protocol","similarity":0.4005497258},{"slug":"model-context-protocol","similarity":0.4036688104},{"slug":"vim","similarity":0.4030919213},{"slug":"2016-08-27-gdg-webtech-workshop-nnn","similarity":0.4684504631},{"slug":"openai","similarity":0.3891975443},{"slug":"ollama","similarity":0.3866371444},{"slug":"2016-11-16-google-campus-two-things-you-must-keep-in-google-play","similarity":0.3327466649},{"slug":"space","similarity":0.3464356244},{"slug":"testing","similarity":0.5295568465},{"slug":"angularjs","similarity":0.4787114431},{"slug":"company","similarity":0.399618814},{"slug":"mac-os","similarity":0.442735537},{"slug":"godot","similarity":0.5144631146},{"slug":"web","similarity":0.4519394526},{"slug":"docker","similarity":0.4737025145},{"slug":"machine-learning","similarity":0.3898526878},{"slug":"tmux","similarity":0.3447821905},{"slug":"large-language-model","similarity":0.353363025}]},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#node-js\">Node JS</a></p>\n<ul>\n<li>\n<p><a href=\"#package-manager\">Package Manager</a></p>\n<ul>\n<li><a href=\"#yarn\">yarn</a></li>\n<li><a href=\"#pnpm\">pnpm</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#builit-in-modules\">Builit-in Modules</a></p>\n<ul>\n<li>\n<p><a href=\"#fs---file-system\">fs - File System</a></p>\n<ul>\n<li><a href=\"#mkdtemp\">mkdtemp</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#test-runner\">Test Runner</a></p>\n</li>\n<li>\n<p><a href=\"#third-party-testing-libraries\">Third-party testing libraries</a></p>\n<ul>\n<li><a href=\"#mocha---test-framework\">Mocha - Test Framework</a></li>\n<li><a href=\"#chai---assertion-library\">Chai - Assertion Library</a></li>\n<li><a href=\"#istanbul---test-coverage-tool\">Istanbul - Test Coverage Tool</a></li>\n<li><a href=\"#sinonjs---mocking-library\">Sinon.JS - Mocking Library</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#joi---%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B2%80%EC%A6%9D-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC\">Joi - 데이터 검증 라이브러리</a></p>\n</li>\n<li>\n<p><a href=\"#nodejs-%EC%84%9C%EB%B2%84-%EB%A1%9C%EC%BB%AC-%EC%9A%94%EC%B2%AD%EB%A7%8C-%ED%97%88%EC%9A%A9%ED%95%98%EA%B8%B0\">NodeJS 서버 로컬 요청만 허용하기</a></p>\n</li>\n<li>\n<p><a href=\"#pm2-deploy-%EC%8B%9C-%EC%A3%BC%EC%9D%98%ED%95%A0-%EC%A0%90\">pm2 deploy 시 주의할 점</a></p>\n</li>\n<li>\n<p><a href=\"#jupyter-notebook-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">Jupyter notebook 사용하기</a></p>\n</li>\n<li>\n<p><a href=\"#taming-architecture-complexity-in-v8\">Taming architecture complexity in v8</a></p>\n</li>\n</ul>\n</li>\n</ul>","html":"<h1 id=\"node-js\" style=\"position:relative;\"><a href=\"#node-js\" aria-label=\"node js permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Node JS</h1>\n<p>크로스플랫폼 자바스크립트 런타임. 보통 서버 사이드에서 사용한다.</p>\n<p>node.js(2009)를 시작으로 Deno(2018), Bun(2023) 등 다양한 런타임이 나왔다.</p>\n<p>웹 프론트엔드 개발과 서버 사이드를 같은 언어로 작성할 수 있다는 점은 초기 프로젝트 개발에 매력적인 요소이다.</p>\n<hr>\n<p><a href=\"https://nodejs.org/en/about\">NodeJS 소개 페이지에 따르면...</a></p>\n<blockquote>\n<p>Node.js is similar in design to, and influenced by, systems like Ruby's <a href=\"https://github.com/eventmachine/eventmachine\">Event Machine</a> and Python's <a href=\"https://twisted.org/\">Twisted</a>.</p>\n</blockquote>\n<p>Ruby의 Event Machine과 Python의 Twisted에 영향을 받았다고 한다.\n두 라이브러리 모두 이벤트 기반 비동기 처리 라이브러리로 보인다.\nNode.JS가 이런 라이브러리들과 다른 점은 런타임 차원에서 제공해서 이벤트의 시작을 명시적으로 하지 않아도 된다고 한다.\n그래서 비동기 처리를 하는 이벤트루프가 사용자에게 숨겨진다고.</p>\n<p>또한 HTTP는 Node.JS에서 일급 객체(First-class citizen)로 취급된다고 한다.\n스트리밍과 저지연을 염두하고 설계되어서, 웹 프레임워크나 라이브러리와 잘 맞는다고 한다.</p>\n<p>마지막으로 스레드 없이 설계되었다고 해서 멀티 코어의 이점이 없는 것은 아니라고 말한다.\n<a href=\"https://nodejs.org/api/child_process.html\">child_process</a> 모듈을 사용하면 fork 할 수 있으며,\n동일한 인터페이스를 가진 <a href=\"https://nodejs.org/api/cluster.html\">cluster</a> 모듈을 사용해서 소켓을 공유할 수 있다고 마무리한다.</p>\n<h2 id=\"package-manager\" style=\"position:relative;\"><a href=\"#package-manager\" aria-label=\"package manager permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Package Manager</h2>\n<p>npm은 node.js의 패키지 관리자이다.\nnode.js 설치하면 npm을 함께 포함한다.</p>\n<p>이 생태계에서 주로 사용하는 패키지매니저는 npm, yarn, pnpm이 있다.\n3개 모두 <code class=\"language-text\">package.json</code>을 사용한다. 추가로 패키지매니저 별로 lock와 별도 설정 파일을 사용한다.</p>\n<p>어떤 node.js 프로젝트를 확인할 때 패키지매니저 전용 파일을 확인하거나,\n<code class=\"language-text\">package.json</code>의 <code class=\"language-text\">packageManager</code> 필드를 확인하면 된다.\ne.g. <a href=\"https://github.com/jestjs/jest/blob/main/package.json\">jest</a>는 <code class=\"language-text\">\"packageManager\": \"yarn@3.6.4\"</code></p>\n<p><strong>의존성 설치 속도 비교</strong></p>\n<p><a href=\"../cat-logic\">cat logic</a> sites 프로젝트의 의존성 설치 속도를 비교했다.</p>\n<table>\n<thead>\n<tr>\n<th>Package Manager</th>\n<th>Install Time</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>npm</td>\n<td>20s</td>\n</tr>\n<tr>\n<td>pnpm</td>\n<td>2.9s</td>\n</tr>\n<tr>\n<td>yarn v1</td>\n<td>16.1s</td>\n</tr>\n</tbody>\n</table>\n<p>pnpm이 가장 빨랐다. 다만 모두 캐시된 상황이라 정확한 비교는 아니다.\ngithub actions 환경에서 npm 40s, pnpm 19.3s 소요되었다.</p>\n<h3 id=\"yarn\" style=\"position:relative;\"><a href=\"#yarn\" aria-label=\"yarn permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>yarn</h3>\n<p><a href=\"https://github.com/yarnpkg/yarn\">yarn</a>은 v1과 그 이후 버전으로 프로젝트가 나뉜다.</p>\n<p>yarn은 <code class=\"language-text\">yarn.lock</code>을 lock 파일로 사용한다.</p>\n<hr>\n<p>2023-11 최근 yarn을 시도해 보았는데, 좋은 선택은 아닌 거 같다.\n일단 <a href=\"https://github.com/yarnpkg/yarn\">yarn</a> v1은 22년 이후로 1.22.19로 종료되었다.</p>\n<p>이후로 yarn v2, v3, v4가 나왔는데, v1과 다른 프로젝다.\n<a href=\"https://github.com/yarnpkg/berry\">berry</a>라는 이름으로 yarn의 새 버전을 이끈다.\ncli는 yarn 이름을 같이 사용하지만 프로젝트가 달라서 Homebrew로 설치도 할 수 없다.\n예전에는 yarn이 npm보다 더 개선된 패키지 관리자라는 것이었는데,\n이렇게 관리하는 것은 생태계에 혼란만 가져온다.</p>\n<p>반면에 npm은 지금까지도 한 프로젝트에서 관리되고 있다.\n그래서 혼란이 없다. node.js에 내장되어 있으므로 따로 설치할 필요도 없다.\n다만 <code class=\"language-text\">npm audit</code>은 짜증만 난다. 이걸로 제대로 고쳐지는 경우가 많이 없는 거 같다.</p>\n<h3 id=\"pnpm\" style=\"position:relative;\"><a href=\"#pnpm\" aria-label=\"pnpm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>pnpm</h3>\n<p><a href=\"https://github.com/pnpm/pnpm\">pnpm</a> GitHub Star가 가장 많다.\n최근들어 흔하게 사용하는 거 같다.</p>\n<p>설치는 <code class=\"language-text\">npm install -g pnpm</code> 또는 <code class=\"language-text\">brew install pnpm</code>.</p>\n<ul>\n<li><code class=\"language-text\">pnpm-lock.yaml</code> lock 파일을 사용한다.</li>\n<li><code class=\"language-text\">pnpm-workspace.yaml</code> Monorepositories 위한 <a href=\"https://pnpm.io/workspaces\">workspace</a> 설정 파일을 사용한다.</li>\n</ul>\n<p>Monorepo가 아니라면 <code class=\"language-text\">pnpm-workspace.yaml</code>은 필요 없는 것으로 보인다.\n괜히 빈 내용으로 추가하면 패키지 설치 시 매번 root project 경고가 발생한다.</p>\n<p><code class=\"language-text\">pnpm install</code> 시 warning이 줄어든 것을 확인할 수 있었다.\n단순히 숨긴건지는 모르겠지만 <code class=\"language-text\">npm install</code> 경우에는 수 많은 peer depdency warning으로 신경이 쓰이는 반면에 pnpm은 warning이 없었다.</p>\n<hr>\n<p>다른 패키지매니저와 <code class=\"language-text\">node_modules</code> 구조가 다른지, migration 아티클들을 보면 <code class=\"language-text\">node_modules</code>를 삭제하고 시작한다.</p>\n<p><code class=\"language-text\">node_modules</code> 구조는 <a href=\"https://pnpm.io/ko/blog/2020/05/27/flat-node-modules-is-not-the-only-way\">평탄한 node_modules가 유일한 방법은 아닙니다.</a> 공식 블로그에서 설명한다.</p>\n<p>expressjs를 설치했을 때 <code class=\"language-text\">node_modules</code> 구조를 비교해보면 다음과 같다:</p>\n<p>npm은</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">.bin\naccepts\narray-flatten\nbody-parser\nbytes\ncontent-disposition\ncookie-signature\ncookie\ndebug\ndepd\ndestroy\nee-first\nencodeurl\nescape-html\netag\nexpress</code></pre></div>\n<p>pnpm은</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">.pnpm\n.modules.yaml\nexpress</code></pre></div>\n<p><code class=\"language-text\">node_modules</code>를 평탄하게 유지하지 않는다. 또한 <code class=\"language-text\">express</code> 폴더는 <strong>심볼릭 링크</strong>이다.</p>\n<h2 id=\"builit-in-modules\" style=\"position:relative;\"><a href=\"#builit-in-modules\" aria-label=\"builit in modules permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Builit-in Modules</h2>\n<h3 id=\"fs---file-system\" style=\"position:relative;\"><a href=\"#fs---file-system\" aria-label=\"fs   file system permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>fs - File System</h3>\n<h4 id=\"mkdtemp\" style=\"position:relative;\"><a href=\"#mkdtemp\" aria-label=\"mkdtemp permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>mkdtemp</h4>\n<p><a href=\"https://nodejs.org/docs/v20.15.1/api/fs.html#fsmkdtempprefix-options-callback\">fs.mkdtemp</a>는 임시 디렉토리를 생성한다.\n중복 이름을 피하여 생성해 줘서 편리하다.</p>\n<p>예를들어 다음과 같이 사용하여 <code class=\"language-text\">/tmp</code> 디렉토리에 임시 폴더를 생성할 수 있다.\n동기 버전을 사용했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> mkdtempSync <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> tmpdir <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'os'</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">mkdtempSync</span><span class=\"token punctuation\">(</span><span class=\"token function\">tmpdir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'/my-temp-folder-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// /tmp/my-temp-folder-GqR04W</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">mkdtempSync</span><span class=\"token punctuation\">(</span><span class=\"token function\">tmpdir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'/my-temp-folder-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// /tmp/my-temp-folder-egRlg4</span></code></pre></div>\n<p>몇 번 실행하면 <code class=\"language-text\">/tmp</code>에 임시 폴더가 많이 생성되어 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">ls</span> /tmp <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> my-temp\nmy-temp-folder-egRlg4\nmy-temp-folder-EqXLKK\nmy-temp-folder-GqR04W\nmy-temp-folder-LBeRjv</code></pre></div>\n<hr>\n<p><a href=\"https://github.com/kraynel/gatsby-transformer-gitinfo/blob/master/src/__tests__/gatsby_node.js#L68\">gatsby-transformer-gitinfo</a>라는 프로젝트는 통합 테스트에서 Git 프로젝트를 생성하기 위해서 사용한다.</p>\n<h2 id=\"test-runner\" style=\"position:relative;\"><a href=\"#test-runner\" aria-label=\"test runner permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Test Runner</h2>\n<p>v20.0.0부터 node.js에서 테스트 러너를 자체적으로 제공한다.\nv18.0.0, v16.17.0 부터 실험적 기능으로 추가되었다.</p>\n<p><a href=\"https://nodejs.org/docs/latest/api/test.html\">https://nodejs.org/docs/latest/api/test.html</a></p>\n<p>사용 방법은 jest와 흡사하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> test <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'node:test'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> assert <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'assert'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'top level test'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">t</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'subtest 1'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">t</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    assert<span class=\"token punctuation\">.</span><span class=\"token function\">strictEqual</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">await</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'subtest 2'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">t</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    assert<span class=\"token punctuation\">.</span><span class=\"token function\">strictEqual</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>assert 라이브러리는 오래전부터 제공했었다.</p>\n<p><code class=\"language-text\">describe()</code> - <code class=\"language-text\">it()</code> 스타일도 지원한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> assert <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'assert'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> describe<span class=\"token punctuation\">,</span> it <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'node:test'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A thing'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should work'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    assert<span class=\"token punctuation\">.</span><span class=\"token function\">strictEqual</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should be ok'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    assert<span class=\"token punctuation\">.</span><span class=\"token function\">strictEqual</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a nested thing'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should work'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      assert<span class=\"token punctuation\">.</span><span class=\"token function\">strictEqual</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>실행은 <code class=\"language-text\">node --test</code>로 실행한다.\n지켜보기 모드는 <code class=\"language-text\">node --test --watch</code>.</p>\n<p>Mocking 라이브러리도 제공한다고 하니 이제는 별도 라이브러리를 설치할 필요 없이 가능할 거 같다.</p>\n<hr>\n<p>관련 문서</p>\n<p><a href=\"https://snyk.io/blog/10-modern-node-js-runtime-features/\">10 modern Node.js runtime features to start using in 2024</a></p>\n<hr>\n<p>gatsby 관련 플러그인을 jest에서 node.js 테스트 러너로 마이그레이션해 보았다.</p>\n<p>작업 커밋: <a href=\"https://github.com/Edunga1/gatsby-transformer-gitinfo/commit/ccdc7f4ec61e487db047678d32c0f65d85cacd03\">https://github.com/Edunga1/gatsby-transformer-gitinfo/commit/ccdc7f4ec61e487db047678d32c0f65d85cacd03</a></p>\n<p>장점은 jest 의존성을 없앨 수 있었다는 점 하나 뿐인 듯.\n다른 테스트 도구의 인터페이스와 비슷해서 크게 손이 많이 가지는 않았다.\n다만 assertion 부분은 오래전부터 자체 제공했던 인터페이스를 유지하고 있어서, 모두 손봐야 했다.</p>\n<p>또한 jest가 제공하는 편리한 검증 함수에 비하면 node.js의 검증 도구는 협소하다.\n예를들어 두 Object가 다른 한 쪽의 부분 집합인지 확인하는 함수가 없어서, 항상 전체가 같은지 확인해야 한다.\n부분 비교를 하고 싶으면 직접 구현하거나, <code class=\"language-text\">lodash</code> 등 외부 라이브러리를 사용해야 하는데 테스트 때문에 추가해야 하는데 그러면 다른 테스트 도구를 사용하는 편이 낫겠다.</p>\n<p>또한 jest의 <code class=\"language-text\">expect.any(String)</code> 같은 matcher의 지원이 없어서 테스트 코드의 가독성이 떨어진다.</p>\n<p>이런 Jest 코드가 있으면:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>createNodeField<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledWith</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  node<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"gitLogLatestHash\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> expect<span class=\"token punctuation\">.</span><span class=\"token function\">any</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>아래와 같이 3개의 키를 가진 객체인지, 각 키의 값을 검증함으로써 같은 수준의 검증을 수행한다.\n테스트 코드가 장황해진다. 검증이 많아진다면 더욱 그렇다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">assert<span class=\"token punctuation\">.</span><span class=\"token function\">strictEqual</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>createNodeField<span class=\"token punctuation\">.</span>mock<span class=\"token punctuation\">.</span>calls<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>arguments<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">strictEqual</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">strictEqual</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"gitLogLatestHash\"</span><span class=\"token punctuation\">)</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> value <span class=\"token operator\">===</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>또다른 이슈라면, 위 프로젝트는 esm을 사용하고 있어서 <code class=\"language-text\">node</code> 명령어로 호출할 수 없다.\n<code class=\"language-text\">babel-node</code>를 통해서 실행해야 한다. <code class=\"language-text\">node -r @babel/register --test **/*.spec.js</code>로 실행한다.\n운영 코드를 <code class=\"language-text\">.mjs</code>로 작성하거나 commonjs 모듈로 전환하면 babel-node를 사용하지 않아도 되겠지만.\nbabel을 사용하지 않는다면 <code class=\"language-text\">node --test **/*.spec.js</code>로 실행한다.</p>\n<h2 id=\"third-party-testing-libraries\" style=\"position:relative;\"><a href=\"#third-party-testing-libraries\" aria-label=\"third party testing libraries permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Third-party testing libraries</h2>\n<p>테스트 프레임워크인 mocha를 기반에 검증 라이브러리로 chai를 채택하는 라이브러리 조합 방식 대신,\n<a href=\"https://github.com/facebook/jest\">Jest</a>를 사용하면 모든 기능을 한 번에 제공받을 수 있다.\n다른 테스트 라이브러리 의존을 추가할 필요가 없다는 장점이 있다.</p>\n<p>아래 도구들은 Jest 이전에 주로 사용하던 도구들이다.</p>\n<h3 id=\"mocha---test-framework\" style=\"position:relative;\"><a href=\"#mocha---test-framework\" aria-label=\"mocha   test framework permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mocha - Test Framework</h3>\n<p>테스트 구조를 제공한다.</p>\n<p>설치 : <code class=\"language-text\">npm install mocha --save-dev</code></p>\n<p>테스트 스크립트 실행 : <code class=\"language-text\">mocha &lt;PATH></code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'어떤 테스트를 할 것인지 대략적인 설명'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 매 it() 마다 실행 할 코드</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'테스트 단위 별 설명'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 여기에 Assertion 코드를 둔다.</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"chai---assertion-library\" style=\"position:relative;\"><a href=\"#chai---assertion-library\" aria-label=\"chai   assertion library permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Chai - Assertion Library</h3>\n<p>Assertion 라이브러리. 값 비교에 사용한다.</p>\n<p>설치 : <code class=\"language-text\">npm install chai --save-dev</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'어떤 테스트를 할 것인지 대략적인 설명'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'테스트 단위 별 설명'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 여기에 Assertion 코드를 둔다.</span>\n        <span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 통과</span>\n        <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 값이 다르므로 통과하지 못함</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"istanbul---test-coverage-tool\" style=\"position:relative;\"><a href=\"#istanbul---test-coverage-tool\" aria-label=\"istanbul   test coverage tool permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Istanbul - Test Coverage Tool</h3>\n<p>코드 커버리지 도구. 내 <strong>테스트 코드</strong>가 <strong>모듈의 어디까지 테스트하는지 측정</strong>하는데 사용한다.</p>\n<p><a href=\"https://github.com/istanbuljs/nyc\">https://github.com/istanbuljs/nyc</a></p>\n<p>기존 istanbul은 deprecated 되고, nyc로 새로운 프로젝트로 이전되었다. 아래 내용은 istanbul을 기준의 내용이다.</p>\n<hr>\n<p>설치: <code class=\"language-text\">npm install istanbul --save-dev</code></p>\n<p>테스트 시 <code class=\"language-text\">coverage/</code> 폴더가 생성되어 리포트 페이지(html)를 생성한다. 페이지를 통해서 실제 모듈이 얼마나 호출 되었는지, 어디까지 테스트 되었는지 확인한다.</p>\n<p>Mocha와 함께 실행: <code class=\"language-text\">istanbul cover _mocha</code> (<code class=\"language-text\">_mocha</code>인 이유는 Mocha의 프로세스 이름을 이용하기 때문)</p>\n<h3 id=\"sinonjs---mocking-library\" style=\"position:relative;\"><a href=\"#sinonjs---mocking-library\" aria-label=\"sinonjs   mocking library permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sinon.JS - Mocking Library</h3>\n<p>자바스크립트를 위한 테스트 spies, stubs, mocks.\n가짜 객체를 만들어서 기존 객체를 대체하여 테스트에 맞게 조작하는 도구이다.</p>\n<p><code class=\"language-text\">new Date()</code> 조작하기</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> clock <span class=\"token operator\">=</span> sinon<span class=\"token punctuation\">.</span><span class=\"token function\">useFakeTimers</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1800-01-01 00:00:00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Wed Jan 01 1800 00:00:00 GMT+0900 (KST)</span>\nclock<span class=\"token punctuation\">.</span><span class=\"token function\">restore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// now</span></code></pre></div>\n<p><code class=\"language-text\">useFakeTimers()</code>로부터 반환되는 객체의 <code class=\"language-text\">restore()</code>를 호출하여 조작된 시간을 복구할 수 있다.</p>\n<p>주의할 점은 복구하지 않고 다시 조작하는 경우.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> clock1 <span class=\"token operator\">=</span> sinon<span class=\"token punctuation\">.</span><span class=\"token function\">useFakeTimers</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1800-01-01 00:00:00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Wed Jan 01 1800 00:00:00 GMT+0900 (KST)</span>\n<span class=\"token keyword\">var</span> clock2 <span class=\"token operator\">=</span> sinon<span class=\"token punctuation\">.</span><span class=\"token function\">useFakeTimers</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2000-12-01 00:00:00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Fri Dec 01 2000 00:00:00 GMT+0900 (KST)</span>\nclock2<span class=\"token punctuation\">.</span><span class=\"token function\">restore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Wed Jan 01 1800 00:00:00 GMT+0900 (KST)</span>\nclock1<span class=\"token punctuation\">.</span><span class=\"token function\">restore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// now</span></code></pre></div>\n<p>나중에 조작한 시간을 복구해도 이전에 조작한 시간이 남아 있다.</p>\n<p><code class=\"language-text\">clock1</code>을 바로 복구해도 돌아올 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> clock1 <span class=\"token operator\">=</span> sinon<span class=\"token punctuation\">.</span><span class=\"token function\">useFakeTimers</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1800-01-01 00:00:00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Wed Jan 01 1800 00:00:00 GMT+0900 (KST)</span>\n<span class=\"token keyword\">var</span> clock2 <span class=\"token operator\">=</span> sinon<span class=\"token punctuation\">.</span><span class=\"token function\">useFakeTimers</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2000-12-01 00:00:00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Fri Dec 01 2000 00:00:00 GMT+0900 (KST)</span>\nclock1<span class=\"token punctuation\">.</span><span class=\"token function\">restore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// now</span></code></pre></div>\n<h2 id=\"joi---데이터-검증-라이브러리\" style=\"position:relative;\"><a href=\"#joi---%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B2%80%EC%A6%9D-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC\" aria-label=\"joi   데이터 검증 라이브러리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Joi - 데이터 검증 라이브러리</h2>\n<p>웹 서버를 작성할 때, 요청 데이터를 수동으로 검증하는 일은 너무 피곤하다.</p>\n<p>Python Django는 자체적으로 Form 클래스를 제공한다:<br>\n<a href=\"https://developer.mozilla.org/ko/docs/Learn/Server-side/Django/Forms\">https://developer.mozilla.org/ko/docs/Learn/Server-side/Django/Forms</a></p>\n<p>Django Form은 정말 다양한 필드를 지원한다.</p>\n<p>Python Flask는 WTForm 또는 Marshmallow을 사용한다:</p>\n<ul>\n<li><a href=\"https://github.com/wtforms/wtforms\">https://github.com/wtforms/wtforms</a></li>\n<li><a href=\"https://github.com/marshmallow-code/marshmallow\">https://github.com/marshmallow-code/marshmallow</a></li>\n</ul>\n<p>WTForm이 경량하게 사용할 수 있었고, Marshmallow는 사용해보지 않았다.\nMarshmallow는 Django의 Form과 영속성을 결합한 Model Form과 비슷한 기능을 지원하는 거 같다.</p>\n<p>NodeJS는 아직까지 사용해본 적이 없다.\n이때까지 수동으로 처리해왔는데 너무 힘들었다.\n이런거도 해보려다가 말았다:<br>\n<a href=\"https://github.com/Edunga1/grooming-type-checker\">https://github.com/Edunga1/grooming-type-checker</a></p>\n<p>expressjs나 다른 프레임워크는 어떻게 처리하는지 찾아보니 Joi를 사용하는가 보다.\n<a href=\"https://github.com/hapijs/joi\">Joi</a>는 <a href=\"https://github.com/hapijs/hapi\">hapijs</a>의 생태계에서 개발되었다.\nJoi는 24년 9월 기준 Star 수가 20k로 인기있는 라이브러리이다. HapiJS는 웹 프레임워크다.</p>\n<blockquote>\n<p>The most powerful schema description language and data validator for JavaScript.</p>\n</blockquote>\n<p>Joi는 hapijs에 종속되지 않아서 어느 곳에서나 사용할 수 있다.</p>\n<h2 id=\"nodejs-서버-로컬-요청만-허용하기\" style=\"position:relative;\"><a href=\"#nodejs-%EC%84%9C%EB%B2%84-%EB%A1%9C%EC%BB%AC-%EC%9A%94%EC%B2%AD%EB%A7%8C-%ED%97%88%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"nodejs 서버 로컬 요청만 허용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>NodeJS 서버 로컬 요청만 허용하기</h2>\n<p><a href=\"https://stackoverflow.com/questions/14043926/node-js-connect-only-works-on-localhost\">https://stackoverflow.com/questions/14043926/node-js-connect-only-works-on-localhost</a><br>\n여기에서 힌트를 얻었음</p>\n<p><a href=\"https://nodejs.org/api/net.html#net_server_listen_port_host_backlog_callback\">https://nodejs.org/api/net.html#net_server_listen_port_host_backlog_callback</a><br>\n<code class=\"language-text\">server.listen()</code> 스펙을 보면 포트 번호와 함께 host(ip)를 입력하면 해당 ip만 허용한다.</p>\n<p>기본값은 <code class=\"language-text\">0.0.0.0</code>이고 '지정되지 않음'을 의미하며 외부 ip의 연결도 허용하지만, <code class=\"language-text\">127.0.0.1</code>으로 두면 로컬 연결만 허용된다.</p>\n<p>근데, 이렇게 로컬 요청을 구분하는 것은 좋지 않은 것으로 보인다.\nMSA 환경 구축하면 다른 머신의 연결도 있을테니까.\nvirtual host 또는 방화벽으로 막는게 합리적으로 보인다.</p>\n<h2 id=\"pm2-deploy-시-주의할-점\" style=\"position:relative;\"><a href=\"#pm2-deploy-%EC%8B%9C-%EC%A3%BC%EC%9D%98%ED%95%A0-%EC%A0%90\" aria-label=\"pm2 deploy 시 주의할 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>pm2 deploy 시 주의할 점</h2>\n<p>pm2는 node.js 운영 환경의 프로세스 매니저이다.\n원격 서버에 코드를 배포하고, 애플리케이션을 다중 실행, 모니터링 등 다양한 기능을 제공한다.</p>\n<p>Docker가 일반적으로 사용되기 전에는 pm2가 좋은 선택이었다.</p>\n<hr>\n<p><a href=\"http://pm2.keymetrics.io/docs/usage/deployment/#complete-tutorial\">pm2 deploy tutorial</a>\n처럼 <code class=\"language-text\">post-deploy</code>를 다음과 같이 저장하는 경우 조심해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"post-deploy\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"npm install &amp;&amp; pm2 startOrRestart ecosystem.json --env production\"</span></code></pre></div>\n<p><code class=\"language-text\">pm2 deploy</code> 하면 다음 절차로 일이 발생한다:</p>\n<ol>\n<li>로컬 <code class=\"language-text\">ecosystem.json</code>과 같은 설정 파일을 읽어들임</li>\n<li>명세한 서버 정보(<code class=\"language-text\">user</code>, <code class=\"language-text\">host</code>)로 리모트 서버에 접속</li>\n<li>(리모트 서버에서) git pull</li>\n<li>(리모트 서버에서) npm install</li>\n<li>(리모트 서버에서) pm2 startOrRestart ecosystem.json --env production</li>\n<li>(리모트 서버에서) 위 명령어에 의한 <code class=\"language-text\">ecosystem.json</code> 설정 파일을 읽어들임</li>\n<li><code class=\"language-text\">apps</code> 명세에 따른 배포</li>\n</ol>\n<p>그러니까 설정 파일은 로컬에서, 리모트에서 총 2번 읽어들인다.</p>\n<p>그래서 pm2는 현재 브랜치가 트래킹 중인 리모트 브랜치와 달라지면 싱크를 맞추라고 한다: <code class=\"language-text\">push your changes before deploying</code></p>\n<p>로컬과 서버의 설정 파일이 불일치하면 골치 아파진다. 서로 다른 설정 파일을 읽기 때문에 원하는 대로 작업이 이루어지지 않을 수도 있다.\n원인은 로컬에서 실행되는 명령어의 명세인 <code class=\"language-text\">deploy</code>, 리모트 서버에서 실행되는 명령어의 명세인 <code class=\"language-text\">apps</code>를 보통 하나의 파일에서 관리하고\n코드베이스에 포함하기 때문인데, 설정 파일을 다른 위치에 두면 로컬과 리모트의 설정 파일의 싱크를 보장할 수 없다.</p>\n<hr>\n<p>pm2로 배포 프로세스를 관리하고 싶어서 설정 파일을 작성하였으나, 데이터베이스 비밀번호를 <code class=\"language-text\">env</code>에 저장하면 코드베이스에 포함되기 때문에,\n다른 repository로 분리하려 했다.</p>\n<p>그래서 <code class=\"language-text\">npm run deploy</code>하면 셸 스크립트를 실행하도록 했다:</p>\n<ol>\n<li>pm2 설정 파일을 가지는 저장소<code class=\"language-text\">git clone git@github.com:user/repo.git .config</code></li>\n<li><code class=\"language-text\">pm2 deploy .config/ecosystem.json production</code></li>\n</ol>\n<p>리모트 서버에는 <code class=\"language-text\">config</code> 저장소를 하나 클론 받아놓고 적절한 곳에 두고\n<code class=\"language-text\">post-deploy</code>를 <code class=\"language-text\">\"npm install &amp;&amp; pm2 startOrRestart /home/node/config/ecosystem.json --env production\"</code>\n설정 파일의 위치를 해당 위치를 가리키도록 했다.</p>\n<p>이러다보니 설정 정보를 업데이트해도 리모트에서 다시 pull 하지 않으면 로컬에서는 최신 설정을, 리모트에서는 이전 설정을 사용하는 문제가 있다.</p>\n<p>따라서 리모트에서도 항상 <code class=\"language-text\">config</code> 저장소를 clone 후 <code class=\"language-text\">pm2 startOrRestart</code> 하도록 해야겠다.</p>\n<h2 id=\"jupyter-notebook-사용하기\" style=\"position:relative;\"><a href=\"#jupyter-notebook-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"jupyter notebook 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Jupyter notebook 사용하기</h2>\n<p>[Jupyter Docker Stacks](docker#Jupyter Docker Stacks)</p>\n<h2 id=\"taming-architecture-complexity-in-v8\" style=\"position:relative;\"><a href=\"#taming-architecture-complexity-in-v8\" aria-label=\"taming architecture complexity in v8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Taming architecture complexity in v8</h2>\n<p><a href=\"https://blog.theori.io/taming-architecture-complexity-in-v8-translation-47564093473b\">https://blog.theori.io/taming-architecture-complexity-in-v8-translation-47564093473b</a></p>\n<p><a href=\"https://v8.dev/blog/csa\">원문</a>을 번역한 글.</p>\n<p>옛날엔 내장 함수(builtin)가 self-hosted, JS로 작성되기도 했다.\n그러다보니 성능 이슈가 있었고, 어셈블리로 다시 작성되었다.</p>\n<p>성능은 향상되었으나, 유지보수를 하는데 어려워졌다.</p>\n<p>그래서 어셈블리어로 변환해주는 중간 계층을 두었다.\n프레임워크처럼 C++ 매크로로 틀에 맞춰 작성하면,\n어셈블리 코드로 변환된다.</p>\n<p>테스트코드 또한 C++로 작성할 수 있다.</p>\n<p>문자열 객체에 길이를 구하는 <code class=\"language-text\">GetStringLength</code> 함수를 작성하는\n자세한 예시를 보여주니 좋다.</p>\n<p>작성한 C++ 코드의 가독성이 좋아 보인다:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token function\">TF_BUILTIN</span><span class=\"token punctuation\">(</span>GetStringLength<span class=\"token punctuation\">,</span> CodeStubAssembler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Label <span class=\"token function\">not_string</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    Node<span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> maybe_string <span class=\"token operator\">=</span> <span class=\"token function\">Parameter</span><span class=\"token punctuation\">(</span>Descriptor<span class=\"token double-colon punctuation\">::</span>kInputObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">GotoIf</span><span class=\"token punctuation\">(</span><span class=\"token function\">TaggedIsSmi</span><span class=\"token punctuation\">(</span>maybe_string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>not_string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">GotoIfNot</span><span class=\"token punctuation\">(</span><span class=\"token function\">IsString</span><span class=\"token punctuation\">(</span>maybe_string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>not_string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">Return</span><span class=\"token punctuation\">(</span><span class=\"token function\">LoadStringLength</span><span class=\"token punctuation\">(</span>maybe_string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">BIND</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>not_string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">Return</span><span class=\"token punctuation\">(</span><span class=\"token function\">UndefinedConstant</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"https://blog.hassler.ec/wp/2019/04/07/1-powerful-way-to-write-robust-code/\">견고한 코드를 작성하는 방법</a>\n글이 생각났다. 진입점은 깔끔하게 유지하기.</p>"}},"allMarkdownRemark":{"nodes":[{"headings":[{"value":"2016-11-16 캠퍼스 스타트업 스쿨의 \"구글 플레이에서 꼭 지켜야 할 두 가지\""}],"fields":{"slug":"/2016-11-16-google-campus-two-things-you-must-keep-in-google-play/"}},{"headings":[{"value":"2016-08-27 GDG WebTech Workshop \"측정하는 놈, 로딩하는 놈, 그리는 놈\""}],"fields":{"slug":"/2016-08-27-gdg-webtech-workshop-nnn/"}},{"headings":[{"value":"알고리즘"}],"fields":{"slug":"/algorithm/"}},{"headings":[{"value":"Amazon Redshift"}],"fields":{"slug":"/amazon-redshift/"}},{"headings":[{"value":"Airflow"}],"fields":{"slug":"/airflow/"}},{"headings":[{"value":"APM"}],"fields":{"slug":"/apm/"}},{"headings":[{"value":"Angular JS"}],"fields":{"slug":"/angularjs/"}},{"headings":[],"fields":{"slug":"/bk/"}},{"headings":[{"value":"Architecture"}],"fields":{"slug":"/architecture/"}},{"headings":[{"value":"Amazon Web Service"}],"fields":{"slug":"/aws/"}},{"headings":[{"value":"책"}],"fields":{"slug":"/book/"}},{"headings":[{"value":"The Cat Logic"}],"fields":{"slug":"/cat-logic/"}},{"headings":[{"value":"C# Programming Language"}],"fields":{"slug":"/c-sharp/"}},{"headings":[{"value":"크롬 브라우저"}],"fields":{"slug":"/chrome-browser/"}},{"headings":[{"value":"Clean Code"}],"fields":{"slug":"/clean-code/"}},{"headings":[{"value":"회사"}],"fields":{"slug":"/company/"}},{"headings":[{"value":"코드 리뷰"}],"fields":{"slug":"/code-review/"}},{"headings":[{"value":"Computer Graphics"}],"fields":{"slug":"/computer-graphics/"}},{"headings":[{"value":"CI/CD"}],"fields":{"slug":"/continuous-integration-and-deployment/"}},{"headings":[{"value":"crontab"}],"fields":{"slug":"/crontab/"}},{"headings":[{"value":"CSS"}],"fields":{"slug":"/css/"}},{"headings":[{"value":"CURL"}],"fields":{"slug":"/curl/"}},{"headings":[{"value":"자료구조"}],"fields":{"slug":"/data-structure/"}},{"headings":[{"value":"Database"}],"fields":{"slug":"/database/"}},{"headings":[{"value":"Data analysis"}],"fields":{"slug":"/data-analysis/"}},{"headings":[{"value":"Design Pattern"}],"fields":{"slug":"/design-pattern/"}},{"headings":[{"value":"DevOps"}],"fields":{"slug":"/devops/"}},{"headings":[{"value":"Docker"}],"fields":{"slug":"/docker/"}},{"headings":[{"value":"Elasticsearch"}],"fields":{"slug":"/elasticsearch/"}},{"headings":[{"value":"임베딩"}],"fields":{"slug":"/embeddings/"}},{"headings":[{"value":"세미나 및 컨퍼런스 후기"}],"fields":{"slug":"/experience-review/"}},{"headings":[{"value":"Game"}],"fields":{"slug":"/game/"}},{"headings":[{"value":"Git"}],"fields":{"slug":"/git/"}},{"headings":[{"value":"GatsbyJS"}],"fields":{"slug":"/gatsbyjs/"}},{"headings":[{"value":"GitHub"}],"fields":{"slug":"/github/"}},{"headings":[{"value":"Gradle"}],"fields":{"slug":"/gradle/"}},{"headings":[{"value":"Godot Engine"}],"fields":{"slug":"/godot/"}},{"headings":[{"value":"Hardware"}],"fields":{"slug":"/hardware/"}},{"headings":[{"value":"HTML"}],"fields":{"slug":"/html/"}},{"headings":[{"value":"Canvas"}],"fields":{"slug":"/html-canvas/"}},{"headings":[{"value":"Google Analytics"}],"fields":{"slug":"/google-analytics/"}},{"headings":[{"value":"영감을 주는 것"}],"fields":{"slug":"/inspiration/"}},{"headings":[{"value":"아이디어 방법론"}],"fields":{"slug":"/idea-methodology/"}},{"headings":[{"value":"Ionic Framework"}],"fields":{"slug":"/ionic-framework/"}},{"headings":[{"value":"개발 용어"}],"fields":{"slug":"/jargon/"}},{"headings":[{"value":"Java Programming Language"}],"fields":{"slug":"/java/"}},{"headings":[{"value":"JetBrains"}],"fields":{"slug":"/jetbrains/"}},{"headings":[{"value":"Javascript & Typescript Programming Language"}],"fields":{"slug":"/javascript/"}},{"headings":[{"value":"Jira"}],"fields":{"slug":"/jira/"}},{"headings":[{"value":"Kotlin Programming Language"}],"fields":{"slug":"/kotlin/"}},{"headings":[{"value":"Kubernetes"}],"fields":{"slug":"/kubernetes/"}},{"headings":[{"value":"Language Server Protocol"}],"fields":{"slug":"/language-server-protocol/"}},{"headings":[{"value":"Large Language Model"}],"fields":{"slug":"/large-language-model/"}},{"headings":[{"value":"Logging"}],"fields":{"slug":"/logging/"}},{"headings":[{"value":"Mac OS"}],"fields":{"slug":"/mac-os/"}},{"headings":[{"value":"Linux"}],"fields":{"slug":"/linux/"}},{"headings":[{"value":"Machine Learning"}],"fields":{"slug":"/machine-learning/"}},{"headings":[{"value":"Mail"}],"fields":{"slug":"/mail/"}},{"headings":[{"value":"Markdown"}],"fields":{"slug":"/markdown/"}},{"headings":[{"value":"Model Context Protocol(MCP)"}],"fields":{"slug":"/model-context-protocol/"}},{"headings":[{"value":"Network"}],"fields":{"slug":"/network/"}},{"headings":[{"value":"Node JS"}],"fields":{"slug":"/nodejs/"}},{"headings":[{"value":"Object Oriented Programming"}],"fields":{"slug":"/object-oriented-programming/"}},{"headings":[{"value":"Ollama"}],"fields":{"slug":"/ollama/"}},{"headings":[{"value":"OpenAI"}],"fields":{"slug":"/openai/"}},{"headings":[{"value":"Agno"}],"fields":{"slug":"/phidata/"}},{"headings":[{"value":"개인적인 철학"}],"fields":{"slug":"/philosophy/"}},{"headings":[{"value":"Physics"}],"fields":{"slug":"/physics/"}},{"headings":[{"value":"Playwright"}],"fields":{"slug":"/playwright/"}},{"headings":[{"value":"PostgreSQL"}],"fields":{"slug":"/postgresql/"}},{"headings":[{"value":"Podman"}],"fields":{"slug":"/podman/"}},{"headings":[{"value":"Programming Convention"}],"fields":{"slug":"/programming-convention/"}},{"headings":[{"value":"Programming Paradigm"}],"fields":{"slug":"/programming-paradigm/"}},{"headings":[{"value":"인용문"}],"fields":{"slug":"/quotation/"}},{"headings":[{"value":"Python Programming Language"}],"fields":{"slug":"/python/"}},{"headings":[{"value":"Reactive Extensions (Reactive X, RX)"}],"fields":{"slug":"/reactive-extensions/"}},{"headings":[{"value":"Redis"}],"fields":{"slug":"/redis/"}},{"headings":[{"value":"React JS"}],"fields":{"slug":"/reactjs/"}},{"headings":[{"value":"Reverse Engineering"}],"fields":{"slug":"/reverse-engineering/"}},{"headings":[{"value":"Rust Programming Language"}],"fields":{"slug":"/rust/"}},{"headings":[{"value":"SCP"}],"fields":{"slug":"/scp/"}},{"headings":[{"value":"보안"}],"fields":{"slug":"/security/"}},{"headings":[{"value":"Sentry - APM & Error Tracking"}],"fields":{"slug":"/sentry/"}},{"headings":[{"value":"SFML"}],"fields":{"slug":"/sfml/"}},{"headings":[{"value":"소프트웨어 개발"}],"fields":{"slug":"/software-development/"}},{"headings":[{"value":"Shell 명령어"}],"fields":{"slug":"/shell/"}},{"headings":[{"value":"우주"}],"fields":{"slug":"/space/"}},{"headings":[{"value":"Spring framework"}],"fields":{"slug":"/spring-framework/"}},{"headings":[{"value":"Swagger"}],"fields":{"slug":"/swagger/"}},{"headings":[{"value":"시스템 장애"}],"fields":{"slug":"/system-failures/"}},{"headings":[{"value":"테스트 주도 개발 (Test Driven Development)"}],"fields":{"slug":"/test-driven-development/"}},{"headings":[{"value":"Treesitter"}],"fields":{"slug":"/treesitter/"}},{"headings":[{"value":"Tmux"}],"fields":{"slug":"/tmux/"}},{"headings":[{"value":"개발/비개발 도구"}],"fields":{"slug":"/tools/"}},{"headings":[{"value":"Testing"}],"fields":{"slug":"/testing/"}},{"headings":[{"value":"Unicode"}],"fields":{"slug":"/unicode/"}},{"headings":[{"value":"Unity 3D"}],"fields":{"slug":"/unity3d/"}},{"headings":[{"value":"Vim Plugins"}],"fields":{"slug":"/vim-plugins/"}},{"headings":[{"value":"Valve사의 신규 입사자를 위한 핸드북"}],"fields":{"slug":"/valve/"}},{"headings":[{"value":"Vim"}],"fields":{"slug":"/vim/"}},{"headings":[{"value":"VimEnter 2023"}],"fields":{"slug":"/vimenter-2023/"}},{"headings":[{"value":"VimWiki"}],"fields":{"slug":"/vimwiki/"}},{"headings":[{"value":"Vue JS"}],"fields":{"slug":"/vuejs/"}},{"headings":[{"value":"웹 개발"}],"fields":{"slug":"/web/"}},{"headings":[{"value":"WebGL"}],"fields":{"slug":"/webgl/"}},{"headings":[{"value":"Windows Subsystem for Linux (WSL)"}],"fields":{"slug":"/windows-subsystem-for-linux/"}},{"headings":[{"value":"Windows"}],"fields":{"slug":"/windows/"}},{"headings":[{"value":"추론 애플리케이션"}],"fields":{"slug":"/인공지능/용어/추론 애플리케이션/"}}]},"site":{"siteMetadata":{"gitHubRepositoryUrl":"https://github.com/edunga1/cat-logic"}}},"pageContext":{"id":"6a0d889f-1f94-52e8-b0ba-8507d6c4ce8a"}},"staticQueryHashes":[],"slicesMap":{}}